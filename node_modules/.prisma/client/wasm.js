
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.CombineScoreScalarFieldEnum = {
  id: 'id',
  fortyTime: 'fortyTime',
  tenYardSplit: 'tenYardSplit',
  twentyYardShuttle: 'twentyYardShuttle',
  threeCone: 'threeCone',
  verticalLeap: 'verticalLeap',
  playerId: 'playerId',
  broadJump: 'broadJump'
};

exports.Prisma.DraftPickScalarFieldEnum = {
  id: 'id',
  round: 'round',
  pickNumber: 'pickNumber',
  draftYear: 'draftYear',
  currentTeamId: 'currentTeamId',
  prospectId: 'prospectId',
  playerId: 'playerId',
  used: 'used',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  originalTeam: 'originalTeam'
};

exports.Prisma.PersonScalarFieldEnum = {
  pid: 'pid',
  userName: 'userName',
  emailAddress: 'emailAddress',
  password: 'password',
  firstName: 'firstName',
  lastName: 'lastName'
};

exports.Prisma.PlayerScalarFieldEnum = {
  id: 'id',
  firstName: 'firstName',
  lastName: 'lastName',
  age: 'age',
  height: 'height',
  weight: 'weight',
  handSize: 'handSize',
  armLength: 'armLength',
  homeCity: 'homeCity',
  homeState: 'homeState',
  university: 'university',
  status: 'status',
  position: 'position',
  pickId: 'pickId',
  combineScoreId: 'combineScoreId',
  prospectId: 'prospectId',
  yearEnteredLeague: 'yearEnteredLeague'
};

exports.Prisma.PlayerAwardScalarFieldEnum = {
  id: 'id',
  playerId: 'playerId',
  awardName: 'awardName',
  yearAwarded: 'yearAwarded'
};

exports.Prisma.PlayerTeamScalarFieldEnum = {
  id: 'id',
  playerId: 'playerId',
  teamId: 'teamId',
  currentTeam: 'currentTeam',
  startDate: 'startDate',
  endDate: 'endDate',
  jerseyNumber: 'jerseyNumber',
  contractValue: 'contractValue',
  contractLength: 'contractLength'
};

exports.Prisma.PostSeasonResultScalarFieldEnum = {
  id: 'id',
  playoffYear: 'playoffYear',
  lastRoundReached: 'lastRoundReached',
  winLose: 'winLose',
  opponentScore: 'opponentScore',
  teamScore: 'teamScore',
  teamId: 'teamId'
};

exports.Prisma.ProspectScalarFieldEnum = {
  id: 'id',
  firstName: 'firstName',
  lastName: 'lastName',
  position: 'position',
  college: 'college',
  height: 'height',
  weight: 'weight',
  handSize: 'handSize',
  armLength: 'armLength',
  homeCity: 'homeCity',
  homeState: 'homeState',
  fortyTime: 'fortyTime',
  tenYardSplit: 'tenYardSplit',
  verticalLeap: 'verticalLeap',
  broadJump: 'broadJump',
  threeCone: 'threeCone',
  twentyYardShuttle: 'twentyYardShuttle',
  benchPress: 'benchPress',
  drafted: 'drafted',
  draftYear: 'draftYear',
  teamId: 'teamId',
  draftPickId: 'draftPickId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ScheduleScalarFieldEnum = {
  id: 'id',
  teamId: 'teamId',
  seasonYear: 'seasonYear',
  oppTeamId: 'oppTeamId',
  oppTeamConference: 'oppTeamConference',
  oppTeamDivision: 'oppTeamDivision',
  scheduleWeek: 'scheduleWeek',
  gameDate: 'gameDate',
  gameCity: 'gameCity',
  gameStateProvince: 'gameStateProvince',
  gameCountry: 'gameCountry',
  gameLocation: 'gameLocation',
  wonLostFlag: 'wonLostFlag',
  homeOrAway: 'homeOrAway',
  oppTeamScore: 'oppTeamScore',
  teamScore: 'teamScore'
};

exports.Prisma.TeamScalarFieldEnum = {
  id: 'id',
  name: 'name',
  city: 'city',
  state: 'state',
  conference: 'conference',
  division: 'division',
  stadium: 'stadium',
  scheduleId: 'scheduleId'
};

exports.Prisma.TeamNeedScalarFieldEnum = {
  id: 'id',
  teamId: 'teamId',
  position: 'position',
  priority: 'priority',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  draftYear: 'draftYear'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  CombineScore: 'CombineScore',
  DraftPick: 'DraftPick',
  Person: 'Person',
  Player: 'Player',
  PlayerAward: 'PlayerAward',
  PlayerTeam: 'PlayerTeam',
  PostSeasonResult: 'PostSeasonResult',
  Prospect: 'Prospect',
  Schedule: 'Schedule',
  Team: 'Team',
  TeamNeed: 'TeamNeed'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
