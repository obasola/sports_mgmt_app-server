
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model CombineScore
 * 
 */
export type CombineScore = $Result.DefaultSelection<Prisma.$CombineScorePayload>
/**
 * Model DraftPick
 * 
 */
export type DraftPick = $Result.DefaultSelection<Prisma.$DraftPickPayload>
/**
 * Model Person
 * 
 */
export type Person = $Result.DefaultSelection<Prisma.$PersonPayload>
/**
 * Model Player
 * 
 */
export type Player = $Result.DefaultSelection<Prisma.$PlayerPayload>
/**
 * Model PlayerAward
 * 
 */
export type PlayerAward = $Result.DefaultSelection<Prisma.$PlayerAwardPayload>
/**
 * Model PlayerTeam
 * 
 */
export type PlayerTeam = $Result.DefaultSelection<Prisma.$PlayerTeamPayload>
/**
 * Model PostSeasonResult
 * 
 */
export type PostSeasonResult = $Result.DefaultSelection<Prisma.$PostSeasonResultPayload>
/**
 * Model Prospect
 * 
 */
export type Prospect = $Result.DefaultSelection<Prisma.$ProspectPayload>
/**
 * Model Schedule
 * 
 */
export type Schedule = $Result.DefaultSelection<Prisma.$SchedulePayload>
/**
 * Model Team
 * 
 */
export type Team = $Result.DefaultSelection<Prisma.$TeamPayload>
/**
 * Model TeamNeed
 * 
 */
export type TeamNeed = $Result.DefaultSelection<Prisma.$TeamNeedPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more CombineScores
 * const combineScores = await prisma.combineScore.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more CombineScores
   * const combineScores = await prisma.combineScore.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.combineScore`: Exposes CRUD operations for the **CombineScore** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CombineScores
    * const combineScores = await prisma.combineScore.findMany()
    * ```
    */
  get combineScore(): Prisma.CombineScoreDelegate<ExtArgs>;

  /**
   * `prisma.draftPick`: Exposes CRUD operations for the **DraftPick** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DraftPicks
    * const draftPicks = await prisma.draftPick.findMany()
    * ```
    */
  get draftPick(): Prisma.DraftPickDelegate<ExtArgs>;

  /**
   * `prisma.person`: Exposes CRUD operations for the **Person** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more People
    * const people = await prisma.person.findMany()
    * ```
    */
  get person(): Prisma.PersonDelegate<ExtArgs>;

  /**
   * `prisma.player`: Exposes CRUD operations for the **Player** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Players
    * const players = await prisma.player.findMany()
    * ```
    */
  get player(): Prisma.PlayerDelegate<ExtArgs>;

  /**
   * `prisma.playerAward`: Exposes CRUD operations for the **PlayerAward** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PlayerAwards
    * const playerAwards = await prisma.playerAward.findMany()
    * ```
    */
  get playerAward(): Prisma.PlayerAwardDelegate<ExtArgs>;

  /**
   * `prisma.playerTeam`: Exposes CRUD operations for the **PlayerTeam** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PlayerTeams
    * const playerTeams = await prisma.playerTeam.findMany()
    * ```
    */
  get playerTeam(): Prisma.PlayerTeamDelegate<ExtArgs>;

  /**
   * `prisma.postSeasonResult`: Exposes CRUD operations for the **PostSeasonResult** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PostSeasonResults
    * const postSeasonResults = await prisma.postSeasonResult.findMany()
    * ```
    */
  get postSeasonResult(): Prisma.PostSeasonResultDelegate<ExtArgs>;

  /**
   * `prisma.prospect`: Exposes CRUD operations for the **Prospect** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Prospects
    * const prospects = await prisma.prospect.findMany()
    * ```
    */
  get prospect(): Prisma.ProspectDelegate<ExtArgs>;

  /**
   * `prisma.schedule`: Exposes CRUD operations for the **Schedule** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Schedules
    * const schedules = await prisma.schedule.findMany()
    * ```
    */
  get schedule(): Prisma.ScheduleDelegate<ExtArgs>;

  /**
   * `prisma.team`: Exposes CRUD operations for the **Team** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Teams
    * const teams = await prisma.team.findMany()
    * ```
    */
  get team(): Prisma.TeamDelegate<ExtArgs>;

  /**
   * `prisma.teamNeed`: Exposes CRUD operations for the **TeamNeed** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TeamNeeds
    * const teamNeeds = await prisma.teamNeed.findMany()
    * ```
    */
  get teamNeed(): Prisma.TeamNeedDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    CombineScore: 'CombineScore',
    DraftPick: 'DraftPick',
    Person: 'Person',
    Player: 'Player',
    PlayerAward: 'PlayerAward',
    PlayerTeam: 'PlayerTeam',
    PostSeasonResult: 'PostSeasonResult',
    Prospect: 'Prospect',
    Schedule: 'Schedule',
    Team: 'Team',
    TeamNeed: 'TeamNeed'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "combineScore" | "draftPick" | "person" | "player" | "playerAward" | "playerTeam" | "postSeasonResult" | "prospect" | "schedule" | "team" | "teamNeed"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      CombineScore: {
        payload: Prisma.$CombineScorePayload<ExtArgs>
        fields: Prisma.CombineScoreFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CombineScoreFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CombineScorePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CombineScoreFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CombineScorePayload>
          }
          findFirst: {
            args: Prisma.CombineScoreFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CombineScorePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CombineScoreFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CombineScorePayload>
          }
          findMany: {
            args: Prisma.CombineScoreFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CombineScorePayload>[]
          }
          create: {
            args: Prisma.CombineScoreCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CombineScorePayload>
          }
          createMany: {
            args: Prisma.CombineScoreCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.CombineScoreDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CombineScorePayload>
          }
          update: {
            args: Prisma.CombineScoreUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CombineScorePayload>
          }
          deleteMany: {
            args: Prisma.CombineScoreDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CombineScoreUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CombineScoreUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CombineScorePayload>
          }
          aggregate: {
            args: Prisma.CombineScoreAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCombineScore>
          }
          groupBy: {
            args: Prisma.CombineScoreGroupByArgs<ExtArgs>
            result: $Utils.Optional<CombineScoreGroupByOutputType>[]
          }
          count: {
            args: Prisma.CombineScoreCountArgs<ExtArgs>
            result: $Utils.Optional<CombineScoreCountAggregateOutputType> | number
          }
        }
      }
      DraftPick: {
        payload: Prisma.$DraftPickPayload<ExtArgs>
        fields: Prisma.DraftPickFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DraftPickFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DraftPickPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DraftPickFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DraftPickPayload>
          }
          findFirst: {
            args: Prisma.DraftPickFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DraftPickPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DraftPickFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DraftPickPayload>
          }
          findMany: {
            args: Prisma.DraftPickFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DraftPickPayload>[]
          }
          create: {
            args: Prisma.DraftPickCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DraftPickPayload>
          }
          createMany: {
            args: Prisma.DraftPickCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.DraftPickDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DraftPickPayload>
          }
          update: {
            args: Prisma.DraftPickUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DraftPickPayload>
          }
          deleteMany: {
            args: Prisma.DraftPickDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DraftPickUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DraftPickUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DraftPickPayload>
          }
          aggregate: {
            args: Prisma.DraftPickAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDraftPick>
          }
          groupBy: {
            args: Prisma.DraftPickGroupByArgs<ExtArgs>
            result: $Utils.Optional<DraftPickGroupByOutputType>[]
          }
          count: {
            args: Prisma.DraftPickCountArgs<ExtArgs>
            result: $Utils.Optional<DraftPickCountAggregateOutputType> | number
          }
        }
      }
      Person: {
        payload: Prisma.$PersonPayload<ExtArgs>
        fields: Prisma.PersonFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PersonFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PersonFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonPayload>
          }
          findFirst: {
            args: Prisma.PersonFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PersonFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonPayload>
          }
          findMany: {
            args: Prisma.PersonFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonPayload>[]
          }
          create: {
            args: Prisma.PersonCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonPayload>
          }
          createMany: {
            args: Prisma.PersonCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.PersonDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonPayload>
          }
          update: {
            args: Prisma.PersonUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonPayload>
          }
          deleteMany: {
            args: Prisma.PersonDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PersonUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PersonUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonPayload>
          }
          aggregate: {
            args: Prisma.PersonAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePerson>
          }
          groupBy: {
            args: Prisma.PersonGroupByArgs<ExtArgs>
            result: $Utils.Optional<PersonGroupByOutputType>[]
          }
          count: {
            args: Prisma.PersonCountArgs<ExtArgs>
            result: $Utils.Optional<PersonCountAggregateOutputType> | number
          }
        }
      }
      Player: {
        payload: Prisma.$PlayerPayload<ExtArgs>
        fields: Prisma.PlayerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PlayerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PlayerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload>
          }
          findFirst: {
            args: Prisma.PlayerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PlayerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload>
          }
          findMany: {
            args: Prisma.PlayerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload>[]
          }
          create: {
            args: Prisma.PlayerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload>
          }
          createMany: {
            args: Prisma.PlayerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.PlayerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload>
          }
          update: {
            args: Prisma.PlayerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload>
          }
          deleteMany: {
            args: Prisma.PlayerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PlayerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PlayerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload>
          }
          aggregate: {
            args: Prisma.PlayerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePlayer>
          }
          groupBy: {
            args: Prisma.PlayerGroupByArgs<ExtArgs>
            result: $Utils.Optional<PlayerGroupByOutputType>[]
          }
          count: {
            args: Prisma.PlayerCountArgs<ExtArgs>
            result: $Utils.Optional<PlayerCountAggregateOutputType> | number
          }
        }
      }
      PlayerAward: {
        payload: Prisma.$PlayerAwardPayload<ExtArgs>
        fields: Prisma.PlayerAwardFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PlayerAwardFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerAwardPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PlayerAwardFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerAwardPayload>
          }
          findFirst: {
            args: Prisma.PlayerAwardFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerAwardPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PlayerAwardFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerAwardPayload>
          }
          findMany: {
            args: Prisma.PlayerAwardFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerAwardPayload>[]
          }
          create: {
            args: Prisma.PlayerAwardCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerAwardPayload>
          }
          createMany: {
            args: Prisma.PlayerAwardCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.PlayerAwardDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerAwardPayload>
          }
          update: {
            args: Prisma.PlayerAwardUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerAwardPayload>
          }
          deleteMany: {
            args: Prisma.PlayerAwardDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PlayerAwardUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PlayerAwardUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerAwardPayload>
          }
          aggregate: {
            args: Prisma.PlayerAwardAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePlayerAward>
          }
          groupBy: {
            args: Prisma.PlayerAwardGroupByArgs<ExtArgs>
            result: $Utils.Optional<PlayerAwardGroupByOutputType>[]
          }
          count: {
            args: Prisma.PlayerAwardCountArgs<ExtArgs>
            result: $Utils.Optional<PlayerAwardCountAggregateOutputType> | number
          }
        }
      }
      PlayerTeam: {
        payload: Prisma.$PlayerTeamPayload<ExtArgs>
        fields: Prisma.PlayerTeamFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PlayerTeamFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerTeamPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PlayerTeamFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerTeamPayload>
          }
          findFirst: {
            args: Prisma.PlayerTeamFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerTeamPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PlayerTeamFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerTeamPayload>
          }
          findMany: {
            args: Prisma.PlayerTeamFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerTeamPayload>[]
          }
          create: {
            args: Prisma.PlayerTeamCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerTeamPayload>
          }
          createMany: {
            args: Prisma.PlayerTeamCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.PlayerTeamDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerTeamPayload>
          }
          update: {
            args: Prisma.PlayerTeamUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerTeamPayload>
          }
          deleteMany: {
            args: Prisma.PlayerTeamDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PlayerTeamUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PlayerTeamUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerTeamPayload>
          }
          aggregate: {
            args: Prisma.PlayerTeamAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePlayerTeam>
          }
          groupBy: {
            args: Prisma.PlayerTeamGroupByArgs<ExtArgs>
            result: $Utils.Optional<PlayerTeamGroupByOutputType>[]
          }
          count: {
            args: Prisma.PlayerTeamCountArgs<ExtArgs>
            result: $Utils.Optional<PlayerTeamCountAggregateOutputType> | number
          }
        }
      }
      PostSeasonResult: {
        payload: Prisma.$PostSeasonResultPayload<ExtArgs>
        fields: Prisma.PostSeasonResultFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PostSeasonResultFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostSeasonResultPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PostSeasonResultFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostSeasonResultPayload>
          }
          findFirst: {
            args: Prisma.PostSeasonResultFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostSeasonResultPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PostSeasonResultFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostSeasonResultPayload>
          }
          findMany: {
            args: Prisma.PostSeasonResultFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostSeasonResultPayload>[]
          }
          create: {
            args: Prisma.PostSeasonResultCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostSeasonResultPayload>
          }
          createMany: {
            args: Prisma.PostSeasonResultCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.PostSeasonResultDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostSeasonResultPayload>
          }
          update: {
            args: Prisma.PostSeasonResultUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostSeasonResultPayload>
          }
          deleteMany: {
            args: Prisma.PostSeasonResultDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PostSeasonResultUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PostSeasonResultUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostSeasonResultPayload>
          }
          aggregate: {
            args: Prisma.PostSeasonResultAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePostSeasonResult>
          }
          groupBy: {
            args: Prisma.PostSeasonResultGroupByArgs<ExtArgs>
            result: $Utils.Optional<PostSeasonResultGroupByOutputType>[]
          }
          count: {
            args: Prisma.PostSeasonResultCountArgs<ExtArgs>
            result: $Utils.Optional<PostSeasonResultCountAggregateOutputType> | number
          }
        }
      }
      Prospect: {
        payload: Prisma.$ProspectPayload<ExtArgs>
        fields: Prisma.ProspectFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProspectFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProspectPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProspectFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProspectPayload>
          }
          findFirst: {
            args: Prisma.ProspectFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProspectPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProspectFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProspectPayload>
          }
          findMany: {
            args: Prisma.ProspectFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProspectPayload>[]
          }
          create: {
            args: Prisma.ProspectCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProspectPayload>
          }
          createMany: {
            args: Prisma.ProspectCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ProspectDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProspectPayload>
          }
          update: {
            args: Prisma.ProspectUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProspectPayload>
          }
          deleteMany: {
            args: Prisma.ProspectDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProspectUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProspectUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProspectPayload>
          }
          aggregate: {
            args: Prisma.ProspectAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProspect>
          }
          groupBy: {
            args: Prisma.ProspectGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProspectGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProspectCountArgs<ExtArgs>
            result: $Utils.Optional<ProspectCountAggregateOutputType> | number
          }
        }
      }
      Schedule: {
        payload: Prisma.$SchedulePayload<ExtArgs>
        fields: Prisma.ScheduleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ScheduleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ScheduleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload>
          }
          findFirst: {
            args: Prisma.ScheduleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ScheduleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload>
          }
          findMany: {
            args: Prisma.ScheduleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload>[]
          }
          create: {
            args: Prisma.ScheduleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload>
          }
          createMany: {
            args: Prisma.ScheduleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ScheduleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload>
          }
          update: {
            args: Prisma.ScheduleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload>
          }
          deleteMany: {
            args: Prisma.ScheduleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ScheduleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ScheduleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload>
          }
          aggregate: {
            args: Prisma.ScheduleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSchedule>
          }
          groupBy: {
            args: Prisma.ScheduleGroupByArgs<ExtArgs>
            result: $Utils.Optional<ScheduleGroupByOutputType>[]
          }
          count: {
            args: Prisma.ScheduleCountArgs<ExtArgs>
            result: $Utils.Optional<ScheduleCountAggregateOutputType> | number
          }
        }
      }
      Team: {
        payload: Prisma.$TeamPayload<ExtArgs>
        fields: Prisma.TeamFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TeamFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TeamFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          findFirst: {
            args: Prisma.TeamFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TeamFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          findMany: {
            args: Prisma.TeamFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>[]
          }
          create: {
            args: Prisma.TeamCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          createMany: {
            args: Prisma.TeamCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.TeamDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          update: {
            args: Prisma.TeamUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          deleteMany: {
            args: Prisma.TeamDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TeamUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TeamUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          aggregate: {
            args: Prisma.TeamAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTeam>
          }
          groupBy: {
            args: Prisma.TeamGroupByArgs<ExtArgs>
            result: $Utils.Optional<TeamGroupByOutputType>[]
          }
          count: {
            args: Prisma.TeamCountArgs<ExtArgs>
            result: $Utils.Optional<TeamCountAggregateOutputType> | number
          }
        }
      }
      TeamNeed: {
        payload: Prisma.$TeamNeedPayload<ExtArgs>
        fields: Prisma.TeamNeedFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TeamNeedFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamNeedPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TeamNeedFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamNeedPayload>
          }
          findFirst: {
            args: Prisma.TeamNeedFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamNeedPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TeamNeedFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamNeedPayload>
          }
          findMany: {
            args: Prisma.TeamNeedFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamNeedPayload>[]
          }
          create: {
            args: Prisma.TeamNeedCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamNeedPayload>
          }
          createMany: {
            args: Prisma.TeamNeedCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.TeamNeedDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamNeedPayload>
          }
          update: {
            args: Prisma.TeamNeedUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamNeedPayload>
          }
          deleteMany: {
            args: Prisma.TeamNeedDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TeamNeedUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TeamNeedUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamNeedPayload>
          }
          aggregate: {
            args: Prisma.TeamNeedAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTeamNeed>
          }
          groupBy: {
            args: Prisma.TeamNeedGroupByArgs<ExtArgs>
            result: $Utils.Optional<TeamNeedGroupByOutputType>[]
          }
          count: {
            args: Prisma.TeamNeedCountArgs<ExtArgs>
            result: $Utils.Optional<TeamNeedCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type DraftPickCountOutputType
   */

  export type DraftPickCountOutputType = {
    Prospect_Prospect_draftPickIdToDraftPick: number
  }

  export type DraftPickCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Prospect_Prospect_draftPickIdToDraftPick?: boolean | DraftPickCountOutputTypeCountProspect_Prospect_draftPickIdToDraftPickArgs
  }

  // Custom InputTypes
  /**
   * DraftPickCountOutputType without action
   */
  export type DraftPickCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DraftPickCountOutputType
     */
    select?: DraftPickCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DraftPickCountOutputType without action
   */
  export type DraftPickCountOutputTypeCountProspect_Prospect_draftPickIdToDraftPickArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProspectWhereInput
  }


  /**
   * Count Type PlayerCountOutputType
   */

  export type PlayerCountOutputType = {
    CombineScore: number
    DraftPick: number
    PlayerAward: number
    PlayerTeam: number
  }

  export type PlayerCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    CombineScore?: boolean | PlayerCountOutputTypeCountCombineScoreArgs
    DraftPick?: boolean | PlayerCountOutputTypeCountDraftPickArgs
    PlayerAward?: boolean | PlayerCountOutputTypeCountPlayerAwardArgs
    PlayerTeam?: boolean | PlayerCountOutputTypeCountPlayerTeamArgs
  }

  // Custom InputTypes
  /**
   * PlayerCountOutputType without action
   */
  export type PlayerCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerCountOutputType
     */
    select?: PlayerCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PlayerCountOutputType without action
   */
  export type PlayerCountOutputTypeCountCombineScoreArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CombineScoreWhereInput
  }

  /**
   * PlayerCountOutputType without action
   */
  export type PlayerCountOutputTypeCountDraftPickArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DraftPickWhereInput
  }

  /**
   * PlayerCountOutputType without action
   */
  export type PlayerCountOutputTypeCountPlayerAwardArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlayerAwardWhereInput
  }

  /**
   * PlayerCountOutputType without action
   */
  export type PlayerCountOutputTypeCountPlayerTeamArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlayerTeamWhereInput
  }


  /**
   * Count Type ProspectCountOutputType
   */

  export type ProspectCountOutputType = {
    DraftPick_DraftPick_prospectIdToProspect: number
    Player: number
  }

  export type ProspectCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    DraftPick_DraftPick_prospectIdToProspect?: boolean | ProspectCountOutputTypeCountDraftPick_DraftPick_prospectIdToProspectArgs
    Player?: boolean | ProspectCountOutputTypeCountPlayerArgs
  }

  // Custom InputTypes
  /**
   * ProspectCountOutputType without action
   */
  export type ProspectCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProspectCountOutputType
     */
    select?: ProspectCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProspectCountOutputType without action
   */
  export type ProspectCountOutputTypeCountDraftPick_DraftPick_prospectIdToProspectArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DraftPickWhereInput
  }

  /**
   * ProspectCountOutputType without action
   */
  export type ProspectCountOutputTypeCountPlayerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlayerWhereInput
  }


  /**
   * Count Type TeamCountOutputType
   */

  export type TeamCountOutputType = {
    DraftPick: number
    PlayerTeam: number
    PostSeasonResult: number
    Prospect: number
    Schedule_Schedule_teamIdToTeam: number
    Schedule_Schedule_oppTeamIdToTeam: number
    TeamNeed: number
  }

  export type TeamCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    DraftPick?: boolean | TeamCountOutputTypeCountDraftPickArgs
    PlayerTeam?: boolean | TeamCountOutputTypeCountPlayerTeamArgs
    PostSeasonResult?: boolean | TeamCountOutputTypeCountPostSeasonResultArgs
    Prospect?: boolean | TeamCountOutputTypeCountProspectArgs
    Schedule_Schedule_teamIdToTeam?: boolean | TeamCountOutputTypeCountSchedule_Schedule_teamIdToTeamArgs
    Schedule_Schedule_oppTeamIdToTeam?: boolean | TeamCountOutputTypeCountSchedule_Schedule_oppTeamIdToTeamArgs
    TeamNeed?: boolean | TeamCountOutputTypeCountTeamNeedArgs
  }

  // Custom InputTypes
  /**
   * TeamCountOutputType without action
   */
  export type TeamCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamCountOutputType
     */
    select?: TeamCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TeamCountOutputType without action
   */
  export type TeamCountOutputTypeCountDraftPickArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DraftPickWhereInput
  }

  /**
   * TeamCountOutputType without action
   */
  export type TeamCountOutputTypeCountPlayerTeamArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlayerTeamWhereInput
  }

  /**
   * TeamCountOutputType without action
   */
  export type TeamCountOutputTypeCountPostSeasonResultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PostSeasonResultWhereInput
  }

  /**
   * TeamCountOutputType without action
   */
  export type TeamCountOutputTypeCountProspectArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProspectWhereInput
  }

  /**
   * TeamCountOutputType without action
   */
  export type TeamCountOutputTypeCountSchedule_Schedule_teamIdToTeamArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScheduleWhereInput
  }

  /**
   * TeamCountOutputType without action
   */
  export type TeamCountOutputTypeCountSchedule_Schedule_oppTeamIdToTeamArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScheduleWhereInput
  }

  /**
   * TeamCountOutputType without action
   */
  export type TeamCountOutputTypeCountTeamNeedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeamNeedWhereInput
  }


  /**
   * Models
   */

  /**
   * Model CombineScore
   */

  export type AggregateCombineScore = {
    _count: CombineScoreCountAggregateOutputType | null
    _avg: CombineScoreAvgAggregateOutputType | null
    _sum: CombineScoreSumAggregateOutputType | null
    _min: CombineScoreMinAggregateOutputType | null
    _max: CombineScoreMaxAggregateOutputType | null
  }

  export type CombineScoreAvgAggregateOutputType = {
    id: number | null
    fortyTime: number | null
    tenYardSplit: number | null
    twentyYardShuttle: number | null
    threeCone: number | null
    verticalLeap: number | null
    playerId: number | null
    broadJump: number | null
  }

  export type CombineScoreSumAggregateOutputType = {
    id: number | null
    fortyTime: number | null
    tenYardSplit: number | null
    twentyYardShuttle: number | null
    threeCone: number | null
    verticalLeap: number | null
    playerId: number | null
    broadJump: number | null
  }

  export type CombineScoreMinAggregateOutputType = {
    id: number | null
    fortyTime: number | null
    tenYardSplit: number | null
    twentyYardShuttle: number | null
    threeCone: number | null
    verticalLeap: number | null
    playerId: number | null
    broadJump: number | null
  }

  export type CombineScoreMaxAggregateOutputType = {
    id: number | null
    fortyTime: number | null
    tenYardSplit: number | null
    twentyYardShuttle: number | null
    threeCone: number | null
    verticalLeap: number | null
    playerId: number | null
    broadJump: number | null
  }

  export type CombineScoreCountAggregateOutputType = {
    id: number
    fortyTime: number
    tenYardSplit: number
    twentyYardShuttle: number
    threeCone: number
    verticalLeap: number
    playerId: number
    broadJump: number
    _all: number
  }


  export type CombineScoreAvgAggregateInputType = {
    id?: true
    fortyTime?: true
    tenYardSplit?: true
    twentyYardShuttle?: true
    threeCone?: true
    verticalLeap?: true
    playerId?: true
    broadJump?: true
  }

  export type CombineScoreSumAggregateInputType = {
    id?: true
    fortyTime?: true
    tenYardSplit?: true
    twentyYardShuttle?: true
    threeCone?: true
    verticalLeap?: true
    playerId?: true
    broadJump?: true
  }

  export type CombineScoreMinAggregateInputType = {
    id?: true
    fortyTime?: true
    tenYardSplit?: true
    twentyYardShuttle?: true
    threeCone?: true
    verticalLeap?: true
    playerId?: true
    broadJump?: true
  }

  export type CombineScoreMaxAggregateInputType = {
    id?: true
    fortyTime?: true
    tenYardSplit?: true
    twentyYardShuttle?: true
    threeCone?: true
    verticalLeap?: true
    playerId?: true
    broadJump?: true
  }

  export type CombineScoreCountAggregateInputType = {
    id?: true
    fortyTime?: true
    tenYardSplit?: true
    twentyYardShuttle?: true
    threeCone?: true
    verticalLeap?: true
    playerId?: true
    broadJump?: true
    _all?: true
  }

  export type CombineScoreAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CombineScore to aggregate.
     */
    where?: CombineScoreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CombineScores to fetch.
     */
    orderBy?: CombineScoreOrderByWithRelationInput | CombineScoreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CombineScoreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CombineScores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CombineScores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CombineScores
    **/
    _count?: true | CombineScoreCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CombineScoreAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CombineScoreSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CombineScoreMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CombineScoreMaxAggregateInputType
  }

  export type GetCombineScoreAggregateType<T extends CombineScoreAggregateArgs> = {
        [P in keyof T & keyof AggregateCombineScore]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCombineScore[P]>
      : GetScalarType<T[P], AggregateCombineScore[P]>
  }




  export type CombineScoreGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CombineScoreWhereInput
    orderBy?: CombineScoreOrderByWithAggregationInput | CombineScoreOrderByWithAggregationInput[]
    by: CombineScoreScalarFieldEnum[] | CombineScoreScalarFieldEnum
    having?: CombineScoreScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CombineScoreCountAggregateInputType | true
    _avg?: CombineScoreAvgAggregateInputType
    _sum?: CombineScoreSumAggregateInputType
    _min?: CombineScoreMinAggregateInputType
    _max?: CombineScoreMaxAggregateInputType
  }

  export type CombineScoreGroupByOutputType = {
    id: number
    fortyTime: number | null
    tenYardSplit: number | null
    twentyYardShuttle: number | null
    threeCone: number | null
    verticalLeap: number | null
    playerId: number | null
    broadJump: number | null
    _count: CombineScoreCountAggregateOutputType | null
    _avg: CombineScoreAvgAggregateOutputType | null
    _sum: CombineScoreSumAggregateOutputType | null
    _min: CombineScoreMinAggregateOutputType | null
    _max: CombineScoreMaxAggregateOutputType | null
  }

  type GetCombineScoreGroupByPayload<T extends CombineScoreGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CombineScoreGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CombineScoreGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CombineScoreGroupByOutputType[P]>
            : GetScalarType<T[P], CombineScoreGroupByOutputType[P]>
        }
      >
    >


  export type CombineScoreSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fortyTime?: boolean
    tenYardSplit?: boolean
    twentyYardShuttle?: boolean
    threeCone?: boolean
    verticalLeap?: boolean
    playerId?: boolean
    broadJump?: boolean
    Player?: boolean | CombineScore$PlayerArgs<ExtArgs>
  }, ExtArgs["result"]["combineScore"]>


  export type CombineScoreSelectScalar = {
    id?: boolean
    fortyTime?: boolean
    tenYardSplit?: boolean
    twentyYardShuttle?: boolean
    threeCone?: boolean
    verticalLeap?: boolean
    playerId?: boolean
    broadJump?: boolean
  }

  export type CombineScoreInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Player?: boolean | CombineScore$PlayerArgs<ExtArgs>
  }

  export type $CombineScorePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CombineScore"
    objects: {
      Player: Prisma.$PlayerPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      fortyTime: number | null
      tenYardSplit: number | null
      twentyYardShuttle: number | null
      threeCone: number | null
      verticalLeap: number | null
      playerId: number | null
      broadJump: number | null
    }, ExtArgs["result"]["combineScore"]>
    composites: {}
  }

  type CombineScoreGetPayload<S extends boolean | null | undefined | CombineScoreDefaultArgs> = $Result.GetResult<Prisma.$CombineScorePayload, S>

  type CombineScoreCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CombineScoreFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CombineScoreCountAggregateInputType | true
    }

  export interface CombineScoreDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CombineScore'], meta: { name: 'CombineScore' } }
    /**
     * Find zero or one CombineScore that matches the filter.
     * @param {CombineScoreFindUniqueArgs} args - Arguments to find a CombineScore
     * @example
     * // Get one CombineScore
     * const combineScore = await prisma.combineScore.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CombineScoreFindUniqueArgs>(args: SelectSubset<T, CombineScoreFindUniqueArgs<ExtArgs>>): Prisma__CombineScoreClient<$Result.GetResult<Prisma.$CombineScorePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one CombineScore that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CombineScoreFindUniqueOrThrowArgs} args - Arguments to find a CombineScore
     * @example
     * // Get one CombineScore
     * const combineScore = await prisma.combineScore.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CombineScoreFindUniqueOrThrowArgs>(args: SelectSubset<T, CombineScoreFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CombineScoreClient<$Result.GetResult<Prisma.$CombineScorePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first CombineScore that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CombineScoreFindFirstArgs} args - Arguments to find a CombineScore
     * @example
     * // Get one CombineScore
     * const combineScore = await prisma.combineScore.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CombineScoreFindFirstArgs>(args?: SelectSubset<T, CombineScoreFindFirstArgs<ExtArgs>>): Prisma__CombineScoreClient<$Result.GetResult<Prisma.$CombineScorePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first CombineScore that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CombineScoreFindFirstOrThrowArgs} args - Arguments to find a CombineScore
     * @example
     * // Get one CombineScore
     * const combineScore = await prisma.combineScore.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CombineScoreFindFirstOrThrowArgs>(args?: SelectSubset<T, CombineScoreFindFirstOrThrowArgs<ExtArgs>>): Prisma__CombineScoreClient<$Result.GetResult<Prisma.$CombineScorePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more CombineScores that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CombineScoreFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CombineScores
     * const combineScores = await prisma.combineScore.findMany()
     * 
     * // Get first 10 CombineScores
     * const combineScores = await prisma.combineScore.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const combineScoreWithIdOnly = await prisma.combineScore.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CombineScoreFindManyArgs>(args?: SelectSubset<T, CombineScoreFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CombineScorePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a CombineScore.
     * @param {CombineScoreCreateArgs} args - Arguments to create a CombineScore.
     * @example
     * // Create one CombineScore
     * const CombineScore = await prisma.combineScore.create({
     *   data: {
     *     // ... data to create a CombineScore
     *   }
     * })
     * 
     */
    create<T extends CombineScoreCreateArgs>(args: SelectSubset<T, CombineScoreCreateArgs<ExtArgs>>): Prisma__CombineScoreClient<$Result.GetResult<Prisma.$CombineScorePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many CombineScores.
     * @param {CombineScoreCreateManyArgs} args - Arguments to create many CombineScores.
     * @example
     * // Create many CombineScores
     * const combineScore = await prisma.combineScore.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CombineScoreCreateManyArgs>(args?: SelectSubset<T, CombineScoreCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a CombineScore.
     * @param {CombineScoreDeleteArgs} args - Arguments to delete one CombineScore.
     * @example
     * // Delete one CombineScore
     * const CombineScore = await prisma.combineScore.delete({
     *   where: {
     *     // ... filter to delete one CombineScore
     *   }
     * })
     * 
     */
    delete<T extends CombineScoreDeleteArgs>(args: SelectSubset<T, CombineScoreDeleteArgs<ExtArgs>>): Prisma__CombineScoreClient<$Result.GetResult<Prisma.$CombineScorePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one CombineScore.
     * @param {CombineScoreUpdateArgs} args - Arguments to update one CombineScore.
     * @example
     * // Update one CombineScore
     * const combineScore = await prisma.combineScore.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CombineScoreUpdateArgs>(args: SelectSubset<T, CombineScoreUpdateArgs<ExtArgs>>): Prisma__CombineScoreClient<$Result.GetResult<Prisma.$CombineScorePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more CombineScores.
     * @param {CombineScoreDeleteManyArgs} args - Arguments to filter CombineScores to delete.
     * @example
     * // Delete a few CombineScores
     * const { count } = await prisma.combineScore.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CombineScoreDeleteManyArgs>(args?: SelectSubset<T, CombineScoreDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CombineScores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CombineScoreUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CombineScores
     * const combineScore = await prisma.combineScore.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CombineScoreUpdateManyArgs>(args: SelectSubset<T, CombineScoreUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CombineScore.
     * @param {CombineScoreUpsertArgs} args - Arguments to update or create a CombineScore.
     * @example
     * // Update or create a CombineScore
     * const combineScore = await prisma.combineScore.upsert({
     *   create: {
     *     // ... data to create a CombineScore
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CombineScore we want to update
     *   }
     * })
     */
    upsert<T extends CombineScoreUpsertArgs>(args: SelectSubset<T, CombineScoreUpsertArgs<ExtArgs>>): Prisma__CombineScoreClient<$Result.GetResult<Prisma.$CombineScorePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of CombineScores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CombineScoreCountArgs} args - Arguments to filter CombineScores to count.
     * @example
     * // Count the number of CombineScores
     * const count = await prisma.combineScore.count({
     *   where: {
     *     // ... the filter for the CombineScores we want to count
     *   }
     * })
    **/
    count<T extends CombineScoreCountArgs>(
      args?: Subset<T, CombineScoreCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CombineScoreCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CombineScore.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CombineScoreAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CombineScoreAggregateArgs>(args: Subset<T, CombineScoreAggregateArgs>): Prisma.PrismaPromise<GetCombineScoreAggregateType<T>>

    /**
     * Group by CombineScore.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CombineScoreGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CombineScoreGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CombineScoreGroupByArgs['orderBy'] }
        : { orderBy?: CombineScoreGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CombineScoreGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCombineScoreGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CombineScore model
   */
  readonly fields: CombineScoreFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CombineScore.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CombineScoreClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Player<T extends CombineScore$PlayerArgs<ExtArgs> = {}>(args?: Subset<T, CombineScore$PlayerArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CombineScore model
   */ 
  interface CombineScoreFieldRefs {
    readonly id: FieldRef<"CombineScore", 'Int'>
    readonly fortyTime: FieldRef<"CombineScore", 'Float'>
    readonly tenYardSplit: FieldRef<"CombineScore", 'Float'>
    readonly twentyYardShuttle: FieldRef<"CombineScore", 'Float'>
    readonly threeCone: FieldRef<"CombineScore", 'Float'>
    readonly verticalLeap: FieldRef<"CombineScore", 'Float'>
    readonly playerId: FieldRef<"CombineScore", 'Int'>
    readonly broadJump: FieldRef<"CombineScore", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * CombineScore findUnique
   */
  export type CombineScoreFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CombineScore
     */
    select?: CombineScoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CombineScoreInclude<ExtArgs> | null
    /**
     * Filter, which CombineScore to fetch.
     */
    where: CombineScoreWhereUniqueInput
  }

  /**
   * CombineScore findUniqueOrThrow
   */
  export type CombineScoreFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CombineScore
     */
    select?: CombineScoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CombineScoreInclude<ExtArgs> | null
    /**
     * Filter, which CombineScore to fetch.
     */
    where: CombineScoreWhereUniqueInput
  }

  /**
   * CombineScore findFirst
   */
  export type CombineScoreFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CombineScore
     */
    select?: CombineScoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CombineScoreInclude<ExtArgs> | null
    /**
     * Filter, which CombineScore to fetch.
     */
    where?: CombineScoreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CombineScores to fetch.
     */
    orderBy?: CombineScoreOrderByWithRelationInput | CombineScoreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CombineScores.
     */
    cursor?: CombineScoreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CombineScores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CombineScores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CombineScores.
     */
    distinct?: CombineScoreScalarFieldEnum | CombineScoreScalarFieldEnum[]
  }

  /**
   * CombineScore findFirstOrThrow
   */
  export type CombineScoreFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CombineScore
     */
    select?: CombineScoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CombineScoreInclude<ExtArgs> | null
    /**
     * Filter, which CombineScore to fetch.
     */
    where?: CombineScoreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CombineScores to fetch.
     */
    orderBy?: CombineScoreOrderByWithRelationInput | CombineScoreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CombineScores.
     */
    cursor?: CombineScoreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CombineScores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CombineScores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CombineScores.
     */
    distinct?: CombineScoreScalarFieldEnum | CombineScoreScalarFieldEnum[]
  }

  /**
   * CombineScore findMany
   */
  export type CombineScoreFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CombineScore
     */
    select?: CombineScoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CombineScoreInclude<ExtArgs> | null
    /**
     * Filter, which CombineScores to fetch.
     */
    where?: CombineScoreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CombineScores to fetch.
     */
    orderBy?: CombineScoreOrderByWithRelationInput | CombineScoreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CombineScores.
     */
    cursor?: CombineScoreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CombineScores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CombineScores.
     */
    skip?: number
    distinct?: CombineScoreScalarFieldEnum | CombineScoreScalarFieldEnum[]
  }

  /**
   * CombineScore create
   */
  export type CombineScoreCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CombineScore
     */
    select?: CombineScoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CombineScoreInclude<ExtArgs> | null
    /**
     * The data needed to create a CombineScore.
     */
    data?: XOR<CombineScoreCreateInput, CombineScoreUncheckedCreateInput>
  }

  /**
   * CombineScore createMany
   */
  export type CombineScoreCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CombineScores.
     */
    data: CombineScoreCreateManyInput | CombineScoreCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CombineScore update
   */
  export type CombineScoreUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CombineScore
     */
    select?: CombineScoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CombineScoreInclude<ExtArgs> | null
    /**
     * The data needed to update a CombineScore.
     */
    data: XOR<CombineScoreUpdateInput, CombineScoreUncheckedUpdateInput>
    /**
     * Choose, which CombineScore to update.
     */
    where: CombineScoreWhereUniqueInput
  }

  /**
   * CombineScore updateMany
   */
  export type CombineScoreUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CombineScores.
     */
    data: XOR<CombineScoreUpdateManyMutationInput, CombineScoreUncheckedUpdateManyInput>
    /**
     * Filter which CombineScores to update
     */
    where?: CombineScoreWhereInput
  }

  /**
   * CombineScore upsert
   */
  export type CombineScoreUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CombineScore
     */
    select?: CombineScoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CombineScoreInclude<ExtArgs> | null
    /**
     * The filter to search for the CombineScore to update in case it exists.
     */
    where: CombineScoreWhereUniqueInput
    /**
     * In case the CombineScore found by the `where` argument doesn't exist, create a new CombineScore with this data.
     */
    create: XOR<CombineScoreCreateInput, CombineScoreUncheckedCreateInput>
    /**
     * In case the CombineScore was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CombineScoreUpdateInput, CombineScoreUncheckedUpdateInput>
  }

  /**
   * CombineScore delete
   */
  export type CombineScoreDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CombineScore
     */
    select?: CombineScoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CombineScoreInclude<ExtArgs> | null
    /**
     * Filter which CombineScore to delete.
     */
    where: CombineScoreWhereUniqueInput
  }

  /**
   * CombineScore deleteMany
   */
  export type CombineScoreDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CombineScores to delete
     */
    where?: CombineScoreWhereInput
  }

  /**
   * CombineScore.Player
   */
  export type CombineScore$PlayerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
    where?: PlayerWhereInput
  }

  /**
   * CombineScore without action
   */
  export type CombineScoreDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CombineScore
     */
    select?: CombineScoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CombineScoreInclude<ExtArgs> | null
  }


  /**
   * Model DraftPick
   */

  export type AggregateDraftPick = {
    _count: DraftPickCountAggregateOutputType | null
    _avg: DraftPickAvgAggregateOutputType | null
    _sum: DraftPickSumAggregateOutputType | null
    _min: DraftPickMinAggregateOutputType | null
    _max: DraftPickMaxAggregateOutputType | null
  }

  export type DraftPickAvgAggregateOutputType = {
    id: number | null
    round: number | null
    pickNumber: number | null
    draftYear: number | null
    currentTeamId: number | null
    prospectId: number | null
    playerId: number | null
    originalTeam: number | null
  }

  export type DraftPickSumAggregateOutputType = {
    id: number | null
    round: number | null
    pickNumber: number | null
    draftYear: number | null
    currentTeamId: number | null
    prospectId: number | null
    playerId: number | null
    originalTeam: number | null
  }

  export type DraftPickMinAggregateOutputType = {
    id: number | null
    round: number | null
    pickNumber: number | null
    draftYear: number | null
    currentTeamId: number | null
    prospectId: number | null
    playerId: number | null
    used: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    originalTeam: number | null
  }

  export type DraftPickMaxAggregateOutputType = {
    id: number | null
    round: number | null
    pickNumber: number | null
    draftYear: number | null
    currentTeamId: number | null
    prospectId: number | null
    playerId: number | null
    used: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    originalTeam: number | null
  }

  export type DraftPickCountAggregateOutputType = {
    id: number
    round: number
    pickNumber: number
    draftYear: number
    currentTeamId: number
    prospectId: number
    playerId: number
    used: number
    createdAt: number
    updatedAt: number
    originalTeam: number
    _all: number
  }


  export type DraftPickAvgAggregateInputType = {
    id?: true
    round?: true
    pickNumber?: true
    draftYear?: true
    currentTeamId?: true
    prospectId?: true
    playerId?: true
    originalTeam?: true
  }

  export type DraftPickSumAggregateInputType = {
    id?: true
    round?: true
    pickNumber?: true
    draftYear?: true
    currentTeamId?: true
    prospectId?: true
    playerId?: true
    originalTeam?: true
  }

  export type DraftPickMinAggregateInputType = {
    id?: true
    round?: true
    pickNumber?: true
    draftYear?: true
    currentTeamId?: true
    prospectId?: true
    playerId?: true
    used?: true
    createdAt?: true
    updatedAt?: true
    originalTeam?: true
  }

  export type DraftPickMaxAggregateInputType = {
    id?: true
    round?: true
    pickNumber?: true
    draftYear?: true
    currentTeamId?: true
    prospectId?: true
    playerId?: true
    used?: true
    createdAt?: true
    updatedAt?: true
    originalTeam?: true
  }

  export type DraftPickCountAggregateInputType = {
    id?: true
    round?: true
    pickNumber?: true
    draftYear?: true
    currentTeamId?: true
    prospectId?: true
    playerId?: true
    used?: true
    createdAt?: true
    updatedAt?: true
    originalTeam?: true
    _all?: true
  }

  export type DraftPickAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DraftPick to aggregate.
     */
    where?: DraftPickWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DraftPicks to fetch.
     */
    orderBy?: DraftPickOrderByWithRelationInput | DraftPickOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DraftPickWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DraftPicks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DraftPicks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DraftPicks
    **/
    _count?: true | DraftPickCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DraftPickAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DraftPickSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DraftPickMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DraftPickMaxAggregateInputType
  }

  export type GetDraftPickAggregateType<T extends DraftPickAggregateArgs> = {
        [P in keyof T & keyof AggregateDraftPick]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDraftPick[P]>
      : GetScalarType<T[P], AggregateDraftPick[P]>
  }




  export type DraftPickGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DraftPickWhereInput
    orderBy?: DraftPickOrderByWithAggregationInput | DraftPickOrderByWithAggregationInput[]
    by: DraftPickScalarFieldEnum[] | DraftPickScalarFieldEnum
    having?: DraftPickScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DraftPickCountAggregateInputType | true
    _avg?: DraftPickAvgAggregateInputType
    _sum?: DraftPickSumAggregateInputType
    _min?: DraftPickMinAggregateInputType
    _max?: DraftPickMaxAggregateInputType
  }

  export type DraftPickGroupByOutputType = {
    id: number
    round: number
    pickNumber: number
    draftYear: number
    currentTeamId: number
    prospectId: number | null
    playerId: number | null
    used: boolean
    createdAt: Date | null
    updatedAt: Date | null
    originalTeam: number | null
    _count: DraftPickCountAggregateOutputType | null
    _avg: DraftPickAvgAggregateOutputType | null
    _sum: DraftPickSumAggregateOutputType | null
    _min: DraftPickMinAggregateOutputType | null
    _max: DraftPickMaxAggregateOutputType | null
  }

  type GetDraftPickGroupByPayload<T extends DraftPickGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DraftPickGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DraftPickGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DraftPickGroupByOutputType[P]>
            : GetScalarType<T[P], DraftPickGroupByOutputType[P]>
        }
      >
    >


  export type DraftPickSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    round?: boolean
    pickNumber?: boolean
    draftYear?: boolean
    currentTeamId?: boolean
    prospectId?: boolean
    playerId?: boolean
    used?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    originalTeam?: boolean
    Team?: boolean | TeamDefaultArgs<ExtArgs>
    Player?: boolean | DraftPick$PlayerArgs<ExtArgs>
    Prospect_DraftPick_prospectIdToProspect?: boolean | DraftPick$Prospect_DraftPick_prospectIdToProspectArgs<ExtArgs>
    Prospect_Prospect_draftPickIdToDraftPick?: boolean | DraftPick$Prospect_Prospect_draftPickIdToDraftPickArgs<ExtArgs>
    _count?: boolean | DraftPickCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["draftPick"]>


  export type DraftPickSelectScalar = {
    id?: boolean
    round?: boolean
    pickNumber?: boolean
    draftYear?: boolean
    currentTeamId?: boolean
    prospectId?: boolean
    playerId?: boolean
    used?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    originalTeam?: boolean
  }

  export type DraftPickInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Team?: boolean | TeamDefaultArgs<ExtArgs>
    Player?: boolean | DraftPick$PlayerArgs<ExtArgs>
    Prospect_DraftPick_prospectIdToProspect?: boolean | DraftPick$Prospect_DraftPick_prospectIdToProspectArgs<ExtArgs>
    Prospect_Prospect_draftPickIdToDraftPick?: boolean | DraftPick$Prospect_Prospect_draftPickIdToDraftPickArgs<ExtArgs>
    _count?: boolean | DraftPickCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $DraftPickPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DraftPick"
    objects: {
      Team: Prisma.$TeamPayload<ExtArgs>
      Player: Prisma.$PlayerPayload<ExtArgs> | null
      Prospect_DraftPick_prospectIdToProspect: Prisma.$ProspectPayload<ExtArgs> | null
      Prospect_Prospect_draftPickIdToDraftPick: Prisma.$ProspectPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      round: number
      pickNumber: number
      draftYear: number
      currentTeamId: number
      prospectId: number | null
      playerId: number | null
      used: boolean
      createdAt: Date | null
      updatedAt: Date | null
      originalTeam: number | null
    }, ExtArgs["result"]["draftPick"]>
    composites: {}
  }

  type DraftPickGetPayload<S extends boolean | null | undefined | DraftPickDefaultArgs> = $Result.GetResult<Prisma.$DraftPickPayload, S>

  type DraftPickCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DraftPickFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DraftPickCountAggregateInputType | true
    }

  export interface DraftPickDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DraftPick'], meta: { name: 'DraftPick' } }
    /**
     * Find zero or one DraftPick that matches the filter.
     * @param {DraftPickFindUniqueArgs} args - Arguments to find a DraftPick
     * @example
     * // Get one DraftPick
     * const draftPick = await prisma.draftPick.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DraftPickFindUniqueArgs>(args: SelectSubset<T, DraftPickFindUniqueArgs<ExtArgs>>): Prisma__DraftPickClient<$Result.GetResult<Prisma.$DraftPickPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one DraftPick that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DraftPickFindUniqueOrThrowArgs} args - Arguments to find a DraftPick
     * @example
     * // Get one DraftPick
     * const draftPick = await prisma.draftPick.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DraftPickFindUniqueOrThrowArgs>(args: SelectSubset<T, DraftPickFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DraftPickClient<$Result.GetResult<Prisma.$DraftPickPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first DraftPick that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DraftPickFindFirstArgs} args - Arguments to find a DraftPick
     * @example
     * // Get one DraftPick
     * const draftPick = await prisma.draftPick.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DraftPickFindFirstArgs>(args?: SelectSubset<T, DraftPickFindFirstArgs<ExtArgs>>): Prisma__DraftPickClient<$Result.GetResult<Prisma.$DraftPickPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first DraftPick that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DraftPickFindFirstOrThrowArgs} args - Arguments to find a DraftPick
     * @example
     * // Get one DraftPick
     * const draftPick = await prisma.draftPick.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DraftPickFindFirstOrThrowArgs>(args?: SelectSubset<T, DraftPickFindFirstOrThrowArgs<ExtArgs>>): Prisma__DraftPickClient<$Result.GetResult<Prisma.$DraftPickPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more DraftPicks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DraftPickFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DraftPicks
     * const draftPicks = await prisma.draftPick.findMany()
     * 
     * // Get first 10 DraftPicks
     * const draftPicks = await prisma.draftPick.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const draftPickWithIdOnly = await prisma.draftPick.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DraftPickFindManyArgs>(args?: SelectSubset<T, DraftPickFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DraftPickPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a DraftPick.
     * @param {DraftPickCreateArgs} args - Arguments to create a DraftPick.
     * @example
     * // Create one DraftPick
     * const DraftPick = await prisma.draftPick.create({
     *   data: {
     *     // ... data to create a DraftPick
     *   }
     * })
     * 
     */
    create<T extends DraftPickCreateArgs>(args: SelectSubset<T, DraftPickCreateArgs<ExtArgs>>): Prisma__DraftPickClient<$Result.GetResult<Prisma.$DraftPickPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many DraftPicks.
     * @param {DraftPickCreateManyArgs} args - Arguments to create many DraftPicks.
     * @example
     * // Create many DraftPicks
     * const draftPick = await prisma.draftPick.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DraftPickCreateManyArgs>(args?: SelectSubset<T, DraftPickCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a DraftPick.
     * @param {DraftPickDeleteArgs} args - Arguments to delete one DraftPick.
     * @example
     * // Delete one DraftPick
     * const DraftPick = await prisma.draftPick.delete({
     *   where: {
     *     // ... filter to delete one DraftPick
     *   }
     * })
     * 
     */
    delete<T extends DraftPickDeleteArgs>(args: SelectSubset<T, DraftPickDeleteArgs<ExtArgs>>): Prisma__DraftPickClient<$Result.GetResult<Prisma.$DraftPickPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one DraftPick.
     * @param {DraftPickUpdateArgs} args - Arguments to update one DraftPick.
     * @example
     * // Update one DraftPick
     * const draftPick = await prisma.draftPick.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DraftPickUpdateArgs>(args: SelectSubset<T, DraftPickUpdateArgs<ExtArgs>>): Prisma__DraftPickClient<$Result.GetResult<Prisma.$DraftPickPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more DraftPicks.
     * @param {DraftPickDeleteManyArgs} args - Arguments to filter DraftPicks to delete.
     * @example
     * // Delete a few DraftPicks
     * const { count } = await prisma.draftPick.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DraftPickDeleteManyArgs>(args?: SelectSubset<T, DraftPickDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DraftPicks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DraftPickUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DraftPicks
     * const draftPick = await prisma.draftPick.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DraftPickUpdateManyArgs>(args: SelectSubset<T, DraftPickUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one DraftPick.
     * @param {DraftPickUpsertArgs} args - Arguments to update or create a DraftPick.
     * @example
     * // Update or create a DraftPick
     * const draftPick = await prisma.draftPick.upsert({
     *   create: {
     *     // ... data to create a DraftPick
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DraftPick we want to update
     *   }
     * })
     */
    upsert<T extends DraftPickUpsertArgs>(args: SelectSubset<T, DraftPickUpsertArgs<ExtArgs>>): Prisma__DraftPickClient<$Result.GetResult<Prisma.$DraftPickPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of DraftPicks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DraftPickCountArgs} args - Arguments to filter DraftPicks to count.
     * @example
     * // Count the number of DraftPicks
     * const count = await prisma.draftPick.count({
     *   where: {
     *     // ... the filter for the DraftPicks we want to count
     *   }
     * })
    **/
    count<T extends DraftPickCountArgs>(
      args?: Subset<T, DraftPickCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DraftPickCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DraftPick.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DraftPickAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DraftPickAggregateArgs>(args: Subset<T, DraftPickAggregateArgs>): Prisma.PrismaPromise<GetDraftPickAggregateType<T>>

    /**
     * Group by DraftPick.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DraftPickGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DraftPickGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DraftPickGroupByArgs['orderBy'] }
        : { orderBy?: DraftPickGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DraftPickGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDraftPickGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DraftPick model
   */
  readonly fields: DraftPickFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DraftPick.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DraftPickClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Team<T extends TeamDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TeamDefaultArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    Player<T extends DraftPick$PlayerArgs<ExtArgs> = {}>(args?: Subset<T, DraftPick$PlayerArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    Prospect_DraftPick_prospectIdToProspect<T extends DraftPick$Prospect_DraftPick_prospectIdToProspectArgs<ExtArgs> = {}>(args?: Subset<T, DraftPick$Prospect_DraftPick_prospectIdToProspectArgs<ExtArgs>>): Prisma__ProspectClient<$Result.GetResult<Prisma.$ProspectPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    Prospect_Prospect_draftPickIdToDraftPick<T extends DraftPick$Prospect_Prospect_draftPickIdToDraftPickArgs<ExtArgs> = {}>(args?: Subset<T, DraftPick$Prospect_Prospect_draftPickIdToDraftPickArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProspectPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DraftPick model
   */ 
  interface DraftPickFieldRefs {
    readonly id: FieldRef<"DraftPick", 'Int'>
    readonly round: FieldRef<"DraftPick", 'Int'>
    readonly pickNumber: FieldRef<"DraftPick", 'Int'>
    readonly draftYear: FieldRef<"DraftPick", 'Int'>
    readonly currentTeamId: FieldRef<"DraftPick", 'Int'>
    readonly prospectId: FieldRef<"DraftPick", 'Int'>
    readonly playerId: FieldRef<"DraftPick", 'Int'>
    readonly used: FieldRef<"DraftPick", 'Boolean'>
    readonly createdAt: FieldRef<"DraftPick", 'DateTime'>
    readonly updatedAt: FieldRef<"DraftPick", 'DateTime'>
    readonly originalTeam: FieldRef<"DraftPick", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * DraftPick findUnique
   */
  export type DraftPickFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DraftPick
     */
    select?: DraftPickSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DraftPickInclude<ExtArgs> | null
    /**
     * Filter, which DraftPick to fetch.
     */
    where: DraftPickWhereUniqueInput
  }

  /**
   * DraftPick findUniqueOrThrow
   */
  export type DraftPickFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DraftPick
     */
    select?: DraftPickSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DraftPickInclude<ExtArgs> | null
    /**
     * Filter, which DraftPick to fetch.
     */
    where: DraftPickWhereUniqueInput
  }

  /**
   * DraftPick findFirst
   */
  export type DraftPickFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DraftPick
     */
    select?: DraftPickSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DraftPickInclude<ExtArgs> | null
    /**
     * Filter, which DraftPick to fetch.
     */
    where?: DraftPickWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DraftPicks to fetch.
     */
    orderBy?: DraftPickOrderByWithRelationInput | DraftPickOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DraftPicks.
     */
    cursor?: DraftPickWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DraftPicks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DraftPicks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DraftPicks.
     */
    distinct?: DraftPickScalarFieldEnum | DraftPickScalarFieldEnum[]
  }

  /**
   * DraftPick findFirstOrThrow
   */
  export type DraftPickFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DraftPick
     */
    select?: DraftPickSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DraftPickInclude<ExtArgs> | null
    /**
     * Filter, which DraftPick to fetch.
     */
    where?: DraftPickWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DraftPicks to fetch.
     */
    orderBy?: DraftPickOrderByWithRelationInput | DraftPickOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DraftPicks.
     */
    cursor?: DraftPickWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DraftPicks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DraftPicks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DraftPicks.
     */
    distinct?: DraftPickScalarFieldEnum | DraftPickScalarFieldEnum[]
  }

  /**
   * DraftPick findMany
   */
  export type DraftPickFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DraftPick
     */
    select?: DraftPickSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DraftPickInclude<ExtArgs> | null
    /**
     * Filter, which DraftPicks to fetch.
     */
    where?: DraftPickWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DraftPicks to fetch.
     */
    orderBy?: DraftPickOrderByWithRelationInput | DraftPickOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DraftPicks.
     */
    cursor?: DraftPickWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DraftPicks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DraftPicks.
     */
    skip?: number
    distinct?: DraftPickScalarFieldEnum | DraftPickScalarFieldEnum[]
  }

  /**
   * DraftPick create
   */
  export type DraftPickCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DraftPick
     */
    select?: DraftPickSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DraftPickInclude<ExtArgs> | null
    /**
     * The data needed to create a DraftPick.
     */
    data: XOR<DraftPickCreateInput, DraftPickUncheckedCreateInput>
  }

  /**
   * DraftPick createMany
   */
  export type DraftPickCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DraftPicks.
     */
    data: DraftPickCreateManyInput | DraftPickCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DraftPick update
   */
  export type DraftPickUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DraftPick
     */
    select?: DraftPickSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DraftPickInclude<ExtArgs> | null
    /**
     * The data needed to update a DraftPick.
     */
    data: XOR<DraftPickUpdateInput, DraftPickUncheckedUpdateInput>
    /**
     * Choose, which DraftPick to update.
     */
    where: DraftPickWhereUniqueInput
  }

  /**
   * DraftPick updateMany
   */
  export type DraftPickUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DraftPicks.
     */
    data: XOR<DraftPickUpdateManyMutationInput, DraftPickUncheckedUpdateManyInput>
    /**
     * Filter which DraftPicks to update
     */
    where?: DraftPickWhereInput
  }

  /**
   * DraftPick upsert
   */
  export type DraftPickUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DraftPick
     */
    select?: DraftPickSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DraftPickInclude<ExtArgs> | null
    /**
     * The filter to search for the DraftPick to update in case it exists.
     */
    where: DraftPickWhereUniqueInput
    /**
     * In case the DraftPick found by the `where` argument doesn't exist, create a new DraftPick with this data.
     */
    create: XOR<DraftPickCreateInput, DraftPickUncheckedCreateInput>
    /**
     * In case the DraftPick was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DraftPickUpdateInput, DraftPickUncheckedUpdateInput>
  }

  /**
   * DraftPick delete
   */
  export type DraftPickDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DraftPick
     */
    select?: DraftPickSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DraftPickInclude<ExtArgs> | null
    /**
     * Filter which DraftPick to delete.
     */
    where: DraftPickWhereUniqueInput
  }

  /**
   * DraftPick deleteMany
   */
  export type DraftPickDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DraftPicks to delete
     */
    where?: DraftPickWhereInput
  }

  /**
   * DraftPick.Player
   */
  export type DraftPick$PlayerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
    where?: PlayerWhereInput
  }

  /**
   * DraftPick.Prospect_DraftPick_prospectIdToProspect
   */
  export type DraftPick$Prospect_DraftPick_prospectIdToProspectArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prospect
     */
    select?: ProspectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProspectInclude<ExtArgs> | null
    where?: ProspectWhereInput
  }

  /**
   * DraftPick.Prospect_Prospect_draftPickIdToDraftPick
   */
  export type DraftPick$Prospect_Prospect_draftPickIdToDraftPickArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prospect
     */
    select?: ProspectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProspectInclude<ExtArgs> | null
    where?: ProspectWhereInput
    orderBy?: ProspectOrderByWithRelationInput | ProspectOrderByWithRelationInput[]
    cursor?: ProspectWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProspectScalarFieldEnum | ProspectScalarFieldEnum[]
  }

  /**
   * DraftPick without action
   */
  export type DraftPickDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DraftPick
     */
    select?: DraftPickSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DraftPickInclude<ExtArgs> | null
  }


  /**
   * Model Person
   */

  export type AggregatePerson = {
    _count: PersonCountAggregateOutputType | null
    _avg: PersonAvgAggregateOutputType | null
    _sum: PersonSumAggregateOutputType | null
    _min: PersonMinAggregateOutputType | null
    _max: PersonMaxAggregateOutputType | null
  }

  export type PersonAvgAggregateOutputType = {
    pid: number | null
  }

  export type PersonSumAggregateOutputType = {
    pid: number | null
  }

  export type PersonMinAggregateOutputType = {
    pid: number | null
    userName: string | null
    emailAddress: string | null
    password: string | null
    firstName: string | null
    lastName: string | null
  }

  export type PersonMaxAggregateOutputType = {
    pid: number | null
    userName: string | null
    emailAddress: string | null
    password: string | null
    firstName: string | null
    lastName: string | null
  }

  export type PersonCountAggregateOutputType = {
    pid: number
    userName: number
    emailAddress: number
    password: number
    firstName: number
    lastName: number
    _all: number
  }


  export type PersonAvgAggregateInputType = {
    pid?: true
  }

  export type PersonSumAggregateInputType = {
    pid?: true
  }

  export type PersonMinAggregateInputType = {
    pid?: true
    userName?: true
    emailAddress?: true
    password?: true
    firstName?: true
    lastName?: true
  }

  export type PersonMaxAggregateInputType = {
    pid?: true
    userName?: true
    emailAddress?: true
    password?: true
    firstName?: true
    lastName?: true
  }

  export type PersonCountAggregateInputType = {
    pid?: true
    userName?: true
    emailAddress?: true
    password?: true
    firstName?: true
    lastName?: true
    _all?: true
  }

  export type PersonAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Person to aggregate.
     */
    where?: PersonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of People to fetch.
     */
    orderBy?: PersonOrderByWithRelationInput | PersonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PersonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` People from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` People.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned People
    **/
    _count?: true | PersonCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PersonAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PersonSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PersonMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PersonMaxAggregateInputType
  }

  export type GetPersonAggregateType<T extends PersonAggregateArgs> = {
        [P in keyof T & keyof AggregatePerson]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePerson[P]>
      : GetScalarType<T[P], AggregatePerson[P]>
  }




  export type PersonGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PersonWhereInput
    orderBy?: PersonOrderByWithAggregationInput | PersonOrderByWithAggregationInput[]
    by: PersonScalarFieldEnum[] | PersonScalarFieldEnum
    having?: PersonScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PersonCountAggregateInputType | true
    _avg?: PersonAvgAggregateInputType
    _sum?: PersonSumAggregateInputType
    _min?: PersonMinAggregateInputType
    _max?: PersonMaxAggregateInputType
  }

  export type PersonGroupByOutputType = {
    pid: number
    userName: string
    emailAddress: string
    password: string
    firstName: string
    lastName: string
    _count: PersonCountAggregateOutputType | null
    _avg: PersonAvgAggregateOutputType | null
    _sum: PersonSumAggregateOutputType | null
    _min: PersonMinAggregateOutputType | null
    _max: PersonMaxAggregateOutputType | null
  }

  type GetPersonGroupByPayload<T extends PersonGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PersonGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PersonGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PersonGroupByOutputType[P]>
            : GetScalarType<T[P], PersonGroupByOutputType[P]>
        }
      >
    >


  export type PersonSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    pid?: boolean
    userName?: boolean
    emailAddress?: boolean
    password?: boolean
    firstName?: boolean
    lastName?: boolean
  }, ExtArgs["result"]["person"]>


  export type PersonSelectScalar = {
    pid?: boolean
    userName?: boolean
    emailAddress?: boolean
    password?: boolean
    firstName?: boolean
    lastName?: boolean
  }


  export type $PersonPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Person"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      pid: number
      userName: string
      emailAddress: string
      password: string
      firstName: string
      lastName: string
    }, ExtArgs["result"]["person"]>
    composites: {}
  }

  type PersonGetPayload<S extends boolean | null | undefined | PersonDefaultArgs> = $Result.GetResult<Prisma.$PersonPayload, S>

  type PersonCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PersonFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PersonCountAggregateInputType | true
    }

  export interface PersonDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Person'], meta: { name: 'Person' } }
    /**
     * Find zero or one Person that matches the filter.
     * @param {PersonFindUniqueArgs} args - Arguments to find a Person
     * @example
     * // Get one Person
     * const person = await prisma.person.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PersonFindUniqueArgs>(args: SelectSubset<T, PersonFindUniqueArgs<ExtArgs>>): Prisma__PersonClient<$Result.GetResult<Prisma.$PersonPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Person that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PersonFindUniqueOrThrowArgs} args - Arguments to find a Person
     * @example
     * // Get one Person
     * const person = await prisma.person.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PersonFindUniqueOrThrowArgs>(args: SelectSubset<T, PersonFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PersonClient<$Result.GetResult<Prisma.$PersonPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Person that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonFindFirstArgs} args - Arguments to find a Person
     * @example
     * // Get one Person
     * const person = await prisma.person.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PersonFindFirstArgs>(args?: SelectSubset<T, PersonFindFirstArgs<ExtArgs>>): Prisma__PersonClient<$Result.GetResult<Prisma.$PersonPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Person that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonFindFirstOrThrowArgs} args - Arguments to find a Person
     * @example
     * // Get one Person
     * const person = await prisma.person.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PersonFindFirstOrThrowArgs>(args?: SelectSubset<T, PersonFindFirstOrThrowArgs<ExtArgs>>): Prisma__PersonClient<$Result.GetResult<Prisma.$PersonPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more People that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all People
     * const people = await prisma.person.findMany()
     * 
     * // Get first 10 People
     * const people = await prisma.person.findMany({ take: 10 })
     * 
     * // Only select the `pid`
     * const personWithPidOnly = await prisma.person.findMany({ select: { pid: true } })
     * 
     */
    findMany<T extends PersonFindManyArgs>(args?: SelectSubset<T, PersonFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PersonPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Person.
     * @param {PersonCreateArgs} args - Arguments to create a Person.
     * @example
     * // Create one Person
     * const Person = await prisma.person.create({
     *   data: {
     *     // ... data to create a Person
     *   }
     * })
     * 
     */
    create<T extends PersonCreateArgs>(args: SelectSubset<T, PersonCreateArgs<ExtArgs>>): Prisma__PersonClient<$Result.GetResult<Prisma.$PersonPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many People.
     * @param {PersonCreateManyArgs} args - Arguments to create many People.
     * @example
     * // Create many People
     * const person = await prisma.person.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PersonCreateManyArgs>(args?: SelectSubset<T, PersonCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Person.
     * @param {PersonDeleteArgs} args - Arguments to delete one Person.
     * @example
     * // Delete one Person
     * const Person = await prisma.person.delete({
     *   where: {
     *     // ... filter to delete one Person
     *   }
     * })
     * 
     */
    delete<T extends PersonDeleteArgs>(args: SelectSubset<T, PersonDeleteArgs<ExtArgs>>): Prisma__PersonClient<$Result.GetResult<Prisma.$PersonPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Person.
     * @param {PersonUpdateArgs} args - Arguments to update one Person.
     * @example
     * // Update one Person
     * const person = await prisma.person.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PersonUpdateArgs>(args: SelectSubset<T, PersonUpdateArgs<ExtArgs>>): Prisma__PersonClient<$Result.GetResult<Prisma.$PersonPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more People.
     * @param {PersonDeleteManyArgs} args - Arguments to filter People to delete.
     * @example
     * // Delete a few People
     * const { count } = await prisma.person.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PersonDeleteManyArgs>(args?: SelectSubset<T, PersonDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more People.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many People
     * const person = await prisma.person.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PersonUpdateManyArgs>(args: SelectSubset<T, PersonUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Person.
     * @param {PersonUpsertArgs} args - Arguments to update or create a Person.
     * @example
     * // Update or create a Person
     * const person = await prisma.person.upsert({
     *   create: {
     *     // ... data to create a Person
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Person we want to update
     *   }
     * })
     */
    upsert<T extends PersonUpsertArgs>(args: SelectSubset<T, PersonUpsertArgs<ExtArgs>>): Prisma__PersonClient<$Result.GetResult<Prisma.$PersonPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of People.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonCountArgs} args - Arguments to filter People to count.
     * @example
     * // Count the number of People
     * const count = await prisma.person.count({
     *   where: {
     *     // ... the filter for the People we want to count
     *   }
     * })
    **/
    count<T extends PersonCountArgs>(
      args?: Subset<T, PersonCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PersonCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Person.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PersonAggregateArgs>(args: Subset<T, PersonAggregateArgs>): Prisma.PrismaPromise<GetPersonAggregateType<T>>

    /**
     * Group by Person.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PersonGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PersonGroupByArgs['orderBy'] }
        : { orderBy?: PersonGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PersonGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPersonGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Person model
   */
  readonly fields: PersonFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Person.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PersonClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Person model
   */ 
  interface PersonFieldRefs {
    readonly pid: FieldRef<"Person", 'Int'>
    readonly userName: FieldRef<"Person", 'String'>
    readonly emailAddress: FieldRef<"Person", 'String'>
    readonly password: FieldRef<"Person", 'String'>
    readonly firstName: FieldRef<"Person", 'String'>
    readonly lastName: FieldRef<"Person", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Person findUnique
   */
  export type PersonFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Person
     */
    select?: PersonSelect<ExtArgs> | null
    /**
     * Filter, which Person to fetch.
     */
    where: PersonWhereUniqueInput
  }

  /**
   * Person findUniqueOrThrow
   */
  export type PersonFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Person
     */
    select?: PersonSelect<ExtArgs> | null
    /**
     * Filter, which Person to fetch.
     */
    where: PersonWhereUniqueInput
  }

  /**
   * Person findFirst
   */
  export type PersonFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Person
     */
    select?: PersonSelect<ExtArgs> | null
    /**
     * Filter, which Person to fetch.
     */
    where?: PersonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of People to fetch.
     */
    orderBy?: PersonOrderByWithRelationInput | PersonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for People.
     */
    cursor?: PersonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` People from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` People.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of People.
     */
    distinct?: PersonScalarFieldEnum | PersonScalarFieldEnum[]
  }

  /**
   * Person findFirstOrThrow
   */
  export type PersonFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Person
     */
    select?: PersonSelect<ExtArgs> | null
    /**
     * Filter, which Person to fetch.
     */
    where?: PersonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of People to fetch.
     */
    orderBy?: PersonOrderByWithRelationInput | PersonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for People.
     */
    cursor?: PersonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` People from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` People.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of People.
     */
    distinct?: PersonScalarFieldEnum | PersonScalarFieldEnum[]
  }

  /**
   * Person findMany
   */
  export type PersonFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Person
     */
    select?: PersonSelect<ExtArgs> | null
    /**
     * Filter, which People to fetch.
     */
    where?: PersonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of People to fetch.
     */
    orderBy?: PersonOrderByWithRelationInput | PersonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing People.
     */
    cursor?: PersonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` People from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` People.
     */
    skip?: number
    distinct?: PersonScalarFieldEnum | PersonScalarFieldEnum[]
  }

  /**
   * Person create
   */
  export type PersonCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Person
     */
    select?: PersonSelect<ExtArgs> | null
    /**
     * The data needed to create a Person.
     */
    data: XOR<PersonCreateInput, PersonUncheckedCreateInput>
  }

  /**
   * Person createMany
   */
  export type PersonCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many People.
     */
    data: PersonCreateManyInput | PersonCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Person update
   */
  export type PersonUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Person
     */
    select?: PersonSelect<ExtArgs> | null
    /**
     * The data needed to update a Person.
     */
    data: XOR<PersonUpdateInput, PersonUncheckedUpdateInput>
    /**
     * Choose, which Person to update.
     */
    where: PersonWhereUniqueInput
  }

  /**
   * Person updateMany
   */
  export type PersonUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update People.
     */
    data: XOR<PersonUpdateManyMutationInput, PersonUncheckedUpdateManyInput>
    /**
     * Filter which People to update
     */
    where?: PersonWhereInput
  }

  /**
   * Person upsert
   */
  export type PersonUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Person
     */
    select?: PersonSelect<ExtArgs> | null
    /**
     * The filter to search for the Person to update in case it exists.
     */
    where: PersonWhereUniqueInput
    /**
     * In case the Person found by the `where` argument doesn't exist, create a new Person with this data.
     */
    create: XOR<PersonCreateInput, PersonUncheckedCreateInput>
    /**
     * In case the Person was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PersonUpdateInput, PersonUncheckedUpdateInput>
  }

  /**
   * Person delete
   */
  export type PersonDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Person
     */
    select?: PersonSelect<ExtArgs> | null
    /**
     * Filter which Person to delete.
     */
    where: PersonWhereUniqueInput
  }

  /**
   * Person deleteMany
   */
  export type PersonDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which People to delete
     */
    where?: PersonWhereInput
  }

  /**
   * Person without action
   */
  export type PersonDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Person
     */
    select?: PersonSelect<ExtArgs> | null
  }


  /**
   * Model Player
   */

  export type AggregatePlayer = {
    _count: PlayerCountAggregateOutputType | null
    _avg: PlayerAvgAggregateOutputType | null
    _sum: PlayerSumAggregateOutputType | null
    _min: PlayerMinAggregateOutputType | null
    _max: PlayerMaxAggregateOutputType | null
  }

  export type PlayerAvgAggregateOutputType = {
    id: number | null
    age: number | null
    height: number | null
    weight: number | null
    handSize: number | null
    armLength: number | null
    pickId: number | null
    combineScoreId: number | null
    prospectId: number | null
    yearEnteredLeague: number | null
  }

  export type PlayerSumAggregateOutputType = {
    id: number | null
    age: number | null
    height: number | null
    weight: number | null
    handSize: number | null
    armLength: number | null
    pickId: number | null
    combineScoreId: number | null
    prospectId: number | null
    yearEnteredLeague: number | null
  }

  export type PlayerMinAggregateOutputType = {
    id: number | null
    firstName: string | null
    lastName: string | null
    age: number | null
    height: number | null
    weight: number | null
    handSize: number | null
    armLength: number | null
    homeCity: string | null
    homeState: string | null
    university: string | null
    status: string | null
    position: string | null
    pickId: number | null
    combineScoreId: number | null
    prospectId: number | null
    yearEnteredLeague: number | null
  }

  export type PlayerMaxAggregateOutputType = {
    id: number | null
    firstName: string | null
    lastName: string | null
    age: number | null
    height: number | null
    weight: number | null
    handSize: number | null
    armLength: number | null
    homeCity: string | null
    homeState: string | null
    university: string | null
    status: string | null
    position: string | null
    pickId: number | null
    combineScoreId: number | null
    prospectId: number | null
    yearEnteredLeague: number | null
  }

  export type PlayerCountAggregateOutputType = {
    id: number
    firstName: number
    lastName: number
    age: number
    height: number
    weight: number
    handSize: number
    armLength: number
    homeCity: number
    homeState: number
    university: number
    status: number
    position: number
    pickId: number
    combineScoreId: number
    prospectId: number
    yearEnteredLeague: number
    _all: number
  }


  export type PlayerAvgAggregateInputType = {
    id?: true
    age?: true
    height?: true
    weight?: true
    handSize?: true
    armLength?: true
    pickId?: true
    combineScoreId?: true
    prospectId?: true
    yearEnteredLeague?: true
  }

  export type PlayerSumAggregateInputType = {
    id?: true
    age?: true
    height?: true
    weight?: true
    handSize?: true
    armLength?: true
    pickId?: true
    combineScoreId?: true
    prospectId?: true
    yearEnteredLeague?: true
  }

  export type PlayerMinAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    age?: true
    height?: true
    weight?: true
    handSize?: true
    armLength?: true
    homeCity?: true
    homeState?: true
    university?: true
    status?: true
    position?: true
    pickId?: true
    combineScoreId?: true
    prospectId?: true
    yearEnteredLeague?: true
  }

  export type PlayerMaxAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    age?: true
    height?: true
    weight?: true
    handSize?: true
    armLength?: true
    homeCity?: true
    homeState?: true
    university?: true
    status?: true
    position?: true
    pickId?: true
    combineScoreId?: true
    prospectId?: true
    yearEnteredLeague?: true
  }

  export type PlayerCountAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    age?: true
    height?: true
    weight?: true
    handSize?: true
    armLength?: true
    homeCity?: true
    homeState?: true
    university?: true
    status?: true
    position?: true
    pickId?: true
    combineScoreId?: true
    prospectId?: true
    yearEnteredLeague?: true
    _all?: true
  }

  export type PlayerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Player to aggregate.
     */
    where?: PlayerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Players to fetch.
     */
    orderBy?: PlayerOrderByWithRelationInput | PlayerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PlayerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Players from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Players.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Players
    **/
    _count?: true | PlayerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PlayerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PlayerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PlayerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PlayerMaxAggregateInputType
  }

  export type GetPlayerAggregateType<T extends PlayerAggregateArgs> = {
        [P in keyof T & keyof AggregatePlayer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlayer[P]>
      : GetScalarType<T[P], AggregatePlayer[P]>
  }




  export type PlayerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlayerWhereInput
    orderBy?: PlayerOrderByWithAggregationInput | PlayerOrderByWithAggregationInput[]
    by: PlayerScalarFieldEnum[] | PlayerScalarFieldEnum
    having?: PlayerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PlayerCountAggregateInputType | true
    _avg?: PlayerAvgAggregateInputType
    _sum?: PlayerSumAggregateInputType
    _min?: PlayerMinAggregateInputType
    _max?: PlayerMaxAggregateInputType
  }

  export type PlayerGroupByOutputType = {
    id: number
    firstName: string
    lastName: string
    age: number
    height: number | null
    weight: number | null
    handSize: number | null
    armLength: number | null
    homeCity: string | null
    homeState: string | null
    university: string | null
    status: string | null
    position: string | null
    pickId: number | null
    combineScoreId: number | null
    prospectId: number | null
    yearEnteredLeague: number | null
    _count: PlayerCountAggregateOutputType | null
    _avg: PlayerAvgAggregateOutputType | null
    _sum: PlayerSumAggregateOutputType | null
    _min: PlayerMinAggregateOutputType | null
    _max: PlayerMaxAggregateOutputType | null
  }

  type GetPlayerGroupByPayload<T extends PlayerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PlayerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PlayerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PlayerGroupByOutputType[P]>
            : GetScalarType<T[P], PlayerGroupByOutputType[P]>
        }
      >
    >


  export type PlayerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    age?: boolean
    height?: boolean
    weight?: boolean
    handSize?: boolean
    armLength?: boolean
    homeCity?: boolean
    homeState?: boolean
    university?: boolean
    status?: boolean
    position?: boolean
    pickId?: boolean
    combineScoreId?: boolean
    prospectId?: boolean
    yearEnteredLeague?: boolean
    CombineScore?: boolean | Player$CombineScoreArgs<ExtArgs>
    DraftPick?: boolean | Player$DraftPickArgs<ExtArgs>
    Prospect?: boolean | Player$ProspectArgs<ExtArgs>
    PlayerAward?: boolean | Player$PlayerAwardArgs<ExtArgs>
    PlayerTeam?: boolean | Player$PlayerTeamArgs<ExtArgs>
    _count?: boolean | PlayerCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["player"]>


  export type PlayerSelectScalar = {
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    age?: boolean
    height?: boolean
    weight?: boolean
    handSize?: boolean
    armLength?: boolean
    homeCity?: boolean
    homeState?: boolean
    university?: boolean
    status?: boolean
    position?: boolean
    pickId?: boolean
    combineScoreId?: boolean
    prospectId?: boolean
    yearEnteredLeague?: boolean
  }

  export type PlayerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    CombineScore?: boolean | Player$CombineScoreArgs<ExtArgs>
    DraftPick?: boolean | Player$DraftPickArgs<ExtArgs>
    Prospect?: boolean | Player$ProspectArgs<ExtArgs>
    PlayerAward?: boolean | Player$PlayerAwardArgs<ExtArgs>
    PlayerTeam?: boolean | Player$PlayerTeamArgs<ExtArgs>
    _count?: boolean | PlayerCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $PlayerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Player"
    objects: {
      CombineScore: Prisma.$CombineScorePayload<ExtArgs>[]
      DraftPick: Prisma.$DraftPickPayload<ExtArgs>[]
      Prospect: Prisma.$ProspectPayload<ExtArgs> | null
      PlayerAward: Prisma.$PlayerAwardPayload<ExtArgs>[]
      PlayerTeam: Prisma.$PlayerTeamPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      firstName: string
      lastName: string
      age: number
      height: number | null
      weight: number | null
      handSize: number | null
      armLength: number | null
      homeCity: string | null
      homeState: string | null
      university: string | null
      status: string | null
      position: string | null
      pickId: number | null
      combineScoreId: number | null
      prospectId: number | null
      yearEnteredLeague: number | null
    }, ExtArgs["result"]["player"]>
    composites: {}
  }

  type PlayerGetPayload<S extends boolean | null | undefined | PlayerDefaultArgs> = $Result.GetResult<Prisma.$PlayerPayload, S>

  type PlayerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PlayerFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PlayerCountAggregateInputType | true
    }

  export interface PlayerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Player'], meta: { name: 'Player' } }
    /**
     * Find zero or one Player that matches the filter.
     * @param {PlayerFindUniqueArgs} args - Arguments to find a Player
     * @example
     * // Get one Player
     * const player = await prisma.player.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PlayerFindUniqueArgs>(args: SelectSubset<T, PlayerFindUniqueArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Player that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PlayerFindUniqueOrThrowArgs} args - Arguments to find a Player
     * @example
     * // Get one Player
     * const player = await prisma.player.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PlayerFindUniqueOrThrowArgs>(args: SelectSubset<T, PlayerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Player that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerFindFirstArgs} args - Arguments to find a Player
     * @example
     * // Get one Player
     * const player = await prisma.player.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PlayerFindFirstArgs>(args?: SelectSubset<T, PlayerFindFirstArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Player that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerFindFirstOrThrowArgs} args - Arguments to find a Player
     * @example
     * // Get one Player
     * const player = await prisma.player.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PlayerFindFirstOrThrowArgs>(args?: SelectSubset<T, PlayerFindFirstOrThrowArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Players that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Players
     * const players = await prisma.player.findMany()
     * 
     * // Get first 10 Players
     * const players = await prisma.player.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const playerWithIdOnly = await prisma.player.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PlayerFindManyArgs>(args?: SelectSubset<T, PlayerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Player.
     * @param {PlayerCreateArgs} args - Arguments to create a Player.
     * @example
     * // Create one Player
     * const Player = await prisma.player.create({
     *   data: {
     *     // ... data to create a Player
     *   }
     * })
     * 
     */
    create<T extends PlayerCreateArgs>(args: SelectSubset<T, PlayerCreateArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Players.
     * @param {PlayerCreateManyArgs} args - Arguments to create many Players.
     * @example
     * // Create many Players
     * const player = await prisma.player.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PlayerCreateManyArgs>(args?: SelectSubset<T, PlayerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Player.
     * @param {PlayerDeleteArgs} args - Arguments to delete one Player.
     * @example
     * // Delete one Player
     * const Player = await prisma.player.delete({
     *   where: {
     *     // ... filter to delete one Player
     *   }
     * })
     * 
     */
    delete<T extends PlayerDeleteArgs>(args: SelectSubset<T, PlayerDeleteArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Player.
     * @param {PlayerUpdateArgs} args - Arguments to update one Player.
     * @example
     * // Update one Player
     * const player = await prisma.player.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PlayerUpdateArgs>(args: SelectSubset<T, PlayerUpdateArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Players.
     * @param {PlayerDeleteManyArgs} args - Arguments to filter Players to delete.
     * @example
     * // Delete a few Players
     * const { count } = await prisma.player.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PlayerDeleteManyArgs>(args?: SelectSubset<T, PlayerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Players.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Players
     * const player = await prisma.player.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PlayerUpdateManyArgs>(args: SelectSubset<T, PlayerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Player.
     * @param {PlayerUpsertArgs} args - Arguments to update or create a Player.
     * @example
     * // Update or create a Player
     * const player = await prisma.player.upsert({
     *   create: {
     *     // ... data to create a Player
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Player we want to update
     *   }
     * })
     */
    upsert<T extends PlayerUpsertArgs>(args: SelectSubset<T, PlayerUpsertArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Players.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerCountArgs} args - Arguments to filter Players to count.
     * @example
     * // Count the number of Players
     * const count = await prisma.player.count({
     *   where: {
     *     // ... the filter for the Players we want to count
     *   }
     * })
    **/
    count<T extends PlayerCountArgs>(
      args?: Subset<T, PlayerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PlayerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Player.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PlayerAggregateArgs>(args: Subset<T, PlayerAggregateArgs>): Prisma.PrismaPromise<GetPlayerAggregateType<T>>

    /**
     * Group by Player.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PlayerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PlayerGroupByArgs['orderBy'] }
        : { orderBy?: PlayerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PlayerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlayerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Player model
   */
  readonly fields: PlayerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Player.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PlayerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    CombineScore<T extends Player$CombineScoreArgs<ExtArgs> = {}>(args?: Subset<T, Player$CombineScoreArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CombineScorePayload<ExtArgs>, T, "findMany"> | Null>
    DraftPick<T extends Player$DraftPickArgs<ExtArgs> = {}>(args?: Subset<T, Player$DraftPickArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DraftPickPayload<ExtArgs>, T, "findMany"> | Null>
    Prospect<T extends Player$ProspectArgs<ExtArgs> = {}>(args?: Subset<T, Player$ProspectArgs<ExtArgs>>): Prisma__ProspectClient<$Result.GetResult<Prisma.$ProspectPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    PlayerAward<T extends Player$PlayerAwardArgs<ExtArgs> = {}>(args?: Subset<T, Player$PlayerAwardArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlayerAwardPayload<ExtArgs>, T, "findMany"> | Null>
    PlayerTeam<T extends Player$PlayerTeamArgs<ExtArgs> = {}>(args?: Subset<T, Player$PlayerTeamArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlayerTeamPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Player model
   */ 
  interface PlayerFieldRefs {
    readonly id: FieldRef<"Player", 'Int'>
    readonly firstName: FieldRef<"Player", 'String'>
    readonly lastName: FieldRef<"Player", 'String'>
    readonly age: FieldRef<"Player", 'Int'>
    readonly height: FieldRef<"Player", 'Float'>
    readonly weight: FieldRef<"Player", 'Float'>
    readonly handSize: FieldRef<"Player", 'Float'>
    readonly armLength: FieldRef<"Player", 'Float'>
    readonly homeCity: FieldRef<"Player", 'String'>
    readonly homeState: FieldRef<"Player", 'String'>
    readonly university: FieldRef<"Player", 'String'>
    readonly status: FieldRef<"Player", 'String'>
    readonly position: FieldRef<"Player", 'String'>
    readonly pickId: FieldRef<"Player", 'Int'>
    readonly combineScoreId: FieldRef<"Player", 'Int'>
    readonly prospectId: FieldRef<"Player", 'Int'>
    readonly yearEnteredLeague: FieldRef<"Player", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Player findUnique
   */
  export type PlayerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * Filter, which Player to fetch.
     */
    where: PlayerWhereUniqueInput
  }

  /**
   * Player findUniqueOrThrow
   */
  export type PlayerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * Filter, which Player to fetch.
     */
    where: PlayerWhereUniqueInput
  }

  /**
   * Player findFirst
   */
  export type PlayerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * Filter, which Player to fetch.
     */
    where?: PlayerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Players to fetch.
     */
    orderBy?: PlayerOrderByWithRelationInput | PlayerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Players.
     */
    cursor?: PlayerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Players from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Players.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Players.
     */
    distinct?: PlayerScalarFieldEnum | PlayerScalarFieldEnum[]
  }

  /**
   * Player findFirstOrThrow
   */
  export type PlayerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * Filter, which Player to fetch.
     */
    where?: PlayerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Players to fetch.
     */
    orderBy?: PlayerOrderByWithRelationInput | PlayerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Players.
     */
    cursor?: PlayerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Players from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Players.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Players.
     */
    distinct?: PlayerScalarFieldEnum | PlayerScalarFieldEnum[]
  }

  /**
   * Player findMany
   */
  export type PlayerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * Filter, which Players to fetch.
     */
    where?: PlayerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Players to fetch.
     */
    orderBy?: PlayerOrderByWithRelationInput | PlayerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Players.
     */
    cursor?: PlayerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Players from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Players.
     */
    skip?: number
    distinct?: PlayerScalarFieldEnum | PlayerScalarFieldEnum[]
  }

  /**
   * Player create
   */
  export type PlayerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * The data needed to create a Player.
     */
    data: XOR<PlayerCreateInput, PlayerUncheckedCreateInput>
  }

  /**
   * Player createMany
   */
  export type PlayerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Players.
     */
    data: PlayerCreateManyInput | PlayerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Player update
   */
  export type PlayerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * The data needed to update a Player.
     */
    data: XOR<PlayerUpdateInput, PlayerUncheckedUpdateInput>
    /**
     * Choose, which Player to update.
     */
    where: PlayerWhereUniqueInput
  }

  /**
   * Player updateMany
   */
  export type PlayerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Players.
     */
    data: XOR<PlayerUpdateManyMutationInput, PlayerUncheckedUpdateManyInput>
    /**
     * Filter which Players to update
     */
    where?: PlayerWhereInput
  }

  /**
   * Player upsert
   */
  export type PlayerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * The filter to search for the Player to update in case it exists.
     */
    where: PlayerWhereUniqueInput
    /**
     * In case the Player found by the `where` argument doesn't exist, create a new Player with this data.
     */
    create: XOR<PlayerCreateInput, PlayerUncheckedCreateInput>
    /**
     * In case the Player was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PlayerUpdateInput, PlayerUncheckedUpdateInput>
  }

  /**
   * Player delete
   */
  export type PlayerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * Filter which Player to delete.
     */
    where: PlayerWhereUniqueInput
  }

  /**
   * Player deleteMany
   */
  export type PlayerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Players to delete
     */
    where?: PlayerWhereInput
  }

  /**
   * Player.CombineScore
   */
  export type Player$CombineScoreArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CombineScore
     */
    select?: CombineScoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CombineScoreInclude<ExtArgs> | null
    where?: CombineScoreWhereInput
    orderBy?: CombineScoreOrderByWithRelationInput | CombineScoreOrderByWithRelationInput[]
    cursor?: CombineScoreWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CombineScoreScalarFieldEnum | CombineScoreScalarFieldEnum[]
  }

  /**
   * Player.DraftPick
   */
  export type Player$DraftPickArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DraftPick
     */
    select?: DraftPickSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DraftPickInclude<ExtArgs> | null
    where?: DraftPickWhereInput
    orderBy?: DraftPickOrderByWithRelationInput | DraftPickOrderByWithRelationInput[]
    cursor?: DraftPickWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DraftPickScalarFieldEnum | DraftPickScalarFieldEnum[]
  }

  /**
   * Player.Prospect
   */
  export type Player$ProspectArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prospect
     */
    select?: ProspectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProspectInclude<ExtArgs> | null
    where?: ProspectWhereInput
  }

  /**
   * Player.PlayerAward
   */
  export type Player$PlayerAwardArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerAward
     */
    select?: PlayerAwardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerAwardInclude<ExtArgs> | null
    where?: PlayerAwardWhereInput
    orderBy?: PlayerAwardOrderByWithRelationInput | PlayerAwardOrderByWithRelationInput[]
    cursor?: PlayerAwardWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PlayerAwardScalarFieldEnum | PlayerAwardScalarFieldEnum[]
  }

  /**
   * Player.PlayerTeam
   */
  export type Player$PlayerTeamArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerTeam
     */
    select?: PlayerTeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerTeamInclude<ExtArgs> | null
    where?: PlayerTeamWhereInput
    orderBy?: PlayerTeamOrderByWithRelationInput | PlayerTeamOrderByWithRelationInput[]
    cursor?: PlayerTeamWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PlayerTeamScalarFieldEnum | PlayerTeamScalarFieldEnum[]
  }

  /**
   * Player without action
   */
  export type PlayerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
  }


  /**
   * Model PlayerAward
   */

  export type AggregatePlayerAward = {
    _count: PlayerAwardCountAggregateOutputType | null
    _avg: PlayerAwardAvgAggregateOutputType | null
    _sum: PlayerAwardSumAggregateOutputType | null
    _min: PlayerAwardMinAggregateOutputType | null
    _max: PlayerAwardMaxAggregateOutputType | null
  }

  export type PlayerAwardAvgAggregateOutputType = {
    id: number | null
    playerId: number | null
    yearAwarded: number | null
  }

  export type PlayerAwardSumAggregateOutputType = {
    id: number | null
    playerId: number | null
    yearAwarded: number | null
  }

  export type PlayerAwardMinAggregateOutputType = {
    id: number | null
    playerId: number | null
    awardName: string | null
    yearAwarded: number | null
  }

  export type PlayerAwardMaxAggregateOutputType = {
    id: number | null
    playerId: number | null
    awardName: string | null
    yearAwarded: number | null
  }

  export type PlayerAwardCountAggregateOutputType = {
    id: number
    playerId: number
    awardName: number
    yearAwarded: number
    _all: number
  }


  export type PlayerAwardAvgAggregateInputType = {
    id?: true
    playerId?: true
    yearAwarded?: true
  }

  export type PlayerAwardSumAggregateInputType = {
    id?: true
    playerId?: true
    yearAwarded?: true
  }

  export type PlayerAwardMinAggregateInputType = {
    id?: true
    playerId?: true
    awardName?: true
    yearAwarded?: true
  }

  export type PlayerAwardMaxAggregateInputType = {
    id?: true
    playerId?: true
    awardName?: true
    yearAwarded?: true
  }

  export type PlayerAwardCountAggregateInputType = {
    id?: true
    playerId?: true
    awardName?: true
    yearAwarded?: true
    _all?: true
  }

  export type PlayerAwardAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PlayerAward to aggregate.
     */
    where?: PlayerAwardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlayerAwards to fetch.
     */
    orderBy?: PlayerAwardOrderByWithRelationInput | PlayerAwardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PlayerAwardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlayerAwards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlayerAwards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PlayerAwards
    **/
    _count?: true | PlayerAwardCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PlayerAwardAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PlayerAwardSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PlayerAwardMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PlayerAwardMaxAggregateInputType
  }

  export type GetPlayerAwardAggregateType<T extends PlayerAwardAggregateArgs> = {
        [P in keyof T & keyof AggregatePlayerAward]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlayerAward[P]>
      : GetScalarType<T[P], AggregatePlayerAward[P]>
  }




  export type PlayerAwardGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlayerAwardWhereInput
    orderBy?: PlayerAwardOrderByWithAggregationInput | PlayerAwardOrderByWithAggregationInput[]
    by: PlayerAwardScalarFieldEnum[] | PlayerAwardScalarFieldEnum
    having?: PlayerAwardScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PlayerAwardCountAggregateInputType | true
    _avg?: PlayerAwardAvgAggregateInputType
    _sum?: PlayerAwardSumAggregateInputType
    _min?: PlayerAwardMinAggregateInputType
    _max?: PlayerAwardMaxAggregateInputType
  }

  export type PlayerAwardGroupByOutputType = {
    id: number
    playerId: number
    awardName: string | null
    yearAwarded: number | null
    _count: PlayerAwardCountAggregateOutputType | null
    _avg: PlayerAwardAvgAggregateOutputType | null
    _sum: PlayerAwardSumAggregateOutputType | null
    _min: PlayerAwardMinAggregateOutputType | null
    _max: PlayerAwardMaxAggregateOutputType | null
  }

  type GetPlayerAwardGroupByPayload<T extends PlayerAwardGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PlayerAwardGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PlayerAwardGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PlayerAwardGroupByOutputType[P]>
            : GetScalarType<T[P], PlayerAwardGroupByOutputType[P]>
        }
      >
    >


  export type PlayerAwardSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    playerId?: boolean
    awardName?: boolean
    yearAwarded?: boolean
    Player?: boolean | PlayerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["playerAward"]>


  export type PlayerAwardSelectScalar = {
    id?: boolean
    playerId?: boolean
    awardName?: boolean
    yearAwarded?: boolean
  }

  export type PlayerAwardInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Player?: boolean | PlayerDefaultArgs<ExtArgs>
  }

  export type $PlayerAwardPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PlayerAward"
    objects: {
      Player: Prisma.$PlayerPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      playerId: number
      awardName: string | null
      yearAwarded: number | null
    }, ExtArgs["result"]["playerAward"]>
    composites: {}
  }

  type PlayerAwardGetPayload<S extends boolean | null | undefined | PlayerAwardDefaultArgs> = $Result.GetResult<Prisma.$PlayerAwardPayload, S>

  type PlayerAwardCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PlayerAwardFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PlayerAwardCountAggregateInputType | true
    }

  export interface PlayerAwardDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PlayerAward'], meta: { name: 'PlayerAward' } }
    /**
     * Find zero or one PlayerAward that matches the filter.
     * @param {PlayerAwardFindUniqueArgs} args - Arguments to find a PlayerAward
     * @example
     * // Get one PlayerAward
     * const playerAward = await prisma.playerAward.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PlayerAwardFindUniqueArgs>(args: SelectSubset<T, PlayerAwardFindUniqueArgs<ExtArgs>>): Prisma__PlayerAwardClient<$Result.GetResult<Prisma.$PlayerAwardPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one PlayerAward that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PlayerAwardFindUniqueOrThrowArgs} args - Arguments to find a PlayerAward
     * @example
     * // Get one PlayerAward
     * const playerAward = await prisma.playerAward.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PlayerAwardFindUniqueOrThrowArgs>(args: SelectSubset<T, PlayerAwardFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PlayerAwardClient<$Result.GetResult<Prisma.$PlayerAwardPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first PlayerAward that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerAwardFindFirstArgs} args - Arguments to find a PlayerAward
     * @example
     * // Get one PlayerAward
     * const playerAward = await prisma.playerAward.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PlayerAwardFindFirstArgs>(args?: SelectSubset<T, PlayerAwardFindFirstArgs<ExtArgs>>): Prisma__PlayerAwardClient<$Result.GetResult<Prisma.$PlayerAwardPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first PlayerAward that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerAwardFindFirstOrThrowArgs} args - Arguments to find a PlayerAward
     * @example
     * // Get one PlayerAward
     * const playerAward = await prisma.playerAward.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PlayerAwardFindFirstOrThrowArgs>(args?: SelectSubset<T, PlayerAwardFindFirstOrThrowArgs<ExtArgs>>): Prisma__PlayerAwardClient<$Result.GetResult<Prisma.$PlayerAwardPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more PlayerAwards that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerAwardFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PlayerAwards
     * const playerAwards = await prisma.playerAward.findMany()
     * 
     * // Get first 10 PlayerAwards
     * const playerAwards = await prisma.playerAward.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const playerAwardWithIdOnly = await prisma.playerAward.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PlayerAwardFindManyArgs>(args?: SelectSubset<T, PlayerAwardFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlayerAwardPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a PlayerAward.
     * @param {PlayerAwardCreateArgs} args - Arguments to create a PlayerAward.
     * @example
     * // Create one PlayerAward
     * const PlayerAward = await prisma.playerAward.create({
     *   data: {
     *     // ... data to create a PlayerAward
     *   }
     * })
     * 
     */
    create<T extends PlayerAwardCreateArgs>(args: SelectSubset<T, PlayerAwardCreateArgs<ExtArgs>>): Prisma__PlayerAwardClient<$Result.GetResult<Prisma.$PlayerAwardPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many PlayerAwards.
     * @param {PlayerAwardCreateManyArgs} args - Arguments to create many PlayerAwards.
     * @example
     * // Create many PlayerAwards
     * const playerAward = await prisma.playerAward.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PlayerAwardCreateManyArgs>(args?: SelectSubset<T, PlayerAwardCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a PlayerAward.
     * @param {PlayerAwardDeleteArgs} args - Arguments to delete one PlayerAward.
     * @example
     * // Delete one PlayerAward
     * const PlayerAward = await prisma.playerAward.delete({
     *   where: {
     *     // ... filter to delete one PlayerAward
     *   }
     * })
     * 
     */
    delete<T extends PlayerAwardDeleteArgs>(args: SelectSubset<T, PlayerAwardDeleteArgs<ExtArgs>>): Prisma__PlayerAwardClient<$Result.GetResult<Prisma.$PlayerAwardPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one PlayerAward.
     * @param {PlayerAwardUpdateArgs} args - Arguments to update one PlayerAward.
     * @example
     * // Update one PlayerAward
     * const playerAward = await prisma.playerAward.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PlayerAwardUpdateArgs>(args: SelectSubset<T, PlayerAwardUpdateArgs<ExtArgs>>): Prisma__PlayerAwardClient<$Result.GetResult<Prisma.$PlayerAwardPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more PlayerAwards.
     * @param {PlayerAwardDeleteManyArgs} args - Arguments to filter PlayerAwards to delete.
     * @example
     * // Delete a few PlayerAwards
     * const { count } = await prisma.playerAward.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PlayerAwardDeleteManyArgs>(args?: SelectSubset<T, PlayerAwardDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PlayerAwards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerAwardUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PlayerAwards
     * const playerAward = await prisma.playerAward.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PlayerAwardUpdateManyArgs>(args: SelectSubset<T, PlayerAwardUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PlayerAward.
     * @param {PlayerAwardUpsertArgs} args - Arguments to update or create a PlayerAward.
     * @example
     * // Update or create a PlayerAward
     * const playerAward = await prisma.playerAward.upsert({
     *   create: {
     *     // ... data to create a PlayerAward
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PlayerAward we want to update
     *   }
     * })
     */
    upsert<T extends PlayerAwardUpsertArgs>(args: SelectSubset<T, PlayerAwardUpsertArgs<ExtArgs>>): Prisma__PlayerAwardClient<$Result.GetResult<Prisma.$PlayerAwardPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of PlayerAwards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerAwardCountArgs} args - Arguments to filter PlayerAwards to count.
     * @example
     * // Count the number of PlayerAwards
     * const count = await prisma.playerAward.count({
     *   where: {
     *     // ... the filter for the PlayerAwards we want to count
     *   }
     * })
    **/
    count<T extends PlayerAwardCountArgs>(
      args?: Subset<T, PlayerAwardCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PlayerAwardCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PlayerAward.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerAwardAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PlayerAwardAggregateArgs>(args: Subset<T, PlayerAwardAggregateArgs>): Prisma.PrismaPromise<GetPlayerAwardAggregateType<T>>

    /**
     * Group by PlayerAward.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerAwardGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PlayerAwardGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PlayerAwardGroupByArgs['orderBy'] }
        : { orderBy?: PlayerAwardGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PlayerAwardGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlayerAwardGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PlayerAward model
   */
  readonly fields: PlayerAwardFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PlayerAward.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PlayerAwardClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Player<T extends PlayerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PlayerDefaultArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PlayerAward model
   */ 
  interface PlayerAwardFieldRefs {
    readonly id: FieldRef<"PlayerAward", 'Int'>
    readonly playerId: FieldRef<"PlayerAward", 'Int'>
    readonly awardName: FieldRef<"PlayerAward", 'String'>
    readonly yearAwarded: FieldRef<"PlayerAward", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * PlayerAward findUnique
   */
  export type PlayerAwardFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerAward
     */
    select?: PlayerAwardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerAwardInclude<ExtArgs> | null
    /**
     * Filter, which PlayerAward to fetch.
     */
    where: PlayerAwardWhereUniqueInput
  }

  /**
   * PlayerAward findUniqueOrThrow
   */
  export type PlayerAwardFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerAward
     */
    select?: PlayerAwardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerAwardInclude<ExtArgs> | null
    /**
     * Filter, which PlayerAward to fetch.
     */
    where: PlayerAwardWhereUniqueInput
  }

  /**
   * PlayerAward findFirst
   */
  export type PlayerAwardFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerAward
     */
    select?: PlayerAwardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerAwardInclude<ExtArgs> | null
    /**
     * Filter, which PlayerAward to fetch.
     */
    where?: PlayerAwardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlayerAwards to fetch.
     */
    orderBy?: PlayerAwardOrderByWithRelationInput | PlayerAwardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PlayerAwards.
     */
    cursor?: PlayerAwardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlayerAwards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlayerAwards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PlayerAwards.
     */
    distinct?: PlayerAwardScalarFieldEnum | PlayerAwardScalarFieldEnum[]
  }

  /**
   * PlayerAward findFirstOrThrow
   */
  export type PlayerAwardFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerAward
     */
    select?: PlayerAwardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerAwardInclude<ExtArgs> | null
    /**
     * Filter, which PlayerAward to fetch.
     */
    where?: PlayerAwardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlayerAwards to fetch.
     */
    orderBy?: PlayerAwardOrderByWithRelationInput | PlayerAwardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PlayerAwards.
     */
    cursor?: PlayerAwardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlayerAwards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlayerAwards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PlayerAwards.
     */
    distinct?: PlayerAwardScalarFieldEnum | PlayerAwardScalarFieldEnum[]
  }

  /**
   * PlayerAward findMany
   */
  export type PlayerAwardFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerAward
     */
    select?: PlayerAwardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerAwardInclude<ExtArgs> | null
    /**
     * Filter, which PlayerAwards to fetch.
     */
    where?: PlayerAwardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlayerAwards to fetch.
     */
    orderBy?: PlayerAwardOrderByWithRelationInput | PlayerAwardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PlayerAwards.
     */
    cursor?: PlayerAwardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlayerAwards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlayerAwards.
     */
    skip?: number
    distinct?: PlayerAwardScalarFieldEnum | PlayerAwardScalarFieldEnum[]
  }

  /**
   * PlayerAward create
   */
  export type PlayerAwardCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerAward
     */
    select?: PlayerAwardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerAwardInclude<ExtArgs> | null
    /**
     * The data needed to create a PlayerAward.
     */
    data: XOR<PlayerAwardCreateInput, PlayerAwardUncheckedCreateInput>
  }

  /**
   * PlayerAward createMany
   */
  export type PlayerAwardCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PlayerAwards.
     */
    data: PlayerAwardCreateManyInput | PlayerAwardCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PlayerAward update
   */
  export type PlayerAwardUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerAward
     */
    select?: PlayerAwardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerAwardInclude<ExtArgs> | null
    /**
     * The data needed to update a PlayerAward.
     */
    data: XOR<PlayerAwardUpdateInput, PlayerAwardUncheckedUpdateInput>
    /**
     * Choose, which PlayerAward to update.
     */
    where: PlayerAwardWhereUniqueInput
  }

  /**
   * PlayerAward updateMany
   */
  export type PlayerAwardUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PlayerAwards.
     */
    data: XOR<PlayerAwardUpdateManyMutationInput, PlayerAwardUncheckedUpdateManyInput>
    /**
     * Filter which PlayerAwards to update
     */
    where?: PlayerAwardWhereInput
  }

  /**
   * PlayerAward upsert
   */
  export type PlayerAwardUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerAward
     */
    select?: PlayerAwardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerAwardInclude<ExtArgs> | null
    /**
     * The filter to search for the PlayerAward to update in case it exists.
     */
    where: PlayerAwardWhereUniqueInput
    /**
     * In case the PlayerAward found by the `where` argument doesn't exist, create a new PlayerAward with this data.
     */
    create: XOR<PlayerAwardCreateInput, PlayerAwardUncheckedCreateInput>
    /**
     * In case the PlayerAward was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PlayerAwardUpdateInput, PlayerAwardUncheckedUpdateInput>
  }

  /**
   * PlayerAward delete
   */
  export type PlayerAwardDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerAward
     */
    select?: PlayerAwardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerAwardInclude<ExtArgs> | null
    /**
     * Filter which PlayerAward to delete.
     */
    where: PlayerAwardWhereUniqueInput
  }

  /**
   * PlayerAward deleteMany
   */
  export type PlayerAwardDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PlayerAwards to delete
     */
    where?: PlayerAwardWhereInput
  }

  /**
   * PlayerAward without action
   */
  export type PlayerAwardDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerAward
     */
    select?: PlayerAwardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerAwardInclude<ExtArgs> | null
  }


  /**
   * Model PlayerTeam
   */

  export type AggregatePlayerTeam = {
    _count: PlayerTeamCountAggregateOutputType | null
    _avg: PlayerTeamAvgAggregateOutputType | null
    _sum: PlayerTeamSumAggregateOutputType | null
    _min: PlayerTeamMinAggregateOutputType | null
    _max: PlayerTeamMaxAggregateOutputType | null
  }

  export type PlayerTeamAvgAggregateOutputType = {
    id: number | null
    playerId: number | null
    teamId: number | null
    jerseyNumber: number | null
    contractValue: number | null
    contractLength: number | null
  }

  export type PlayerTeamSumAggregateOutputType = {
    id: number | null
    playerId: number | null
    teamId: number | null
    jerseyNumber: number | null
    contractValue: number | null
    contractLength: number | null
  }

  export type PlayerTeamMinAggregateOutputType = {
    id: number | null
    playerId: number | null
    teamId: number | null
    currentTeam: boolean | null
    startDate: Date | null
    endDate: Date | null
    jerseyNumber: number | null
    contractValue: number | null
    contractLength: number | null
  }

  export type PlayerTeamMaxAggregateOutputType = {
    id: number | null
    playerId: number | null
    teamId: number | null
    currentTeam: boolean | null
    startDate: Date | null
    endDate: Date | null
    jerseyNumber: number | null
    contractValue: number | null
    contractLength: number | null
  }

  export type PlayerTeamCountAggregateOutputType = {
    id: number
    playerId: number
    teamId: number
    currentTeam: number
    startDate: number
    endDate: number
    jerseyNumber: number
    contractValue: number
    contractLength: number
    _all: number
  }


  export type PlayerTeamAvgAggregateInputType = {
    id?: true
    playerId?: true
    teamId?: true
    jerseyNumber?: true
    contractValue?: true
    contractLength?: true
  }

  export type PlayerTeamSumAggregateInputType = {
    id?: true
    playerId?: true
    teamId?: true
    jerseyNumber?: true
    contractValue?: true
    contractLength?: true
  }

  export type PlayerTeamMinAggregateInputType = {
    id?: true
    playerId?: true
    teamId?: true
    currentTeam?: true
    startDate?: true
    endDate?: true
    jerseyNumber?: true
    contractValue?: true
    contractLength?: true
  }

  export type PlayerTeamMaxAggregateInputType = {
    id?: true
    playerId?: true
    teamId?: true
    currentTeam?: true
    startDate?: true
    endDate?: true
    jerseyNumber?: true
    contractValue?: true
    contractLength?: true
  }

  export type PlayerTeamCountAggregateInputType = {
    id?: true
    playerId?: true
    teamId?: true
    currentTeam?: true
    startDate?: true
    endDate?: true
    jerseyNumber?: true
    contractValue?: true
    contractLength?: true
    _all?: true
  }

  export type PlayerTeamAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PlayerTeam to aggregate.
     */
    where?: PlayerTeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlayerTeams to fetch.
     */
    orderBy?: PlayerTeamOrderByWithRelationInput | PlayerTeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PlayerTeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlayerTeams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlayerTeams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PlayerTeams
    **/
    _count?: true | PlayerTeamCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PlayerTeamAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PlayerTeamSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PlayerTeamMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PlayerTeamMaxAggregateInputType
  }

  export type GetPlayerTeamAggregateType<T extends PlayerTeamAggregateArgs> = {
        [P in keyof T & keyof AggregatePlayerTeam]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlayerTeam[P]>
      : GetScalarType<T[P], AggregatePlayerTeam[P]>
  }




  export type PlayerTeamGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlayerTeamWhereInput
    orderBy?: PlayerTeamOrderByWithAggregationInput | PlayerTeamOrderByWithAggregationInput[]
    by: PlayerTeamScalarFieldEnum[] | PlayerTeamScalarFieldEnum
    having?: PlayerTeamScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PlayerTeamCountAggregateInputType | true
    _avg?: PlayerTeamAvgAggregateInputType
    _sum?: PlayerTeamSumAggregateInputType
    _min?: PlayerTeamMinAggregateInputType
    _max?: PlayerTeamMaxAggregateInputType
  }

  export type PlayerTeamGroupByOutputType = {
    id: number
    playerId: number
    teamId: number
    currentTeam: boolean
    startDate: Date | null
    endDate: Date | null
    jerseyNumber: number | null
    contractValue: number | null
    contractLength: number | null
    _count: PlayerTeamCountAggregateOutputType | null
    _avg: PlayerTeamAvgAggregateOutputType | null
    _sum: PlayerTeamSumAggregateOutputType | null
    _min: PlayerTeamMinAggregateOutputType | null
    _max: PlayerTeamMaxAggregateOutputType | null
  }

  type GetPlayerTeamGroupByPayload<T extends PlayerTeamGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PlayerTeamGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PlayerTeamGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PlayerTeamGroupByOutputType[P]>
            : GetScalarType<T[P], PlayerTeamGroupByOutputType[P]>
        }
      >
    >


  export type PlayerTeamSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    playerId?: boolean
    teamId?: boolean
    currentTeam?: boolean
    startDate?: boolean
    endDate?: boolean
    jerseyNumber?: boolean
    contractValue?: boolean
    contractLength?: boolean
    Player?: boolean | PlayerDefaultArgs<ExtArgs>
    Team?: boolean | TeamDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["playerTeam"]>


  export type PlayerTeamSelectScalar = {
    id?: boolean
    playerId?: boolean
    teamId?: boolean
    currentTeam?: boolean
    startDate?: boolean
    endDate?: boolean
    jerseyNumber?: boolean
    contractValue?: boolean
    contractLength?: boolean
  }

  export type PlayerTeamInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Player?: boolean | PlayerDefaultArgs<ExtArgs>
    Team?: boolean | TeamDefaultArgs<ExtArgs>
  }

  export type $PlayerTeamPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PlayerTeam"
    objects: {
      Player: Prisma.$PlayerPayload<ExtArgs>
      Team: Prisma.$TeamPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      playerId: number
      teamId: number
      currentTeam: boolean
      startDate: Date | null
      endDate: Date | null
      jerseyNumber: number | null
      contractValue: number | null
      contractLength: number | null
    }, ExtArgs["result"]["playerTeam"]>
    composites: {}
  }

  type PlayerTeamGetPayload<S extends boolean | null | undefined | PlayerTeamDefaultArgs> = $Result.GetResult<Prisma.$PlayerTeamPayload, S>

  type PlayerTeamCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PlayerTeamFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PlayerTeamCountAggregateInputType | true
    }

  export interface PlayerTeamDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PlayerTeam'], meta: { name: 'PlayerTeam' } }
    /**
     * Find zero or one PlayerTeam that matches the filter.
     * @param {PlayerTeamFindUniqueArgs} args - Arguments to find a PlayerTeam
     * @example
     * // Get one PlayerTeam
     * const playerTeam = await prisma.playerTeam.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PlayerTeamFindUniqueArgs>(args: SelectSubset<T, PlayerTeamFindUniqueArgs<ExtArgs>>): Prisma__PlayerTeamClient<$Result.GetResult<Prisma.$PlayerTeamPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one PlayerTeam that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PlayerTeamFindUniqueOrThrowArgs} args - Arguments to find a PlayerTeam
     * @example
     * // Get one PlayerTeam
     * const playerTeam = await prisma.playerTeam.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PlayerTeamFindUniqueOrThrowArgs>(args: SelectSubset<T, PlayerTeamFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PlayerTeamClient<$Result.GetResult<Prisma.$PlayerTeamPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first PlayerTeam that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerTeamFindFirstArgs} args - Arguments to find a PlayerTeam
     * @example
     * // Get one PlayerTeam
     * const playerTeam = await prisma.playerTeam.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PlayerTeamFindFirstArgs>(args?: SelectSubset<T, PlayerTeamFindFirstArgs<ExtArgs>>): Prisma__PlayerTeamClient<$Result.GetResult<Prisma.$PlayerTeamPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first PlayerTeam that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerTeamFindFirstOrThrowArgs} args - Arguments to find a PlayerTeam
     * @example
     * // Get one PlayerTeam
     * const playerTeam = await prisma.playerTeam.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PlayerTeamFindFirstOrThrowArgs>(args?: SelectSubset<T, PlayerTeamFindFirstOrThrowArgs<ExtArgs>>): Prisma__PlayerTeamClient<$Result.GetResult<Prisma.$PlayerTeamPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more PlayerTeams that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerTeamFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PlayerTeams
     * const playerTeams = await prisma.playerTeam.findMany()
     * 
     * // Get first 10 PlayerTeams
     * const playerTeams = await prisma.playerTeam.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const playerTeamWithIdOnly = await prisma.playerTeam.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PlayerTeamFindManyArgs>(args?: SelectSubset<T, PlayerTeamFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlayerTeamPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a PlayerTeam.
     * @param {PlayerTeamCreateArgs} args - Arguments to create a PlayerTeam.
     * @example
     * // Create one PlayerTeam
     * const PlayerTeam = await prisma.playerTeam.create({
     *   data: {
     *     // ... data to create a PlayerTeam
     *   }
     * })
     * 
     */
    create<T extends PlayerTeamCreateArgs>(args: SelectSubset<T, PlayerTeamCreateArgs<ExtArgs>>): Prisma__PlayerTeamClient<$Result.GetResult<Prisma.$PlayerTeamPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many PlayerTeams.
     * @param {PlayerTeamCreateManyArgs} args - Arguments to create many PlayerTeams.
     * @example
     * // Create many PlayerTeams
     * const playerTeam = await prisma.playerTeam.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PlayerTeamCreateManyArgs>(args?: SelectSubset<T, PlayerTeamCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a PlayerTeam.
     * @param {PlayerTeamDeleteArgs} args - Arguments to delete one PlayerTeam.
     * @example
     * // Delete one PlayerTeam
     * const PlayerTeam = await prisma.playerTeam.delete({
     *   where: {
     *     // ... filter to delete one PlayerTeam
     *   }
     * })
     * 
     */
    delete<T extends PlayerTeamDeleteArgs>(args: SelectSubset<T, PlayerTeamDeleteArgs<ExtArgs>>): Prisma__PlayerTeamClient<$Result.GetResult<Prisma.$PlayerTeamPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one PlayerTeam.
     * @param {PlayerTeamUpdateArgs} args - Arguments to update one PlayerTeam.
     * @example
     * // Update one PlayerTeam
     * const playerTeam = await prisma.playerTeam.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PlayerTeamUpdateArgs>(args: SelectSubset<T, PlayerTeamUpdateArgs<ExtArgs>>): Prisma__PlayerTeamClient<$Result.GetResult<Prisma.$PlayerTeamPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more PlayerTeams.
     * @param {PlayerTeamDeleteManyArgs} args - Arguments to filter PlayerTeams to delete.
     * @example
     * // Delete a few PlayerTeams
     * const { count } = await prisma.playerTeam.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PlayerTeamDeleteManyArgs>(args?: SelectSubset<T, PlayerTeamDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PlayerTeams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerTeamUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PlayerTeams
     * const playerTeam = await prisma.playerTeam.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PlayerTeamUpdateManyArgs>(args: SelectSubset<T, PlayerTeamUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PlayerTeam.
     * @param {PlayerTeamUpsertArgs} args - Arguments to update or create a PlayerTeam.
     * @example
     * // Update or create a PlayerTeam
     * const playerTeam = await prisma.playerTeam.upsert({
     *   create: {
     *     // ... data to create a PlayerTeam
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PlayerTeam we want to update
     *   }
     * })
     */
    upsert<T extends PlayerTeamUpsertArgs>(args: SelectSubset<T, PlayerTeamUpsertArgs<ExtArgs>>): Prisma__PlayerTeamClient<$Result.GetResult<Prisma.$PlayerTeamPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of PlayerTeams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerTeamCountArgs} args - Arguments to filter PlayerTeams to count.
     * @example
     * // Count the number of PlayerTeams
     * const count = await prisma.playerTeam.count({
     *   where: {
     *     // ... the filter for the PlayerTeams we want to count
     *   }
     * })
    **/
    count<T extends PlayerTeamCountArgs>(
      args?: Subset<T, PlayerTeamCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PlayerTeamCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PlayerTeam.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerTeamAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PlayerTeamAggregateArgs>(args: Subset<T, PlayerTeamAggregateArgs>): Prisma.PrismaPromise<GetPlayerTeamAggregateType<T>>

    /**
     * Group by PlayerTeam.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerTeamGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PlayerTeamGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PlayerTeamGroupByArgs['orderBy'] }
        : { orderBy?: PlayerTeamGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PlayerTeamGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlayerTeamGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PlayerTeam model
   */
  readonly fields: PlayerTeamFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PlayerTeam.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PlayerTeamClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Player<T extends PlayerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PlayerDefaultArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    Team<T extends TeamDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TeamDefaultArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PlayerTeam model
   */ 
  interface PlayerTeamFieldRefs {
    readonly id: FieldRef<"PlayerTeam", 'Int'>
    readonly playerId: FieldRef<"PlayerTeam", 'Int'>
    readonly teamId: FieldRef<"PlayerTeam", 'Int'>
    readonly currentTeam: FieldRef<"PlayerTeam", 'Boolean'>
    readonly startDate: FieldRef<"PlayerTeam", 'DateTime'>
    readonly endDate: FieldRef<"PlayerTeam", 'DateTime'>
    readonly jerseyNumber: FieldRef<"PlayerTeam", 'Int'>
    readonly contractValue: FieldRef<"PlayerTeam", 'Int'>
    readonly contractLength: FieldRef<"PlayerTeam", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * PlayerTeam findUnique
   */
  export type PlayerTeamFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerTeam
     */
    select?: PlayerTeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerTeamInclude<ExtArgs> | null
    /**
     * Filter, which PlayerTeam to fetch.
     */
    where: PlayerTeamWhereUniqueInput
  }

  /**
   * PlayerTeam findUniqueOrThrow
   */
  export type PlayerTeamFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerTeam
     */
    select?: PlayerTeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerTeamInclude<ExtArgs> | null
    /**
     * Filter, which PlayerTeam to fetch.
     */
    where: PlayerTeamWhereUniqueInput
  }

  /**
   * PlayerTeam findFirst
   */
  export type PlayerTeamFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerTeam
     */
    select?: PlayerTeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerTeamInclude<ExtArgs> | null
    /**
     * Filter, which PlayerTeam to fetch.
     */
    where?: PlayerTeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlayerTeams to fetch.
     */
    orderBy?: PlayerTeamOrderByWithRelationInput | PlayerTeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PlayerTeams.
     */
    cursor?: PlayerTeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlayerTeams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlayerTeams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PlayerTeams.
     */
    distinct?: PlayerTeamScalarFieldEnum | PlayerTeamScalarFieldEnum[]
  }

  /**
   * PlayerTeam findFirstOrThrow
   */
  export type PlayerTeamFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerTeam
     */
    select?: PlayerTeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerTeamInclude<ExtArgs> | null
    /**
     * Filter, which PlayerTeam to fetch.
     */
    where?: PlayerTeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlayerTeams to fetch.
     */
    orderBy?: PlayerTeamOrderByWithRelationInput | PlayerTeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PlayerTeams.
     */
    cursor?: PlayerTeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlayerTeams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlayerTeams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PlayerTeams.
     */
    distinct?: PlayerTeamScalarFieldEnum | PlayerTeamScalarFieldEnum[]
  }

  /**
   * PlayerTeam findMany
   */
  export type PlayerTeamFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerTeam
     */
    select?: PlayerTeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerTeamInclude<ExtArgs> | null
    /**
     * Filter, which PlayerTeams to fetch.
     */
    where?: PlayerTeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlayerTeams to fetch.
     */
    orderBy?: PlayerTeamOrderByWithRelationInput | PlayerTeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PlayerTeams.
     */
    cursor?: PlayerTeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlayerTeams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlayerTeams.
     */
    skip?: number
    distinct?: PlayerTeamScalarFieldEnum | PlayerTeamScalarFieldEnum[]
  }

  /**
   * PlayerTeam create
   */
  export type PlayerTeamCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerTeam
     */
    select?: PlayerTeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerTeamInclude<ExtArgs> | null
    /**
     * The data needed to create a PlayerTeam.
     */
    data: XOR<PlayerTeamCreateInput, PlayerTeamUncheckedCreateInput>
  }

  /**
   * PlayerTeam createMany
   */
  export type PlayerTeamCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PlayerTeams.
     */
    data: PlayerTeamCreateManyInput | PlayerTeamCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PlayerTeam update
   */
  export type PlayerTeamUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerTeam
     */
    select?: PlayerTeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerTeamInclude<ExtArgs> | null
    /**
     * The data needed to update a PlayerTeam.
     */
    data: XOR<PlayerTeamUpdateInput, PlayerTeamUncheckedUpdateInput>
    /**
     * Choose, which PlayerTeam to update.
     */
    where: PlayerTeamWhereUniqueInput
  }

  /**
   * PlayerTeam updateMany
   */
  export type PlayerTeamUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PlayerTeams.
     */
    data: XOR<PlayerTeamUpdateManyMutationInput, PlayerTeamUncheckedUpdateManyInput>
    /**
     * Filter which PlayerTeams to update
     */
    where?: PlayerTeamWhereInput
  }

  /**
   * PlayerTeam upsert
   */
  export type PlayerTeamUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerTeam
     */
    select?: PlayerTeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerTeamInclude<ExtArgs> | null
    /**
     * The filter to search for the PlayerTeam to update in case it exists.
     */
    where: PlayerTeamWhereUniqueInput
    /**
     * In case the PlayerTeam found by the `where` argument doesn't exist, create a new PlayerTeam with this data.
     */
    create: XOR<PlayerTeamCreateInput, PlayerTeamUncheckedCreateInput>
    /**
     * In case the PlayerTeam was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PlayerTeamUpdateInput, PlayerTeamUncheckedUpdateInput>
  }

  /**
   * PlayerTeam delete
   */
  export type PlayerTeamDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerTeam
     */
    select?: PlayerTeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerTeamInclude<ExtArgs> | null
    /**
     * Filter which PlayerTeam to delete.
     */
    where: PlayerTeamWhereUniqueInput
  }

  /**
   * PlayerTeam deleteMany
   */
  export type PlayerTeamDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PlayerTeams to delete
     */
    where?: PlayerTeamWhereInput
  }

  /**
   * PlayerTeam without action
   */
  export type PlayerTeamDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerTeam
     */
    select?: PlayerTeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerTeamInclude<ExtArgs> | null
  }


  /**
   * Model PostSeasonResult
   */

  export type AggregatePostSeasonResult = {
    _count: PostSeasonResultCountAggregateOutputType | null
    _avg: PostSeasonResultAvgAggregateOutputType | null
    _sum: PostSeasonResultSumAggregateOutputType | null
    _min: PostSeasonResultMinAggregateOutputType | null
    _max: PostSeasonResultMaxAggregateOutputType | null
  }

  export type PostSeasonResultAvgAggregateOutputType = {
    id: number | null
    playoffYear: number | null
    opponentScore: number | null
    teamScore: number | null
    teamId: number | null
  }

  export type PostSeasonResultSumAggregateOutputType = {
    id: number | null
    playoffYear: number | null
    opponentScore: number | null
    teamScore: number | null
    teamId: number | null
  }

  export type PostSeasonResultMinAggregateOutputType = {
    id: number | null
    playoffYear: number | null
    lastRoundReached: string | null
    winLose: string | null
    opponentScore: number | null
    teamScore: number | null
    teamId: number | null
  }

  export type PostSeasonResultMaxAggregateOutputType = {
    id: number | null
    playoffYear: number | null
    lastRoundReached: string | null
    winLose: string | null
    opponentScore: number | null
    teamScore: number | null
    teamId: number | null
  }

  export type PostSeasonResultCountAggregateOutputType = {
    id: number
    playoffYear: number
    lastRoundReached: number
    winLose: number
    opponentScore: number
    teamScore: number
    teamId: number
    _all: number
  }


  export type PostSeasonResultAvgAggregateInputType = {
    id?: true
    playoffYear?: true
    opponentScore?: true
    teamScore?: true
    teamId?: true
  }

  export type PostSeasonResultSumAggregateInputType = {
    id?: true
    playoffYear?: true
    opponentScore?: true
    teamScore?: true
    teamId?: true
  }

  export type PostSeasonResultMinAggregateInputType = {
    id?: true
    playoffYear?: true
    lastRoundReached?: true
    winLose?: true
    opponentScore?: true
    teamScore?: true
    teamId?: true
  }

  export type PostSeasonResultMaxAggregateInputType = {
    id?: true
    playoffYear?: true
    lastRoundReached?: true
    winLose?: true
    opponentScore?: true
    teamScore?: true
    teamId?: true
  }

  export type PostSeasonResultCountAggregateInputType = {
    id?: true
    playoffYear?: true
    lastRoundReached?: true
    winLose?: true
    opponentScore?: true
    teamScore?: true
    teamId?: true
    _all?: true
  }

  export type PostSeasonResultAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PostSeasonResult to aggregate.
     */
    where?: PostSeasonResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PostSeasonResults to fetch.
     */
    orderBy?: PostSeasonResultOrderByWithRelationInput | PostSeasonResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PostSeasonResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PostSeasonResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PostSeasonResults.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PostSeasonResults
    **/
    _count?: true | PostSeasonResultCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PostSeasonResultAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PostSeasonResultSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PostSeasonResultMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PostSeasonResultMaxAggregateInputType
  }

  export type GetPostSeasonResultAggregateType<T extends PostSeasonResultAggregateArgs> = {
        [P in keyof T & keyof AggregatePostSeasonResult]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePostSeasonResult[P]>
      : GetScalarType<T[P], AggregatePostSeasonResult[P]>
  }




  export type PostSeasonResultGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PostSeasonResultWhereInput
    orderBy?: PostSeasonResultOrderByWithAggregationInput | PostSeasonResultOrderByWithAggregationInput[]
    by: PostSeasonResultScalarFieldEnum[] | PostSeasonResultScalarFieldEnum
    having?: PostSeasonResultScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PostSeasonResultCountAggregateInputType | true
    _avg?: PostSeasonResultAvgAggregateInputType
    _sum?: PostSeasonResultSumAggregateInputType
    _min?: PostSeasonResultMinAggregateInputType
    _max?: PostSeasonResultMaxAggregateInputType
  }

  export type PostSeasonResultGroupByOutputType = {
    id: number
    playoffYear: number | null
    lastRoundReached: string | null
    winLose: string | null
    opponentScore: number | null
    teamScore: number | null
    teamId: number | null
    _count: PostSeasonResultCountAggregateOutputType | null
    _avg: PostSeasonResultAvgAggregateOutputType | null
    _sum: PostSeasonResultSumAggregateOutputType | null
    _min: PostSeasonResultMinAggregateOutputType | null
    _max: PostSeasonResultMaxAggregateOutputType | null
  }

  type GetPostSeasonResultGroupByPayload<T extends PostSeasonResultGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PostSeasonResultGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PostSeasonResultGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PostSeasonResultGroupByOutputType[P]>
            : GetScalarType<T[P], PostSeasonResultGroupByOutputType[P]>
        }
      >
    >


  export type PostSeasonResultSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    playoffYear?: boolean
    lastRoundReached?: boolean
    winLose?: boolean
    opponentScore?: boolean
    teamScore?: boolean
    teamId?: boolean
    Team?: boolean | PostSeasonResult$TeamArgs<ExtArgs>
  }, ExtArgs["result"]["postSeasonResult"]>


  export type PostSeasonResultSelectScalar = {
    id?: boolean
    playoffYear?: boolean
    lastRoundReached?: boolean
    winLose?: boolean
    opponentScore?: boolean
    teamScore?: boolean
    teamId?: boolean
  }

  export type PostSeasonResultInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Team?: boolean | PostSeasonResult$TeamArgs<ExtArgs>
  }

  export type $PostSeasonResultPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PostSeasonResult"
    objects: {
      Team: Prisma.$TeamPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      playoffYear: number | null
      lastRoundReached: string | null
      winLose: string | null
      opponentScore: number | null
      teamScore: number | null
      teamId: number | null
    }, ExtArgs["result"]["postSeasonResult"]>
    composites: {}
  }

  type PostSeasonResultGetPayload<S extends boolean | null | undefined | PostSeasonResultDefaultArgs> = $Result.GetResult<Prisma.$PostSeasonResultPayload, S>

  type PostSeasonResultCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PostSeasonResultFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PostSeasonResultCountAggregateInputType | true
    }

  export interface PostSeasonResultDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PostSeasonResult'], meta: { name: 'PostSeasonResult' } }
    /**
     * Find zero or one PostSeasonResult that matches the filter.
     * @param {PostSeasonResultFindUniqueArgs} args - Arguments to find a PostSeasonResult
     * @example
     * // Get one PostSeasonResult
     * const postSeasonResult = await prisma.postSeasonResult.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PostSeasonResultFindUniqueArgs>(args: SelectSubset<T, PostSeasonResultFindUniqueArgs<ExtArgs>>): Prisma__PostSeasonResultClient<$Result.GetResult<Prisma.$PostSeasonResultPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one PostSeasonResult that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PostSeasonResultFindUniqueOrThrowArgs} args - Arguments to find a PostSeasonResult
     * @example
     * // Get one PostSeasonResult
     * const postSeasonResult = await prisma.postSeasonResult.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PostSeasonResultFindUniqueOrThrowArgs>(args: SelectSubset<T, PostSeasonResultFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PostSeasonResultClient<$Result.GetResult<Prisma.$PostSeasonResultPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first PostSeasonResult that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostSeasonResultFindFirstArgs} args - Arguments to find a PostSeasonResult
     * @example
     * // Get one PostSeasonResult
     * const postSeasonResult = await prisma.postSeasonResult.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PostSeasonResultFindFirstArgs>(args?: SelectSubset<T, PostSeasonResultFindFirstArgs<ExtArgs>>): Prisma__PostSeasonResultClient<$Result.GetResult<Prisma.$PostSeasonResultPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first PostSeasonResult that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostSeasonResultFindFirstOrThrowArgs} args - Arguments to find a PostSeasonResult
     * @example
     * // Get one PostSeasonResult
     * const postSeasonResult = await prisma.postSeasonResult.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PostSeasonResultFindFirstOrThrowArgs>(args?: SelectSubset<T, PostSeasonResultFindFirstOrThrowArgs<ExtArgs>>): Prisma__PostSeasonResultClient<$Result.GetResult<Prisma.$PostSeasonResultPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more PostSeasonResults that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostSeasonResultFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PostSeasonResults
     * const postSeasonResults = await prisma.postSeasonResult.findMany()
     * 
     * // Get first 10 PostSeasonResults
     * const postSeasonResults = await prisma.postSeasonResult.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const postSeasonResultWithIdOnly = await prisma.postSeasonResult.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PostSeasonResultFindManyArgs>(args?: SelectSubset<T, PostSeasonResultFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostSeasonResultPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a PostSeasonResult.
     * @param {PostSeasonResultCreateArgs} args - Arguments to create a PostSeasonResult.
     * @example
     * // Create one PostSeasonResult
     * const PostSeasonResult = await prisma.postSeasonResult.create({
     *   data: {
     *     // ... data to create a PostSeasonResult
     *   }
     * })
     * 
     */
    create<T extends PostSeasonResultCreateArgs>(args: SelectSubset<T, PostSeasonResultCreateArgs<ExtArgs>>): Prisma__PostSeasonResultClient<$Result.GetResult<Prisma.$PostSeasonResultPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many PostSeasonResults.
     * @param {PostSeasonResultCreateManyArgs} args - Arguments to create many PostSeasonResults.
     * @example
     * // Create many PostSeasonResults
     * const postSeasonResult = await prisma.postSeasonResult.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PostSeasonResultCreateManyArgs>(args?: SelectSubset<T, PostSeasonResultCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a PostSeasonResult.
     * @param {PostSeasonResultDeleteArgs} args - Arguments to delete one PostSeasonResult.
     * @example
     * // Delete one PostSeasonResult
     * const PostSeasonResult = await prisma.postSeasonResult.delete({
     *   where: {
     *     // ... filter to delete one PostSeasonResult
     *   }
     * })
     * 
     */
    delete<T extends PostSeasonResultDeleteArgs>(args: SelectSubset<T, PostSeasonResultDeleteArgs<ExtArgs>>): Prisma__PostSeasonResultClient<$Result.GetResult<Prisma.$PostSeasonResultPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one PostSeasonResult.
     * @param {PostSeasonResultUpdateArgs} args - Arguments to update one PostSeasonResult.
     * @example
     * // Update one PostSeasonResult
     * const postSeasonResult = await prisma.postSeasonResult.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PostSeasonResultUpdateArgs>(args: SelectSubset<T, PostSeasonResultUpdateArgs<ExtArgs>>): Prisma__PostSeasonResultClient<$Result.GetResult<Prisma.$PostSeasonResultPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more PostSeasonResults.
     * @param {PostSeasonResultDeleteManyArgs} args - Arguments to filter PostSeasonResults to delete.
     * @example
     * // Delete a few PostSeasonResults
     * const { count } = await prisma.postSeasonResult.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PostSeasonResultDeleteManyArgs>(args?: SelectSubset<T, PostSeasonResultDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PostSeasonResults.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostSeasonResultUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PostSeasonResults
     * const postSeasonResult = await prisma.postSeasonResult.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PostSeasonResultUpdateManyArgs>(args: SelectSubset<T, PostSeasonResultUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PostSeasonResult.
     * @param {PostSeasonResultUpsertArgs} args - Arguments to update or create a PostSeasonResult.
     * @example
     * // Update or create a PostSeasonResult
     * const postSeasonResult = await prisma.postSeasonResult.upsert({
     *   create: {
     *     // ... data to create a PostSeasonResult
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PostSeasonResult we want to update
     *   }
     * })
     */
    upsert<T extends PostSeasonResultUpsertArgs>(args: SelectSubset<T, PostSeasonResultUpsertArgs<ExtArgs>>): Prisma__PostSeasonResultClient<$Result.GetResult<Prisma.$PostSeasonResultPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of PostSeasonResults.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostSeasonResultCountArgs} args - Arguments to filter PostSeasonResults to count.
     * @example
     * // Count the number of PostSeasonResults
     * const count = await prisma.postSeasonResult.count({
     *   where: {
     *     // ... the filter for the PostSeasonResults we want to count
     *   }
     * })
    **/
    count<T extends PostSeasonResultCountArgs>(
      args?: Subset<T, PostSeasonResultCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PostSeasonResultCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PostSeasonResult.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostSeasonResultAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PostSeasonResultAggregateArgs>(args: Subset<T, PostSeasonResultAggregateArgs>): Prisma.PrismaPromise<GetPostSeasonResultAggregateType<T>>

    /**
     * Group by PostSeasonResult.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostSeasonResultGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PostSeasonResultGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PostSeasonResultGroupByArgs['orderBy'] }
        : { orderBy?: PostSeasonResultGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PostSeasonResultGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPostSeasonResultGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PostSeasonResult model
   */
  readonly fields: PostSeasonResultFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PostSeasonResult.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PostSeasonResultClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Team<T extends PostSeasonResult$TeamArgs<ExtArgs> = {}>(args?: Subset<T, PostSeasonResult$TeamArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PostSeasonResult model
   */ 
  interface PostSeasonResultFieldRefs {
    readonly id: FieldRef<"PostSeasonResult", 'Int'>
    readonly playoffYear: FieldRef<"PostSeasonResult", 'Int'>
    readonly lastRoundReached: FieldRef<"PostSeasonResult", 'String'>
    readonly winLose: FieldRef<"PostSeasonResult", 'String'>
    readonly opponentScore: FieldRef<"PostSeasonResult", 'Int'>
    readonly teamScore: FieldRef<"PostSeasonResult", 'Int'>
    readonly teamId: FieldRef<"PostSeasonResult", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * PostSeasonResult findUnique
   */
  export type PostSeasonResultFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostSeasonResult
     */
    select?: PostSeasonResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostSeasonResultInclude<ExtArgs> | null
    /**
     * Filter, which PostSeasonResult to fetch.
     */
    where: PostSeasonResultWhereUniqueInput
  }

  /**
   * PostSeasonResult findUniqueOrThrow
   */
  export type PostSeasonResultFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostSeasonResult
     */
    select?: PostSeasonResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostSeasonResultInclude<ExtArgs> | null
    /**
     * Filter, which PostSeasonResult to fetch.
     */
    where: PostSeasonResultWhereUniqueInput
  }

  /**
   * PostSeasonResult findFirst
   */
  export type PostSeasonResultFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostSeasonResult
     */
    select?: PostSeasonResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostSeasonResultInclude<ExtArgs> | null
    /**
     * Filter, which PostSeasonResult to fetch.
     */
    where?: PostSeasonResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PostSeasonResults to fetch.
     */
    orderBy?: PostSeasonResultOrderByWithRelationInput | PostSeasonResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PostSeasonResults.
     */
    cursor?: PostSeasonResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PostSeasonResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PostSeasonResults.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PostSeasonResults.
     */
    distinct?: PostSeasonResultScalarFieldEnum | PostSeasonResultScalarFieldEnum[]
  }

  /**
   * PostSeasonResult findFirstOrThrow
   */
  export type PostSeasonResultFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostSeasonResult
     */
    select?: PostSeasonResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostSeasonResultInclude<ExtArgs> | null
    /**
     * Filter, which PostSeasonResult to fetch.
     */
    where?: PostSeasonResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PostSeasonResults to fetch.
     */
    orderBy?: PostSeasonResultOrderByWithRelationInput | PostSeasonResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PostSeasonResults.
     */
    cursor?: PostSeasonResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PostSeasonResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PostSeasonResults.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PostSeasonResults.
     */
    distinct?: PostSeasonResultScalarFieldEnum | PostSeasonResultScalarFieldEnum[]
  }

  /**
   * PostSeasonResult findMany
   */
  export type PostSeasonResultFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostSeasonResult
     */
    select?: PostSeasonResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostSeasonResultInclude<ExtArgs> | null
    /**
     * Filter, which PostSeasonResults to fetch.
     */
    where?: PostSeasonResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PostSeasonResults to fetch.
     */
    orderBy?: PostSeasonResultOrderByWithRelationInput | PostSeasonResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PostSeasonResults.
     */
    cursor?: PostSeasonResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PostSeasonResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PostSeasonResults.
     */
    skip?: number
    distinct?: PostSeasonResultScalarFieldEnum | PostSeasonResultScalarFieldEnum[]
  }

  /**
   * PostSeasonResult create
   */
  export type PostSeasonResultCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostSeasonResult
     */
    select?: PostSeasonResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostSeasonResultInclude<ExtArgs> | null
    /**
     * The data needed to create a PostSeasonResult.
     */
    data?: XOR<PostSeasonResultCreateInput, PostSeasonResultUncheckedCreateInput>
  }

  /**
   * PostSeasonResult createMany
   */
  export type PostSeasonResultCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PostSeasonResults.
     */
    data: PostSeasonResultCreateManyInput | PostSeasonResultCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PostSeasonResult update
   */
  export type PostSeasonResultUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostSeasonResult
     */
    select?: PostSeasonResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostSeasonResultInclude<ExtArgs> | null
    /**
     * The data needed to update a PostSeasonResult.
     */
    data: XOR<PostSeasonResultUpdateInput, PostSeasonResultUncheckedUpdateInput>
    /**
     * Choose, which PostSeasonResult to update.
     */
    where: PostSeasonResultWhereUniqueInput
  }

  /**
   * PostSeasonResult updateMany
   */
  export type PostSeasonResultUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PostSeasonResults.
     */
    data: XOR<PostSeasonResultUpdateManyMutationInput, PostSeasonResultUncheckedUpdateManyInput>
    /**
     * Filter which PostSeasonResults to update
     */
    where?: PostSeasonResultWhereInput
  }

  /**
   * PostSeasonResult upsert
   */
  export type PostSeasonResultUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostSeasonResult
     */
    select?: PostSeasonResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostSeasonResultInclude<ExtArgs> | null
    /**
     * The filter to search for the PostSeasonResult to update in case it exists.
     */
    where: PostSeasonResultWhereUniqueInput
    /**
     * In case the PostSeasonResult found by the `where` argument doesn't exist, create a new PostSeasonResult with this data.
     */
    create: XOR<PostSeasonResultCreateInput, PostSeasonResultUncheckedCreateInput>
    /**
     * In case the PostSeasonResult was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PostSeasonResultUpdateInput, PostSeasonResultUncheckedUpdateInput>
  }

  /**
   * PostSeasonResult delete
   */
  export type PostSeasonResultDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostSeasonResult
     */
    select?: PostSeasonResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostSeasonResultInclude<ExtArgs> | null
    /**
     * Filter which PostSeasonResult to delete.
     */
    where: PostSeasonResultWhereUniqueInput
  }

  /**
   * PostSeasonResult deleteMany
   */
  export type PostSeasonResultDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PostSeasonResults to delete
     */
    where?: PostSeasonResultWhereInput
  }

  /**
   * PostSeasonResult.Team
   */
  export type PostSeasonResult$TeamArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    where?: TeamWhereInput
  }

  /**
   * PostSeasonResult without action
   */
  export type PostSeasonResultDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostSeasonResult
     */
    select?: PostSeasonResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostSeasonResultInclude<ExtArgs> | null
  }


  /**
   * Model Prospect
   */

  export type AggregateProspect = {
    _count: ProspectCountAggregateOutputType | null
    _avg: ProspectAvgAggregateOutputType | null
    _sum: ProspectSumAggregateOutputType | null
    _min: ProspectMinAggregateOutputType | null
    _max: ProspectMaxAggregateOutputType | null
  }

  export type ProspectAvgAggregateOutputType = {
    id: number | null
    height: number | null
    weight: number | null
    handSize: number | null
    armLength: number | null
    fortyTime: number | null
    tenYardSplit: number | null
    verticalLeap: number | null
    broadJump: number | null
    threeCone: number | null
    twentyYardShuttle: number | null
    benchPress: number | null
    draftYear: number | null
    teamId: number | null
    draftPickId: number | null
  }

  export type ProspectSumAggregateOutputType = {
    id: number | null
    height: number | null
    weight: number | null
    handSize: number | null
    armLength: number | null
    fortyTime: number | null
    tenYardSplit: number | null
    verticalLeap: number | null
    broadJump: number | null
    threeCone: number | null
    twentyYardShuttle: number | null
    benchPress: number | null
    draftYear: number | null
    teamId: number | null
    draftPickId: number | null
  }

  export type ProspectMinAggregateOutputType = {
    id: number | null
    firstName: string | null
    lastName: string | null
    position: string | null
    college: string | null
    height: number | null
    weight: number | null
    handSize: number | null
    armLength: number | null
    homeCity: string | null
    homeState: string | null
    fortyTime: number | null
    tenYardSplit: number | null
    verticalLeap: number | null
    broadJump: number | null
    threeCone: number | null
    twentyYardShuttle: number | null
    benchPress: number | null
    drafted: boolean | null
    draftYear: number | null
    teamId: number | null
    draftPickId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProspectMaxAggregateOutputType = {
    id: number | null
    firstName: string | null
    lastName: string | null
    position: string | null
    college: string | null
    height: number | null
    weight: number | null
    handSize: number | null
    armLength: number | null
    homeCity: string | null
    homeState: string | null
    fortyTime: number | null
    tenYardSplit: number | null
    verticalLeap: number | null
    broadJump: number | null
    threeCone: number | null
    twentyYardShuttle: number | null
    benchPress: number | null
    drafted: boolean | null
    draftYear: number | null
    teamId: number | null
    draftPickId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProspectCountAggregateOutputType = {
    id: number
    firstName: number
    lastName: number
    position: number
    college: number
    height: number
    weight: number
    handSize: number
    armLength: number
    homeCity: number
    homeState: number
    fortyTime: number
    tenYardSplit: number
    verticalLeap: number
    broadJump: number
    threeCone: number
    twentyYardShuttle: number
    benchPress: number
    drafted: number
    draftYear: number
    teamId: number
    draftPickId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ProspectAvgAggregateInputType = {
    id?: true
    height?: true
    weight?: true
    handSize?: true
    armLength?: true
    fortyTime?: true
    tenYardSplit?: true
    verticalLeap?: true
    broadJump?: true
    threeCone?: true
    twentyYardShuttle?: true
    benchPress?: true
    draftYear?: true
    teamId?: true
    draftPickId?: true
  }

  export type ProspectSumAggregateInputType = {
    id?: true
    height?: true
    weight?: true
    handSize?: true
    armLength?: true
    fortyTime?: true
    tenYardSplit?: true
    verticalLeap?: true
    broadJump?: true
    threeCone?: true
    twentyYardShuttle?: true
    benchPress?: true
    draftYear?: true
    teamId?: true
    draftPickId?: true
  }

  export type ProspectMinAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    position?: true
    college?: true
    height?: true
    weight?: true
    handSize?: true
    armLength?: true
    homeCity?: true
    homeState?: true
    fortyTime?: true
    tenYardSplit?: true
    verticalLeap?: true
    broadJump?: true
    threeCone?: true
    twentyYardShuttle?: true
    benchPress?: true
    drafted?: true
    draftYear?: true
    teamId?: true
    draftPickId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProspectMaxAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    position?: true
    college?: true
    height?: true
    weight?: true
    handSize?: true
    armLength?: true
    homeCity?: true
    homeState?: true
    fortyTime?: true
    tenYardSplit?: true
    verticalLeap?: true
    broadJump?: true
    threeCone?: true
    twentyYardShuttle?: true
    benchPress?: true
    drafted?: true
    draftYear?: true
    teamId?: true
    draftPickId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProspectCountAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    position?: true
    college?: true
    height?: true
    weight?: true
    handSize?: true
    armLength?: true
    homeCity?: true
    homeState?: true
    fortyTime?: true
    tenYardSplit?: true
    verticalLeap?: true
    broadJump?: true
    threeCone?: true
    twentyYardShuttle?: true
    benchPress?: true
    drafted?: true
    draftYear?: true
    teamId?: true
    draftPickId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ProspectAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Prospect to aggregate.
     */
    where?: ProspectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Prospects to fetch.
     */
    orderBy?: ProspectOrderByWithRelationInput | ProspectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProspectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Prospects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Prospects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Prospects
    **/
    _count?: true | ProspectCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProspectAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProspectSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProspectMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProspectMaxAggregateInputType
  }

  export type GetProspectAggregateType<T extends ProspectAggregateArgs> = {
        [P in keyof T & keyof AggregateProspect]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProspect[P]>
      : GetScalarType<T[P], AggregateProspect[P]>
  }




  export type ProspectGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProspectWhereInput
    orderBy?: ProspectOrderByWithAggregationInput | ProspectOrderByWithAggregationInput[]
    by: ProspectScalarFieldEnum[] | ProspectScalarFieldEnum
    having?: ProspectScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProspectCountAggregateInputType | true
    _avg?: ProspectAvgAggregateInputType
    _sum?: ProspectSumAggregateInputType
    _min?: ProspectMinAggregateInputType
    _max?: ProspectMaxAggregateInputType
  }

  export type ProspectGroupByOutputType = {
    id: number
    firstName: string
    lastName: string
    position: string
    college: string
    height: number
    weight: number
    handSize: number | null
    armLength: number | null
    homeCity: string | null
    homeState: string | null
    fortyTime: number | null
    tenYardSplit: number | null
    verticalLeap: number | null
    broadJump: number | null
    threeCone: number | null
    twentyYardShuttle: number | null
    benchPress: number | null
    drafted: boolean
    draftYear: number | null
    teamId: number | null
    draftPickId: number | null
    createdAt: Date | null
    updatedAt: Date | null
    _count: ProspectCountAggregateOutputType | null
    _avg: ProspectAvgAggregateOutputType | null
    _sum: ProspectSumAggregateOutputType | null
    _min: ProspectMinAggregateOutputType | null
    _max: ProspectMaxAggregateOutputType | null
  }

  type GetProspectGroupByPayload<T extends ProspectGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProspectGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProspectGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProspectGroupByOutputType[P]>
            : GetScalarType<T[P], ProspectGroupByOutputType[P]>
        }
      >
    >


  export type ProspectSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    position?: boolean
    college?: boolean
    height?: boolean
    weight?: boolean
    handSize?: boolean
    armLength?: boolean
    homeCity?: boolean
    homeState?: boolean
    fortyTime?: boolean
    tenYardSplit?: boolean
    verticalLeap?: boolean
    broadJump?: boolean
    threeCone?: boolean
    twentyYardShuttle?: boolean
    benchPress?: boolean
    drafted?: boolean
    draftYear?: boolean
    teamId?: boolean
    draftPickId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    DraftPick_DraftPick_prospectIdToProspect?: boolean | Prospect$DraftPick_DraftPick_prospectIdToProspectArgs<ExtArgs>
    Player?: boolean | Prospect$PlayerArgs<ExtArgs>
    DraftPick_Prospect_draftPickIdToDraftPick?: boolean | Prospect$DraftPick_Prospect_draftPickIdToDraftPickArgs<ExtArgs>
    Team?: boolean | Prospect$TeamArgs<ExtArgs>
    _count?: boolean | ProspectCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["prospect"]>


  export type ProspectSelectScalar = {
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    position?: boolean
    college?: boolean
    height?: boolean
    weight?: boolean
    handSize?: boolean
    armLength?: boolean
    homeCity?: boolean
    homeState?: boolean
    fortyTime?: boolean
    tenYardSplit?: boolean
    verticalLeap?: boolean
    broadJump?: boolean
    threeCone?: boolean
    twentyYardShuttle?: boolean
    benchPress?: boolean
    drafted?: boolean
    draftYear?: boolean
    teamId?: boolean
    draftPickId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ProspectInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    DraftPick_DraftPick_prospectIdToProspect?: boolean | Prospect$DraftPick_DraftPick_prospectIdToProspectArgs<ExtArgs>
    Player?: boolean | Prospect$PlayerArgs<ExtArgs>
    DraftPick_Prospect_draftPickIdToDraftPick?: boolean | Prospect$DraftPick_Prospect_draftPickIdToDraftPickArgs<ExtArgs>
    Team?: boolean | Prospect$TeamArgs<ExtArgs>
    _count?: boolean | ProspectCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ProspectPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Prospect"
    objects: {
      DraftPick_DraftPick_prospectIdToProspect: Prisma.$DraftPickPayload<ExtArgs>[]
      Player: Prisma.$PlayerPayload<ExtArgs>[]
      DraftPick_Prospect_draftPickIdToDraftPick: Prisma.$DraftPickPayload<ExtArgs> | null
      Team: Prisma.$TeamPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      firstName: string
      lastName: string
      position: string
      college: string
      height: number
      weight: number
      handSize: number | null
      armLength: number | null
      homeCity: string | null
      homeState: string | null
      fortyTime: number | null
      tenYardSplit: number | null
      verticalLeap: number | null
      broadJump: number | null
      threeCone: number | null
      twentyYardShuttle: number | null
      benchPress: number | null
      drafted: boolean
      draftYear: number | null
      teamId: number | null
      draftPickId: number | null
      createdAt: Date | null
      updatedAt: Date | null
    }, ExtArgs["result"]["prospect"]>
    composites: {}
  }

  type ProspectGetPayload<S extends boolean | null | undefined | ProspectDefaultArgs> = $Result.GetResult<Prisma.$ProspectPayload, S>

  type ProspectCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProspectFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProspectCountAggregateInputType | true
    }

  export interface ProspectDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Prospect'], meta: { name: 'Prospect' } }
    /**
     * Find zero or one Prospect that matches the filter.
     * @param {ProspectFindUniqueArgs} args - Arguments to find a Prospect
     * @example
     * // Get one Prospect
     * const prospect = await prisma.prospect.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProspectFindUniqueArgs>(args: SelectSubset<T, ProspectFindUniqueArgs<ExtArgs>>): Prisma__ProspectClient<$Result.GetResult<Prisma.$ProspectPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Prospect that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ProspectFindUniqueOrThrowArgs} args - Arguments to find a Prospect
     * @example
     * // Get one Prospect
     * const prospect = await prisma.prospect.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProspectFindUniqueOrThrowArgs>(args: SelectSubset<T, ProspectFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProspectClient<$Result.GetResult<Prisma.$ProspectPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Prospect that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProspectFindFirstArgs} args - Arguments to find a Prospect
     * @example
     * // Get one Prospect
     * const prospect = await prisma.prospect.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProspectFindFirstArgs>(args?: SelectSubset<T, ProspectFindFirstArgs<ExtArgs>>): Prisma__ProspectClient<$Result.GetResult<Prisma.$ProspectPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Prospect that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProspectFindFirstOrThrowArgs} args - Arguments to find a Prospect
     * @example
     * // Get one Prospect
     * const prospect = await prisma.prospect.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProspectFindFirstOrThrowArgs>(args?: SelectSubset<T, ProspectFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProspectClient<$Result.GetResult<Prisma.$ProspectPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Prospects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProspectFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Prospects
     * const prospects = await prisma.prospect.findMany()
     * 
     * // Get first 10 Prospects
     * const prospects = await prisma.prospect.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const prospectWithIdOnly = await prisma.prospect.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProspectFindManyArgs>(args?: SelectSubset<T, ProspectFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProspectPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Prospect.
     * @param {ProspectCreateArgs} args - Arguments to create a Prospect.
     * @example
     * // Create one Prospect
     * const Prospect = await prisma.prospect.create({
     *   data: {
     *     // ... data to create a Prospect
     *   }
     * })
     * 
     */
    create<T extends ProspectCreateArgs>(args: SelectSubset<T, ProspectCreateArgs<ExtArgs>>): Prisma__ProspectClient<$Result.GetResult<Prisma.$ProspectPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Prospects.
     * @param {ProspectCreateManyArgs} args - Arguments to create many Prospects.
     * @example
     * // Create many Prospects
     * const prospect = await prisma.prospect.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProspectCreateManyArgs>(args?: SelectSubset<T, ProspectCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Prospect.
     * @param {ProspectDeleteArgs} args - Arguments to delete one Prospect.
     * @example
     * // Delete one Prospect
     * const Prospect = await prisma.prospect.delete({
     *   where: {
     *     // ... filter to delete one Prospect
     *   }
     * })
     * 
     */
    delete<T extends ProspectDeleteArgs>(args: SelectSubset<T, ProspectDeleteArgs<ExtArgs>>): Prisma__ProspectClient<$Result.GetResult<Prisma.$ProspectPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Prospect.
     * @param {ProspectUpdateArgs} args - Arguments to update one Prospect.
     * @example
     * // Update one Prospect
     * const prospect = await prisma.prospect.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProspectUpdateArgs>(args: SelectSubset<T, ProspectUpdateArgs<ExtArgs>>): Prisma__ProspectClient<$Result.GetResult<Prisma.$ProspectPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Prospects.
     * @param {ProspectDeleteManyArgs} args - Arguments to filter Prospects to delete.
     * @example
     * // Delete a few Prospects
     * const { count } = await prisma.prospect.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProspectDeleteManyArgs>(args?: SelectSubset<T, ProspectDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Prospects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProspectUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Prospects
     * const prospect = await prisma.prospect.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProspectUpdateManyArgs>(args: SelectSubset<T, ProspectUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Prospect.
     * @param {ProspectUpsertArgs} args - Arguments to update or create a Prospect.
     * @example
     * // Update or create a Prospect
     * const prospect = await prisma.prospect.upsert({
     *   create: {
     *     // ... data to create a Prospect
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Prospect we want to update
     *   }
     * })
     */
    upsert<T extends ProspectUpsertArgs>(args: SelectSubset<T, ProspectUpsertArgs<ExtArgs>>): Prisma__ProspectClient<$Result.GetResult<Prisma.$ProspectPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Prospects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProspectCountArgs} args - Arguments to filter Prospects to count.
     * @example
     * // Count the number of Prospects
     * const count = await prisma.prospect.count({
     *   where: {
     *     // ... the filter for the Prospects we want to count
     *   }
     * })
    **/
    count<T extends ProspectCountArgs>(
      args?: Subset<T, ProspectCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProspectCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Prospect.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProspectAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProspectAggregateArgs>(args: Subset<T, ProspectAggregateArgs>): Prisma.PrismaPromise<GetProspectAggregateType<T>>

    /**
     * Group by Prospect.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProspectGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProspectGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProspectGroupByArgs['orderBy'] }
        : { orderBy?: ProspectGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProspectGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProspectGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Prospect model
   */
  readonly fields: ProspectFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Prospect.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProspectClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    DraftPick_DraftPick_prospectIdToProspect<T extends Prospect$DraftPick_DraftPick_prospectIdToProspectArgs<ExtArgs> = {}>(args?: Subset<T, Prospect$DraftPick_DraftPick_prospectIdToProspectArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DraftPickPayload<ExtArgs>, T, "findMany"> | Null>
    Player<T extends Prospect$PlayerArgs<ExtArgs> = {}>(args?: Subset<T, Prospect$PlayerArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "findMany"> | Null>
    DraftPick_Prospect_draftPickIdToDraftPick<T extends Prospect$DraftPick_Prospect_draftPickIdToDraftPickArgs<ExtArgs> = {}>(args?: Subset<T, Prospect$DraftPick_Prospect_draftPickIdToDraftPickArgs<ExtArgs>>): Prisma__DraftPickClient<$Result.GetResult<Prisma.$DraftPickPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    Team<T extends Prospect$TeamArgs<ExtArgs> = {}>(args?: Subset<T, Prospect$TeamArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Prospect model
   */ 
  interface ProspectFieldRefs {
    readonly id: FieldRef<"Prospect", 'Int'>
    readonly firstName: FieldRef<"Prospect", 'String'>
    readonly lastName: FieldRef<"Prospect", 'String'>
    readonly position: FieldRef<"Prospect", 'String'>
    readonly college: FieldRef<"Prospect", 'String'>
    readonly height: FieldRef<"Prospect", 'Float'>
    readonly weight: FieldRef<"Prospect", 'Float'>
    readonly handSize: FieldRef<"Prospect", 'Float'>
    readonly armLength: FieldRef<"Prospect", 'Float'>
    readonly homeCity: FieldRef<"Prospect", 'String'>
    readonly homeState: FieldRef<"Prospect", 'String'>
    readonly fortyTime: FieldRef<"Prospect", 'Float'>
    readonly tenYardSplit: FieldRef<"Prospect", 'Float'>
    readonly verticalLeap: FieldRef<"Prospect", 'Float'>
    readonly broadJump: FieldRef<"Prospect", 'Float'>
    readonly threeCone: FieldRef<"Prospect", 'Float'>
    readonly twentyYardShuttle: FieldRef<"Prospect", 'Float'>
    readonly benchPress: FieldRef<"Prospect", 'Int'>
    readonly drafted: FieldRef<"Prospect", 'Boolean'>
    readonly draftYear: FieldRef<"Prospect", 'Int'>
    readonly teamId: FieldRef<"Prospect", 'Int'>
    readonly draftPickId: FieldRef<"Prospect", 'Int'>
    readonly createdAt: FieldRef<"Prospect", 'DateTime'>
    readonly updatedAt: FieldRef<"Prospect", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Prospect findUnique
   */
  export type ProspectFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prospect
     */
    select?: ProspectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProspectInclude<ExtArgs> | null
    /**
     * Filter, which Prospect to fetch.
     */
    where: ProspectWhereUniqueInput
  }

  /**
   * Prospect findUniqueOrThrow
   */
  export type ProspectFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prospect
     */
    select?: ProspectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProspectInclude<ExtArgs> | null
    /**
     * Filter, which Prospect to fetch.
     */
    where: ProspectWhereUniqueInput
  }

  /**
   * Prospect findFirst
   */
  export type ProspectFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prospect
     */
    select?: ProspectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProspectInclude<ExtArgs> | null
    /**
     * Filter, which Prospect to fetch.
     */
    where?: ProspectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Prospects to fetch.
     */
    orderBy?: ProspectOrderByWithRelationInput | ProspectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Prospects.
     */
    cursor?: ProspectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Prospects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Prospects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Prospects.
     */
    distinct?: ProspectScalarFieldEnum | ProspectScalarFieldEnum[]
  }

  /**
   * Prospect findFirstOrThrow
   */
  export type ProspectFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prospect
     */
    select?: ProspectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProspectInclude<ExtArgs> | null
    /**
     * Filter, which Prospect to fetch.
     */
    where?: ProspectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Prospects to fetch.
     */
    orderBy?: ProspectOrderByWithRelationInput | ProspectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Prospects.
     */
    cursor?: ProspectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Prospects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Prospects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Prospects.
     */
    distinct?: ProspectScalarFieldEnum | ProspectScalarFieldEnum[]
  }

  /**
   * Prospect findMany
   */
  export type ProspectFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prospect
     */
    select?: ProspectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProspectInclude<ExtArgs> | null
    /**
     * Filter, which Prospects to fetch.
     */
    where?: ProspectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Prospects to fetch.
     */
    orderBy?: ProspectOrderByWithRelationInput | ProspectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Prospects.
     */
    cursor?: ProspectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Prospects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Prospects.
     */
    skip?: number
    distinct?: ProspectScalarFieldEnum | ProspectScalarFieldEnum[]
  }

  /**
   * Prospect create
   */
  export type ProspectCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prospect
     */
    select?: ProspectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProspectInclude<ExtArgs> | null
    /**
     * The data needed to create a Prospect.
     */
    data: XOR<ProspectCreateInput, ProspectUncheckedCreateInput>
  }

  /**
   * Prospect createMany
   */
  export type ProspectCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Prospects.
     */
    data: ProspectCreateManyInput | ProspectCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Prospect update
   */
  export type ProspectUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prospect
     */
    select?: ProspectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProspectInclude<ExtArgs> | null
    /**
     * The data needed to update a Prospect.
     */
    data: XOR<ProspectUpdateInput, ProspectUncheckedUpdateInput>
    /**
     * Choose, which Prospect to update.
     */
    where: ProspectWhereUniqueInput
  }

  /**
   * Prospect updateMany
   */
  export type ProspectUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Prospects.
     */
    data: XOR<ProspectUpdateManyMutationInput, ProspectUncheckedUpdateManyInput>
    /**
     * Filter which Prospects to update
     */
    where?: ProspectWhereInput
  }

  /**
   * Prospect upsert
   */
  export type ProspectUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prospect
     */
    select?: ProspectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProspectInclude<ExtArgs> | null
    /**
     * The filter to search for the Prospect to update in case it exists.
     */
    where: ProspectWhereUniqueInput
    /**
     * In case the Prospect found by the `where` argument doesn't exist, create a new Prospect with this data.
     */
    create: XOR<ProspectCreateInput, ProspectUncheckedCreateInput>
    /**
     * In case the Prospect was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProspectUpdateInput, ProspectUncheckedUpdateInput>
  }

  /**
   * Prospect delete
   */
  export type ProspectDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prospect
     */
    select?: ProspectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProspectInclude<ExtArgs> | null
    /**
     * Filter which Prospect to delete.
     */
    where: ProspectWhereUniqueInput
  }

  /**
   * Prospect deleteMany
   */
  export type ProspectDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Prospects to delete
     */
    where?: ProspectWhereInput
  }

  /**
   * Prospect.DraftPick_DraftPick_prospectIdToProspect
   */
  export type Prospect$DraftPick_DraftPick_prospectIdToProspectArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DraftPick
     */
    select?: DraftPickSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DraftPickInclude<ExtArgs> | null
    where?: DraftPickWhereInput
    orderBy?: DraftPickOrderByWithRelationInput | DraftPickOrderByWithRelationInput[]
    cursor?: DraftPickWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DraftPickScalarFieldEnum | DraftPickScalarFieldEnum[]
  }

  /**
   * Prospect.Player
   */
  export type Prospect$PlayerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
    where?: PlayerWhereInput
    orderBy?: PlayerOrderByWithRelationInput | PlayerOrderByWithRelationInput[]
    cursor?: PlayerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PlayerScalarFieldEnum | PlayerScalarFieldEnum[]
  }

  /**
   * Prospect.DraftPick_Prospect_draftPickIdToDraftPick
   */
  export type Prospect$DraftPick_Prospect_draftPickIdToDraftPickArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DraftPick
     */
    select?: DraftPickSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DraftPickInclude<ExtArgs> | null
    where?: DraftPickWhereInput
  }

  /**
   * Prospect.Team
   */
  export type Prospect$TeamArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    where?: TeamWhereInput
  }

  /**
   * Prospect without action
   */
  export type ProspectDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prospect
     */
    select?: ProspectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProspectInclude<ExtArgs> | null
  }


  /**
   * Model Schedule
   */

  export type AggregateSchedule = {
    _count: ScheduleCountAggregateOutputType | null
    _avg: ScheduleAvgAggregateOutputType | null
    _sum: ScheduleSumAggregateOutputType | null
    _min: ScheduleMinAggregateOutputType | null
    _max: ScheduleMaxAggregateOutputType | null
  }

  export type ScheduleAvgAggregateOutputType = {
    id: number | null
    teamId: number | null
    seasonYear: number | null
    oppTeamId: number | null
    scheduleWeek: number | null
    oppTeamScore: number | null
    teamScore: number | null
  }

  export type ScheduleSumAggregateOutputType = {
    id: number | null
    teamId: number | null
    seasonYear: number | null
    oppTeamId: number | null
    scheduleWeek: number | null
    oppTeamScore: number | null
    teamScore: number | null
  }

  export type ScheduleMinAggregateOutputType = {
    id: number | null
    teamId: number | null
    seasonYear: number | null
    oppTeamId: number | null
    oppTeamConference: string | null
    oppTeamDivision: string | null
    scheduleWeek: number | null
    gameDate: Date | null
    gameCity: string | null
    gameStateProvince: string | null
    gameCountry: string | null
    gameLocation: string | null
    wonLostFlag: string | null
    homeOrAway: string | null
    oppTeamScore: number | null
    teamScore: number | null
  }

  export type ScheduleMaxAggregateOutputType = {
    id: number | null
    teamId: number | null
    seasonYear: number | null
    oppTeamId: number | null
    oppTeamConference: string | null
    oppTeamDivision: string | null
    scheduleWeek: number | null
    gameDate: Date | null
    gameCity: string | null
    gameStateProvince: string | null
    gameCountry: string | null
    gameLocation: string | null
    wonLostFlag: string | null
    homeOrAway: string | null
    oppTeamScore: number | null
    teamScore: number | null
  }

  export type ScheduleCountAggregateOutputType = {
    id: number
    teamId: number
    seasonYear: number
    oppTeamId: number
    oppTeamConference: number
    oppTeamDivision: number
    scheduleWeek: number
    gameDate: number
    gameCity: number
    gameStateProvince: number
    gameCountry: number
    gameLocation: number
    wonLostFlag: number
    homeOrAway: number
    oppTeamScore: number
    teamScore: number
    _all: number
  }


  export type ScheduleAvgAggregateInputType = {
    id?: true
    teamId?: true
    seasonYear?: true
    oppTeamId?: true
    scheduleWeek?: true
    oppTeamScore?: true
    teamScore?: true
  }

  export type ScheduleSumAggregateInputType = {
    id?: true
    teamId?: true
    seasonYear?: true
    oppTeamId?: true
    scheduleWeek?: true
    oppTeamScore?: true
    teamScore?: true
  }

  export type ScheduleMinAggregateInputType = {
    id?: true
    teamId?: true
    seasonYear?: true
    oppTeamId?: true
    oppTeamConference?: true
    oppTeamDivision?: true
    scheduleWeek?: true
    gameDate?: true
    gameCity?: true
    gameStateProvince?: true
    gameCountry?: true
    gameLocation?: true
    wonLostFlag?: true
    homeOrAway?: true
    oppTeamScore?: true
    teamScore?: true
  }

  export type ScheduleMaxAggregateInputType = {
    id?: true
    teamId?: true
    seasonYear?: true
    oppTeamId?: true
    oppTeamConference?: true
    oppTeamDivision?: true
    scheduleWeek?: true
    gameDate?: true
    gameCity?: true
    gameStateProvince?: true
    gameCountry?: true
    gameLocation?: true
    wonLostFlag?: true
    homeOrAway?: true
    oppTeamScore?: true
    teamScore?: true
  }

  export type ScheduleCountAggregateInputType = {
    id?: true
    teamId?: true
    seasonYear?: true
    oppTeamId?: true
    oppTeamConference?: true
    oppTeamDivision?: true
    scheduleWeek?: true
    gameDate?: true
    gameCity?: true
    gameStateProvince?: true
    gameCountry?: true
    gameLocation?: true
    wonLostFlag?: true
    homeOrAway?: true
    oppTeamScore?: true
    teamScore?: true
    _all?: true
  }

  export type ScheduleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Schedule to aggregate.
     */
    where?: ScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Schedules to fetch.
     */
    orderBy?: ScheduleOrderByWithRelationInput | ScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Schedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Schedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Schedules
    **/
    _count?: true | ScheduleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ScheduleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ScheduleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ScheduleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ScheduleMaxAggregateInputType
  }

  export type GetScheduleAggregateType<T extends ScheduleAggregateArgs> = {
        [P in keyof T & keyof AggregateSchedule]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSchedule[P]>
      : GetScalarType<T[P], AggregateSchedule[P]>
  }




  export type ScheduleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScheduleWhereInput
    orderBy?: ScheduleOrderByWithAggregationInput | ScheduleOrderByWithAggregationInput[]
    by: ScheduleScalarFieldEnum[] | ScheduleScalarFieldEnum
    having?: ScheduleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ScheduleCountAggregateInputType | true
    _avg?: ScheduleAvgAggregateInputType
    _sum?: ScheduleSumAggregateInputType
    _min?: ScheduleMinAggregateInputType
    _max?: ScheduleMaxAggregateInputType
  }

  export type ScheduleGroupByOutputType = {
    id: number
    teamId: number | null
    seasonYear: number | null
    oppTeamId: number
    oppTeamConference: string | null
    oppTeamDivision: string | null
    scheduleWeek: number | null
    gameDate: Date | null
    gameCity: string | null
    gameStateProvince: string | null
    gameCountry: string | null
    gameLocation: string | null
    wonLostFlag: string | null
    homeOrAway: string | null
    oppTeamScore: number | null
    teamScore: number | null
    _count: ScheduleCountAggregateOutputType | null
    _avg: ScheduleAvgAggregateOutputType | null
    _sum: ScheduleSumAggregateOutputType | null
    _min: ScheduleMinAggregateOutputType | null
    _max: ScheduleMaxAggregateOutputType | null
  }

  type GetScheduleGroupByPayload<T extends ScheduleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ScheduleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ScheduleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ScheduleGroupByOutputType[P]>
            : GetScalarType<T[P], ScheduleGroupByOutputType[P]>
        }
      >
    >


  export type ScheduleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    teamId?: boolean
    seasonYear?: boolean
    oppTeamId?: boolean
    oppTeamConference?: boolean
    oppTeamDivision?: boolean
    scheduleWeek?: boolean
    gameDate?: boolean
    gameCity?: boolean
    gameStateProvince?: boolean
    gameCountry?: boolean
    gameLocation?: boolean
    wonLostFlag?: boolean
    homeOrAway?: boolean
    oppTeamScore?: boolean
    teamScore?: boolean
    Team_Schedule_teamIdToTeam?: boolean | Schedule$Team_Schedule_teamIdToTeamArgs<ExtArgs>
    Team_Schedule_oppTeamIdToTeam?: boolean | TeamDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["schedule"]>


  export type ScheduleSelectScalar = {
    id?: boolean
    teamId?: boolean
    seasonYear?: boolean
    oppTeamId?: boolean
    oppTeamConference?: boolean
    oppTeamDivision?: boolean
    scheduleWeek?: boolean
    gameDate?: boolean
    gameCity?: boolean
    gameStateProvince?: boolean
    gameCountry?: boolean
    gameLocation?: boolean
    wonLostFlag?: boolean
    homeOrAway?: boolean
    oppTeamScore?: boolean
    teamScore?: boolean
  }

  export type ScheduleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Team_Schedule_teamIdToTeam?: boolean | Schedule$Team_Schedule_teamIdToTeamArgs<ExtArgs>
    Team_Schedule_oppTeamIdToTeam?: boolean | TeamDefaultArgs<ExtArgs>
  }

  export type $SchedulePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Schedule"
    objects: {
      Team_Schedule_teamIdToTeam: Prisma.$TeamPayload<ExtArgs> | null
      Team_Schedule_oppTeamIdToTeam: Prisma.$TeamPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      teamId: number | null
      seasonYear: number | null
      oppTeamId: number
      oppTeamConference: string | null
      oppTeamDivision: string | null
      scheduleWeek: number | null
      gameDate: Date | null
      gameCity: string | null
      gameStateProvince: string | null
      gameCountry: string | null
      gameLocation: string | null
      wonLostFlag: string | null
      homeOrAway: string | null
      oppTeamScore: number | null
      teamScore: number | null
    }, ExtArgs["result"]["schedule"]>
    composites: {}
  }

  type ScheduleGetPayload<S extends boolean | null | undefined | ScheduleDefaultArgs> = $Result.GetResult<Prisma.$SchedulePayload, S>

  type ScheduleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ScheduleFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ScheduleCountAggregateInputType | true
    }

  export interface ScheduleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Schedule'], meta: { name: 'Schedule' } }
    /**
     * Find zero or one Schedule that matches the filter.
     * @param {ScheduleFindUniqueArgs} args - Arguments to find a Schedule
     * @example
     * // Get one Schedule
     * const schedule = await prisma.schedule.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ScheduleFindUniqueArgs>(args: SelectSubset<T, ScheduleFindUniqueArgs<ExtArgs>>): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Schedule that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ScheduleFindUniqueOrThrowArgs} args - Arguments to find a Schedule
     * @example
     * // Get one Schedule
     * const schedule = await prisma.schedule.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ScheduleFindUniqueOrThrowArgs>(args: SelectSubset<T, ScheduleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Schedule that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleFindFirstArgs} args - Arguments to find a Schedule
     * @example
     * // Get one Schedule
     * const schedule = await prisma.schedule.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ScheduleFindFirstArgs>(args?: SelectSubset<T, ScheduleFindFirstArgs<ExtArgs>>): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Schedule that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleFindFirstOrThrowArgs} args - Arguments to find a Schedule
     * @example
     * // Get one Schedule
     * const schedule = await prisma.schedule.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ScheduleFindFirstOrThrowArgs>(args?: SelectSubset<T, ScheduleFindFirstOrThrowArgs<ExtArgs>>): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Schedules that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Schedules
     * const schedules = await prisma.schedule.findMany()
     * 
     * // Get first 10 Schedules
     * const schedules = await prisma.schedule.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const scheduleWithIdOnly = await prisma.schedule.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ScheduleFindManyArgs>(args?: SelectSubset<T, ScheduleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Schedule.
     * @param {ScheduleCreateArgs} args - Arguments to create a Schedule.
     * @example
     * // Create one Schedule
     * const Schedule = await prisma.schedule.create({
     *   data: {
     *     // ... data to create a Schedule
     *   }
     * })
     * 
     */
    create<T extends ScheduleCreateArgs>(args: SelectSubset<T, ScheduleCreateArgs<ExtArgs>>): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Schedules.
     * @param {ScheduleCreateManyArgs} args - Arguments to create many Schedules.
     * @example
     * // Create many Schedules
     * const schedule = await prisma.schedule.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ScheduleCreateManyArgs>(args?: SelectSubset<T, ScheduleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Schedule.
     * @param {ScheduleDeleteArgs} args - Arguments to delete one Schedule.
     * @example
     * // Delete one Schedule
     * const Schedule = await prisma.schedule.delete({
     *   where: {
     *     // ... filter to delete one Schedule
     *   }
     * })
     * 
     */
    delete<T extends ScheduleDeleteArgs>(args: SelectSubset<T, ScheduleDeleteArgs<ExtArgs>>): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Schedule.
     * @param {ScheduleUpdateArgs} args - Arguments to update one Schedule.
     * @example
     * // Update one Schedule
     * const schedule = await prisma.schedule.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ScheduleUpdateArgs>(args: SelectSubset<T, ScheduleUpdateArgs<ExtArgs>>): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Schedules.
     * @param {ScheduleDeleteManyArgs} args - Arguments to filter Schedules to delete.
     * @example
     * // Delete a few Schedules
     * const { count } = await prisma.schedule.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ScheduleDeleteManyArgs>(args?: SelectSubset<T, ScheduleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Schedules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Schedules
     * const schedule = await prisma.schedule.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ScheduleUpdateManyArgs>(args: SelectSubset<T, ScheduleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Schedule.
     * @param {ScheduleUpsertArgs} args - Arguments to update or create a Schedule.
     * @example
     * // Update or create a Schedule
     * const schedule = await prisma.schedule.upsert({
     *   create: {
     *     // ... data to create a Schedule
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Schedule we want to update
     *   }
     * })
     */
    upsert<T extends ScheduleUpsertArgs>(args: SelectSubset<T, ScheduleUpsertArgs<ExtArgs>>): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Schedules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleCountArgs} args - Arguments to filter Schedules to count.
     * @example
     * // Count the number of Schedules
     * const count = await prisma.schedule.count({
     *   where: {
     *     // ... the filter for the Schedules we want to count
     *   }
     * })
    **/
    count<T extends ScheduleCountArgs>(
      args?: Subset<T, ScheduleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ScheduleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Schedule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ScheduleAggregateArgs>(args: Subset<T, ScheduleAggregateArgs>): Prisma.PrismaPromise<GetScheduleAggregateType<T>>

    /**
     * Group by Schedule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ScheduleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ScheduleGroupByArgs['orderBy'] }
        : { orderBy?: ScheduleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ScheduleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetScheduleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Schedule model
   */
  readonly fields: ScheduleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Schedule.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ScheduleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Team_Schedule_teamIdToTeam<T extends Schedule$Team_Schedule_teamIdToTeamArgs<ExtArgs> = {}>(args?: Subset<T, Schedule$Team_Schedule_teamIdToTeamArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    Team_Schedule_oppTeamIdToTeam<T extends TeamDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TeamDefaultArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Schedule model
   */ 
  interface ScheduleFieldRefs {
    readonly id: FieldRef<"Schedule", 'Int'>
    readonly teamId: FieldRef<"Schedule", 'Int'>
    readonly seasonYear: FieldRef<"Schedule", 'Int'>
    readonly oppTeamId: FieldRef<"Schedule", 'Int'>
    readonly oppTeamConference: FieldRef<"Schedule", 'String'>
    readonly oppTeamDivision: FieldRef<"Schedule", 'String'>
    readonly scheduleWeek: FieldRef<"Schedule", 'Int'>
    readonly gameDate: FieldRef<"Schedule", 'DateTime'>
    readonly gameCity: FieldRef<"Schedule", 'String'>
    readonly gameStateProvince: FieldRef<"Schedule", 'String'>
    readonly gameCountry: FieldRef<"Schedule", 'String'>
    readonly gameLocation: FieldRef<"Schedule", 'String'>
    readonly wonLostFlag: FieldRef<"Schedule", 'String'>
    readonly homeOrAway: FieldRef<"Schedule", 'String'>
    readonly oppTeamScore: FieldRef<"Schedule", 'Int'>
    readonly teamScore: FieldRef<"Schedule", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Schedule findUnique
   */
  export type ScheduleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * Filter, which Schedule to fetch.
     */
    where: ScheduleWhereUniqueInput
  }

  /**
   * Schedule findUniqueOrThrow
   */
  export type ScheduleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * Filter, which Schedule to fetch.
     */
    where: ScheduleWhereUniqueInput
  }

  /**
   * Schedule findFirst
   */
  export type ScheduleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * Filter, which Schedule to fetch.
     */
    where?: ScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Schedules to fetch.
     */
    orderBy?: ScheduleOrderByWithRelationInput | ScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Schedules.
     */
    cursor?: ScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Schedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Schedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Schedules.
     */
    distinct?: ScheduleScalarFieldEnum | ScheduleScalarFieldEnum[]
  }

  /**
   * Schedule findFirstOrThrow
   */
  export type ScheduleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * Filter, which Schedule to fetch.
     */
    where?: ScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Schedules to fetch.
     */
    orderBy?: ScheduleOrderByWithRelationInput | ScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Schedules.
     */
    cursor?: ScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Schedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Schedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Schedules.
     */
    distinct?: ScheduleScalarFieldEnum | ScheduleScalarFieldEnum[]
  }

  /**
   * Schedule findMany
   */
  export type ScheduleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * Filter, which Schedules to fetch.
     */
    where?: ScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Schedules to fetch.
     */
    orderBy?: ScheduleOrderByWithRelationInput | ScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Schedules.
     */
    cursor?: ScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Schedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Schedules.
     */
    skip?: number
    distinct?: ScheduleScalarFieldEnum | ScheduleScalarFieldEnum[]
  }

  /**
   * Schedule create
   */
  export type ScheduleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * The data needed to create a Schedule.
     */
    data: XOR<ScheduleCreateInput, ScheduleUncheckedCreateInput>
  }

  /**
   * Schedule createMany
   */
  export type ScheduleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Schedules.
     */
    data: ScheduleCreateManyInput | ScheduleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Schedule update
   */
  export type ScheduleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * The data needed to update a Schedule.
     */
    data: XOR<ScheduleUpdateInput, ScheduleUncheckedUpdateInput>
    /**
     * Choose, which Schedule to update.
     */
    where: ScheduleWhereUniqueInput
  }

  /**
   * Schedule updateMany
   */
  export type ScheduleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Schedules.
     */
    data: XOR<ScheduleUpdateManyMutationInput, ScheduleUncheckedUpdateManyInput>
    /**
     * Filter which Schedules to update
     */
    where?: ScheduleWhereInput
  }

  /**
   * Schedule upsert
   */
  export type ScheduleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * The filter to search for the Schedule to update in case it exists.
     */
    where: ScheduleWhereUniqueInput
    /**
     * In case the Schedule found by the `where` argument doesn't exist, create a new Schedule with this data.
     */
    create: XOR<ScheduleCreateInput, ScheduleUncheckedCreateInput>
    /**
     * In case the Schedule was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ScheduleUpdateInput, ScheduleUncheckedUpdateInput>
  }

  /**
   * Schedule delete
   */
  export type ScheduleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * Filter which Schedule to delete.
     */
    where: ScheduleWhereUniqueInput
  }

  /**
   * Schedule deleteMany
   */
  export type ScheduleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Schedules to delete
     */
    where?: ScheduleWhereInput
  }

  /**
   * Schedule.Team_Schedule_teamIdToTeam
   */
  export type Schedule$Team_Schedule_teamIdToTeamArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    where?: TeamWhereInput
  }

  /**
   * Schedule without action
   */
  export type ScheduleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
  }


  /**
   * Model Team
   */

  export type AggregateTeam = {
    _count: TeamCountAggregateOutputType | null
    _avg: TeamAvgAggregateOutputType | null
    _sum: TeamSumAggregateOutputType | null
    _min: TeamMinAggregateOutputType | null
    _max: TeamMaxAggregateOutputType | null
  }

  export type TeamAvgAggregateOutputType = {
    id: number | null
    scheduleId: number | null
  }

  export type TeamSumAggregateOutputType = {
    id: number | null
    scheduleId: number | null
  }

  export type TeamMinAggregateOutputType = {
    id: number | null
    name: string | null
    city: string | null
    state: string | null
    conference: string | null
    division: string | null
    stadium: string | null
    scheduleId: number | null
  }

  export type TeamMaxAggregateOutputType = {
    id: number | null
    name: string | null
    city: string | null
    state: string | null
    conference: string | null
    division: string | null
    stadium: string | null
    scheduleId: number | null
  }

  export type TeamCountAggregateOutputType = {
    id: number
    name: number
    city: number
    state: number
    conference: number
    division: number
    stadium: number
    scheduleId: number
    _all: number
  }


  export type TeamAvgAggregateInputType = {
    id?: true
    scheduleId?: true
  }

  export type TeamSumAggregateInputType = {
    id?: true
    scheduleId?: true
  }

  export type TeamMinAggregateInputType = {
    id?: true
    name?: true
    city?: true
    state?: true
    conference?: true
    division?: true
    stadium?: true
    scheduleId?: true
  }

  export type TeamMaxAggregateInputType = {
    id?: true
    name?: true
    city?: true
    state?: true
    conference?: true
    division?: true
    stadium?: true
    scheduleId?: true
  }

  export type TeamCountAggregateInputType = {
    id?: true
    name?: true
    city?: true
    state?: true
    conference?: true
    division?: true
    stadium?: true
    scheduleId?: true
    _all?: true
  }

  export type TeamAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Team to aggregate.
     */
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Teams
    **/
    _count?: true | TeamCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TeamAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TeamSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TeamMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TeamMaxAggregateInputType
  }

  export type GetTeamAggregateType<T extends TeamAggregateArgs> = {
        [P in keyof T & keyof AggregateTeam]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTeam[P]>
      : GetScalarType<T[P], AggregateTeam[P]>
  }




  export type TeamGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeamWhereInput
    orderBy?: TeamOrderByWithAggregationInput | TeamOrderByWithAggregationInput[]
    by: TeamScalarFieldEnum[] | TeamScalarFieldEnum
    having?: TeamScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TeamCountAggregateInputType | true
    _avg?: TeamAvgAggregateInputType
    _sum?: TeamSumAggregateInputType
    _min?: TeamMinAggregateInputType
    _max?: TeamMaxAggregateInputType
  }

  export type TeamGroupByOutputType = {
    id: number
    name: string
    city: string | null
    state: string | null
    conference: string | null
    division: string | null
    stadium: string | null
    scheduleId: number | null
    _count: TeamCountAggregateOutputType | null
    _avg: TeamAvgAggregateOutputType | null
    _sum: TeamSumAggregateOutputType | null
    _min: TeamMinAggregateOutputType | null
    _max: TeamMaxAggregateOutputType | null
  }

  type GetTeamGroupByPayload<T extends TeamGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TeamGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TeamGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TeamGroupByOutputType[P]>
            : GetScalarType<T[P], TeamGroupByOutputType[P]>
        }
      >
    >


  export type TeamSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    city?: boolean
    state?: boolean
    conference?: boolean
    division?: boolean
    stadium?: boolean
    scheduleId?: boolean
    DraftPick?: boolean | Team$DraftPickArgs<ExtArgs>
    PlayerTeam?: boolean | Team$PlayerTeamArgs<ExtArgs>
    PostSeasonResult?: boolean | Team$PostSeasonResultArgs<ExtArgs>
    Prospect?: boolean | Team$ProspectArgs<ExtArgs>
    Schedule_Schedule_teamIdToTeam?: boolean | Team$Schedule_Schedule_teamIdToTeamArgs<ExtArgs>
    Schedule_Schedule_oppTeamIdToTeam?: boolean | Team$Schedule_Schedule_oppTeamIdToTeamArgs<ExtArgs>
    TeamNeed?: boolean | Team$TeamNeedArgs<ExtArgs>
    _count?: boolean | TeamCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["team"]>


  export type TeamSelectScalar = {
    id?: boolean
    name?: boolean
    city?: boolean
    state?: boolean
    conference?: boolean
    division?: boolean
    stadium?: boolean
    scheduleId?: boolean
  }

  export type TeamInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    DraftPick?: boolean | Team$DraftPickArgs<ExtArgs>
    PlayerTeam?: boolean | Team$PlayerTeamArgs<ExtArgs>
    PostSeasonResult?: boolean | Team$PostSeasonResultArgs<ExtArgs>
    Prospect?: boolean | Team$ProspectArgs<ExtArgs>
    Schedule_Schedule_teamIdToTeam?: boolean | Team$Schedule_Schedule_teamIdToTeamArgs<ExtArgs>
    Schedule_Schedule_oppTeamIdToTeam?: boolean | Team$Schedule_Schedule_oppTeamIdToTeamArgs<ExtArgs>
    TeamNeed?: boolean | Team$TeamNeedArgs<ExtArgs>
    _count?: boolean | TeamCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $TeamPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Team"
    objects: {
      DraftPick: Prisma.$DraftPickPayload<ExtArgs>[]
      PlayerTeam: Prisma.$PlayerTeamPayload<ExtArgs>[]
      PostSeasonResult: Prisma.$PostSeasonResultPayload<ExtArgs>[]
      Prospect: Prisma.$ProspectPayload<ExtArgs>[]
      Schedule_Schedule_teamIdToTeam: Prisma.$SchedulePayload<ExtArgs>[]
      Schedule_Schedule_oppTeamIdToTeam: Prisma.$SchedulePayload<ExtArgs>[]
      TeamNeed: Prisma.$TeamNeedPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      city: string | null
      state: string | null
      conference: string | null
      division: string | null
      stadium: string | null
      scheduleId: number | null
    }, ExtArgs["result"]["team"]>
    composites: {}
  }

  type TeamGetPayload<S extends boolean | null | undefined | TeamDefaultArgs> = $Result.GetResult<Prisma.$TeamPayload, S>

  type TeamCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TeamFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TeamCountAggregateInputType | true
    }

  export interface TeamDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Team'], meta: { name: 'Team' } }
    /**
     * Find zero or one Team that matches the filter.
     * @param {TeamFindUniqueArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TeamFindUniqueArgs>(args: SelectSubset<T, TeamFindUniqueArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Team that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TeamFindUniqueOrThrowArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TeamFindUniqueOrThrowArgs>(args: SelectSubset<T, TeamFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Team that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamFindFirstArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TeamFindFirstArgs>(args?: SelectSubset<T, TeamFindFirstArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Team that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamFindFirstOrThrowArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TeamFindFirstOrThrowArgs>(args?: SelectSubset<T, TeamFindFirstOrThrowArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Teams that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Teams
     * const teams = await prisma.team.findMany()
     * 
     * // Get first 10 Teams
     * const teams = await prisma.team.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const teamWithIdOnly = await prisma.team.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TeamFindManyArgs>(args?: SelectSubset<T, TeamFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Team.
     * @param {TeamCreateArgs} args - Arguments to create a Team.
     * @example
     * // Create one Team
     * const Team = await prisma.team.create({
     *   data: {
     *     // ... data to create a Team
     *   }
     * })
     * 
     */
    create<T extends TeamCreateArgs>(args: SelectSubset<T, TeamCreateArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Teams.
     * @param {TeamCreateManyArgs} args - Arguments to create many Teams.
     * @example
     * // Create many Teams
     * const team = await prisma.team.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TeamCreateManyArgs>(args?: SelectSubset<T, TeamCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Team.
     * @param {TeamDeleteArgs} args - Arguments to delete one Team.
     * @example
     * // Delete one Team
     * const Team = await prisma.team.delete({
     *   where: {
     *     // ... filter to delete one Team
     *   }
     * })
     * 
     */
    delete<T extends TeamDeleteArgs>(args: SelectSubset<T, TeamDeleteArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Team.
     * @param {TeamUpdateArgs} args - Arguments to update one Team.
     * @example
     * // Update one Team
     * const team = await prisma.team.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TeamUpdateArgs>(args: SelectSubset<T, TeamUpdateArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Teams.
     * @param {TeamDeleteManyArgs} args - Arguments to filter Teams to delete.
     * @example
     * // Delete a few Teams
     * const { count } = await prisma.team.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TeamDeleteManyArgs>(args?: SelectSubset<T, TeamDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Teams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Teams
     * const team = await prisma.team.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TeamUpdateManyArgs>(args: SelectSubset<T, TeamUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Team.
     * @param {TeamUpsertArgs} args - Arguments to update or create a Team.
     * @example
     * // Update or create a Team
     * const team = await prisma.team.upsert({
     *   create: {
     *     // ... data to create a Team
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Team we want to update
     *   }
     * })
     */
    upsert<T extends TeamUpsertArgs>(args: SelectSubset<T, TeamUpsertArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Teams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamCountArgs} args - Arguments to filter Teams to count.
     * @example
     * // Count the number of Teams
     * const count = await prisma.team.count({
     *   where: {
     *     // ... the filter for the Teams we want to count
     *   }
     * })
    **/
    count<T extends TeamCountArgs>(
      args?: Subset<T, TeamCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TeamCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Team.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TeamAggregateArgs>(args: Subset<T, TeamAggregateArgs>): Prisma.PrismaPromise<GetTeamAggregateType<T>>

    /**
     * Group by Team.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TeamGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TeamGroupByArgs['orderBy'] }
        : { orderBy?: TeamGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TeamGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTeamGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Team model
   */
  readonly fields: TeamFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Team.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TeamClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    DraftPick<T extends Team$DraftPickArgs<ExtArgs> = {}>(args?: Subset<T, Team$DraftPickArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DraftPickPayload<ExtArgs>, T, "findMany"> | Null>
    PlayerTeam<T extends Team$PlayerTeamArgs<ExtArgs> = {}>(args?: Subset<T, Team$PlayerTeamArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlayerTeamPayload<ExtArgs>, T, "findMany"> | Null>
    PostSeasonResult<T extends Team$PostSeasonResultArgs<ExtArgs> = {}>(args?: Subset<T, Team$PostSeasonResultArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostSeasonResultPayload<ExtArgs>, T, "findMany"> | Null>
    Prospect<T extends Team$ProspectArgs<ExtArgs> = {}>(args?: Subset<T, Team$ProspectArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProspectPayload<ExtArgs>, T, "findMany"> | Null>
    Schedule_Schedule_teamIdToTeam<T extends Team$Schedule_Schedule_teamIdToTeamArgs<ExtArgs> = {}>(args?: Subset<T, Team$Schedule_Schedule_teamIdToTeamArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "findMany"> | Null>
    Schedule_Schedule_oppTeamIdToTeam<T extends Team$Schedule_Schedule_oppTeamIdToTeamArgs<ExtArgs> = {}>(args?: Subset<T, Team$Schedule_Schedule_oppTeamIdToTeamArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "findMany"> | Null>
    TeamNeed<T extends Team$TeamNeedArgs<ExtArgs> = {}>(args?: Subset<T, Team$TeamNeedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamNeedPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Team model
   */ 
  interface TeamFieldRefs {
    readonly id: FieldRef<"Team", 'Int'>
    readonly name: FieldRef<"Team", 'String'>
    readonly city: FieldRef<"Team", 'String'>
    readonly state: FieldRef<"Team", 'String'>
    readonly conference: FieldRef<"Team", 'String'>
    readonly division: FieldRef<"Team", 'String'>
    readonly stadium: FieldRef<"Team", 'String'>
    readonly scheduleId: FieldRef<"Team", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Team findUnique
   */
  export type TeamFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Team to fetch.
     */
    where: TeamWhereUniqueInput
  }

  /**
   * Team findUniqueOrThrow
   */
  export type TeamFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Team to fetch.
     */
    where: TeamWhereUniqueInput
  }

  /**
   * Team findFirst
   */
  export type TeamFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Team to fetch.
     */
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Teams.
     */
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Teams.
     */
    distinct?: TeamScalarFieldEnum | TeamScalarFieldEnum[]
  }

  /**
   * Team findFirstOrThrow
   */
  export type TeamFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Team to fetch.
     */
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Teams.
     */
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Teams.
     */
    distinct?: TeamScalarFieldEnum | TeamScalarFieldEnum[]
  }

  /**
   * Team findMany
   */
  export type TeamFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Teams to fetch.
     */
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Teams.
     */
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    distinct?: TeamScalarFieldEnum | TeamScalarFieldEnum[]
  }

  /**
   * Team create
   */
  export type TeamCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * The data needed to create a Team.
     */
    data: XOR<TeamCreateInput, TeamUncheckedCreateInput>
  }

  /**
   * Team createMany
   */
  export type TeamCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Teams.
     */
    data: TeamCreateManyInput | TeamCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Team update
   */
  export type TeamUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * The data needed to update a Team.
     */
    data: XOR<TeamUpdateInput, TeamUncheckedUpdateInput>
    /**
     * Choose, which Team to update.
     */
    where: TeamWhereUniqueInput
  }

  /**
   * Team updateMany
   */
  export type TeamUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Teams.
     */
    data: XOR<TeamUpdateManyMutationInput, TeamUncheckedUpdateManyInput>
    /**
     * Filter which Teams to update
     */
    where?: TeamWhereInput
  }

  /**
   * Team upsert
   */
  export type TeamUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * The filter to search for the Team to update in case it exists.
     */
    where: TeamWhereUniqueInput
    /**
     * In case the Team found by the `where` argument doesn't exist, create a new Team with this data.
     */
    create: XOR<TeamCreateInput, TeamUncheckedCreateInput>
    /**
     * In case the Team was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TeamUpdateInput, TeamUncheckedUpdateInput>
  }

  /**
   * Team delete
   */
  export type TeamDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter which Team to delete.
     */
    where: TeamWhereUniqueInput
  }

  /**
   * Team deleteMany
   */
  export type TeamDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Teams to delete
     */
    where?: TeamWhereInput
  }

  /**
   * Team.DraftPick
   */
  export type Team$DraftPickArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DraftPick
     */
    select?: DraftPickSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DraftPickInclude<ExtArgs> | null
    where?: DraftPickWhereInput
    orderBy?: DraftPickOrderByWithRelationInput | DraftPickOrderByWithRelationInput[]
    cursor?: DraftPickWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DraftPickScalarFieldEnum | DraftPickScalarFieldEnum[]
  }

  /**
   * Team.PlayerTeam
   */
  export type Team$PlayerTeamArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerTeam
     */
    select?: PlayerTeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerTeamInclude<ExtArgs> | null
    where?: PlayerTeamWhereInput
    orderBy?: PlayerTeamOrderByWithRelationInput | PlayerTeamOrderByWithRelationInput[]
    cursor?: PlayerTeamWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PlayerTeamScalarFieldEnum | PlayerTeamScalarFieldEnum[]
  }

  /**
   * Team.PostSeasonResult
   */
  export type Team$PostSeasonResultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostSeasonResult
     */
    select?: PostSeasonResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostSeasonResultInclude<ExtArgs> | null
    where?: PostSeasonResultWhereInput
    orderBy?: PostSeasonResultOrderByWithRelationInput | PostSeasonResultOrderByWithRelationInput[]
    cursor?: PostSeasonResultWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PostSeasonResultScalarFieldEnum | PostSeasonResultScalarFieldEnum[]
  }

  /**
   * Team.Prospect
   */
  export type Team$ProspectArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prospect
     */
    select?: ProspectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProspectInclude<ExtArgs> | null
    where?: ProspectWhereInput
    orderBy?: ProspectOrderByWithRelationInput | ProspectOrderByWithRelationInput[]
    cursor?: ProspectWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProspectScalarFieldEnum | ProspectScalarFieldEnum[]
  }

  /**
   * Team.Schedule_Schedule_teamIdToTeam
   */
  export type Team$Schedule_Schedule_teamIdToTeamArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    where?: ScheduleWhereInput
    orderBy?: ScheduleOrderByWithRelationInput | ScheduleOrderByWithRelationInput[]
    cursor?: ScheduleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ScheduleScalarFieldEnum | ScheduleScalarFieldEnum[]
  }

  /**
   * Team.Schedule_Schedule_oppTeamIdToTeam
   */
  export type Team$Schedule_Schedule_oppTeamIdToTeamArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    where?: ScheduleWhereInput
    orderBy?: ScheduleOrderByWithRelationInput | ScheduleOrderByWithRelationInput[]
    cursor?: ScheduleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ScheduleScalarFieldEnum | ScheduleScalarFieldEnum[]
  }

  /**
   * Team.TeamNeed
   */
  export type Team$TeamNeedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamNeed
     */
    select?: TeamNeedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamNeedInclude<ExtArgs> | null
    where?: TeamNeedWhereInput
    orderBy?: TeamNeedOrderByWithRelationInput | TeamNeedOrderByWithRelationInput[]
    cursor?: TeamNeedWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TeamNeedScalarFieldEnum | TeamNeedScalarFieldEnum[]
  }

  /**
   * Team without action
   */
  export type TeamDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
  }


  /**
   * Model TeamNeed
   */

  export type AggregateTeamNeed = {
    _count: TeamNeedCountAggregateOutputType | null
    _avg: TeamNeedAvgAggregateOutputType | null
    _sum: TeamNeedSumAggregateOutputType | null
    _min: TeamNeedMinAggregateOutputType | null
    _max: TeamNeedMaxAggregateOutputType | null
  }

  export type TeamNeedAvgAggregateOutputType = {
    id: number | null
    teamId: number | null
    priority: number | null
    draftYear: number | null
  }

  export type TeamNeedSumAggregateOutputType = {
    id: number | null
    teamId: number | null
    priority: number | null
    draftYear: number | null
  }

  export type TeamNeedMinAggregateOutputType = {
    id: number | null
    teamId: number | null
    position: string | null
    priority: number | null
    createdAt: Date | null
    updatedAt: Date | null
    draftYear: number | null
  }

  export type TeamNeedMaxAggregateOutputType = {
    id: number | null
    teamId: number | null
    position: string | null
    priority: number | null
    createdAt: Date | null
    updatedAt: Date | null
    draftYear: number | null
  }

  export type TeamNeedCountAggregateOutputType = {
    id: number
    teamId: number
    position: number
    priority: number
    createdAt: number
    updatedAt: number
    draftYear: number
    _all: number
  }


  export type TeamNeedAvgAggregateInputType = {
    id?: true
    teamId?: true
    priority?: true
    draftYear?: true
  }

  export type TeamNeedSumAggregateInputType = {
    id?: true
    teamId?: true
    priority?: true
    draftYear?: true
  }

  export type TeamNeedMinAggregateInputType = {
    id?: true
    teamId?: true
    position?: true
    priority?: true
    createdAt?: true
    updatedAt?: true
    draftYear?: true
  }

  export type TeamNeedMaxAggregateInputType = {
    id?: true
    teamId?: true
    position?: true
    priority?: true
    createdAt?: true
    updatedAt?: true
    draftYear?: true
  }

  export type TeamNeedCountAggregateInputType = {
    id?: true
    teamId?: true
    position?: true
    priority?: true
    createdAt?: true
    updatedAt?: true
    draftYear?: true
    _all?: true
  }

  export type TeamNeedAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TeamNeed to aggregate.
     */
    where?: TeamNeedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeamNeeds to fetch.
     */
    orderBy?: TeamNeedOrderByWithRelationInput | TeamNeedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TeamNeedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeamNeeds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeamNeeds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TeamNeeds
    **/
    _count?: true | TeamNeedCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TeamNeedAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TeamNeedSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TeamNeedMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TeamNeedMaxAggregateInputType
  }

  export type GetTeamNeedAggregateType<T extends TeamNeedAggregateArgs> = {
        [P in keyof T & keyof AggregateTeamNeed]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTeamNeed[P]>
      : GetScalarType<T[P], AggregateTeamNeed[P]>
  }




  export type TeamNeedGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeamNeedWhereInput
    orderBy?: TeamNeedOrderByWithAggregationInput | TeamNeedOrderByWithAggregationInput[]
    by: TeamNeedScalarFieldEnum[] | TeamNeedScalarFieldEnum
    having?: TeamNeedScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TeamNeedCountAggregateInputType | true
    _avg?: TeamNeedAvgAggregateInputType
    _sum?: TeamNeedSumAggregateInputType
    _min?: TeamNeedMinAggregateInputType
    _max?: TeamNeedMaxAggregateInputType
  }

  export type TeamNeedGroupByOutputType = {
    id: number
    teamId: number
    position: string
    priority: number
    createdAt: Date | null
    updatedAt: Date | null
    draftYear: number | null
    _count: TeamNeedCountAggregateOutputType | null
    _avg: TeamNeedAvgAggregateOutputType | null
    _sum: TeamNeedSumAggregateOutputType | null
    _min: TeamNeedMinAggregateOutputType | null
    _max: TeamNeedMaxAggregateOutputType | null
  }

  type GetTeamNeedGroupByPayload<T extends TeamNeedGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TeamNeedGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TeamNeedGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TeamNeedGroupByOutputType[P]>
            : GetScalarType<T[P], TeamNeedGroupByOutputType[P]>
        }
      >
    >


  export type TeamNeedSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    teamId?: boolean
    position?: boolean
    priority?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    draftYear?: boolean
    Team?: boolean | TeamDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["teamNeed"]>


  export type TeamNeedSelectScalar = {
    id?: boolean
    teamId?: boolean
    position?: boolean
    priority?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    draftYear?: boolean
  }

  export type TeamNeedInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Team?: boolean | TeamDefaultArgs<ExtArgs>
  }

  export type $TeamNeedPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TeamNeed"
    objects: {
      Team: Prisma.$TeamPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      teamId: number
      position: string
      priority: number
      createdAt: Date | null
      updatedAt: Date | null
      draftYear: number | null
    }, ExtArgs["result"]["teamNeed"]>
    composites: {}
  }

  type TeamNeedGetPayload<S extends boolean | null | undefined | TeamNeedDefaultArgs> = $Result.GetResult<Prisma.$TeamNeedPayload, S>

  type TeamNeedCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TeamNeedFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TeamNeedCountAggregateInputType | true
    }

  export interface TeamNeedDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TeamNeed'], meta: { name: 'TeamNeed' } }
    /**
     * Find zero or one TeamNeed that matches the filter.
     * @param {TeamNeedFindUniqueArgs} args - Arguments to find a TeamNeed
     * @example
     * // Get one TeamNeed
     * const teamNeed = await prisma.teamNeed.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TeamNeedFindUniqueArgs>(args: SelectSubset<T, TeamNeedFindUniqueArgs<ExtArgs>>): Prisma__TeamNeedClient<$Result.GetResult<Prisma.$TeamNeedPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one TeamNeed that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TeamNeedFindUniqueOrThrowArgs} args - Arguments to find a TeamNeed
     * @example
     * // Get one TeamNeed
     * const teamNeed = await prisma.teamNeed.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TeamNeedFindUniqueOrThrowArgs>(args: SelectSubset<T, TeamNeedFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TeamNeedClient<$Result.GetResult<Prisma.$TeamNeedPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first TeamNeed that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamNeedFindFirstArgs} args - Arguments to find a TeamNeed
     * @example
     * // Get one TeamNeed
     * const teamNeed = await prisma.teamNeed.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TeamNeedFindFirstArgs>(args?: SelectSubset<T, TeamNeedFindFirstArgs<ExtArgs>>): Prisma__TeamNeedClient<$Result.GetResult<Prisma.$TeamNeedPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first TeamNeed that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamNeedFindFirstOrThrowArgs} args - Arguments to find a TeamNeed
     * @example
     * // Get one TeamNeed
     * const teamNeed = await prisma.teamNeed.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TeamNeedFindFirstOrThrowArgs>(args?: SelectSubset<T, TeamNeedFindFirstOrThrowArgs<ExtArgs>>): Prisma__TeamNeedClient<$Result.GetResult<Prisma.$TeamNeedPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more TeamNeeds that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamNeedFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TeamNeeds
     * const teamNeeds = await prisma.teamNeed.findMany()
     * 
     * // Get first 10 TeamNeeds
     * const teamNeeds = await prisma.teamNeed.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const teamNeedWithIdOnly = await prisma.teamNeed.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TeamNeedFindManyArgs>(args?: SelectSubset<T, TeamNeedFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamNeedPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a TeamNeed.
     * @param {TeamNeedCreateArgs} args - Arguments to create a TeamNeed.
     * @example
     * // Create one TeamNeed
     * const TeamNeed = await prisma.teamNeed.create({
     *   data: {
     *     // ... data to create a TeamNeed
     *   }
     * })
     * 
     */
    create<T extends TeamNeedCreateArgs>(args: SelectSubset<T, TeamNeedCreateArgs<ExtArgs>>): Prisma__TeamNeedClient<$Result.GetResult<Prisma.$TeamNeedPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many TeamNeeds.
     * @param {TeamNeedCreateManyArgs} args - Arguments to create many TeamNeeds.
     * @example
     * // Create many TeamNeeds
     * const teamNeed = await prisma.teamNeed.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TeamNeedCreateManyArgs>(args?: SelectSubset<T, TeamNeedCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TeamNeed.
     * @param {TeamNeedDeleteArgs} args - Arguments to delete one TeamNeed.
     * @example
     * // Delete one TeamNeed
     * const TeamNeed = await prisma.teamNeed.delete({
     *   where: {
     *     // ... filter to delete one TeamNeed
     *   }
     * })
     * 
     */
    delete<T extends TeamNeedDeleteArgs>(args: SelectSubset<T, TeamNeedDeleteArgs<ExtArgs>>): Prisma__TeamNeedClient<$Result.GetResult<Prisma.$TeamNeedPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one TeamNeed.
     * @param {TeamNeedUpdateArgs} args - Arguments to update one TeamNeed.
     * @example
     * // Update one TeamNeed
     * const teamNeed = await prisma.teamNeed.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TeamNeedUpdateArgs>(args: SelectSubset<T, TeamNeedUpdateArgs<ExtArgs>>): Prisma__TeamNeedClient<$Result.GetResult<Prisma.$TeamNeedPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more TeamNeeds.
     * @param {TeamNeedDeleteManyArgs} args - Arguments to filter TeamNeeds to delete.
     * @example
     * // Delete a few TeamNeeds
     * const { count } = await prisma.teamNeed.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TeamNeedDeleteManyArgs>(args?: SelectSubset<T, TeamNeedDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TeamNeeds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamNeedUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TeamNeeds
     * const teamNeed = await prisma.teamNeed.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TeamNeedUpdateManyArgs>(args: SelectSubset<T, TeamNeedUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TeamNeed.
     * @param {TeamNeedUpsertArgs} args - Arguments to update or create a TeamNeed.
     * @example
     * // Update or create a TeamNeed
     * const teamNeed = await prisma.teamNeed.upsert({
     *   create: {
     *     // ... data to create a TeamNeed
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TeamNeed we want to update
     *   }
     * })
     */
    upsert<T extends TeamNeedUpsertArgs>(args: SelectSubset<T, TeamNeedUpsertArgs<ExtArgs>>): Prisma__TeamNeedClient<$Result.GetResult<Prisma.$TeamNeedPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of TeamNeeds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamNeedCountArgs} args - Arguments to filter TeamNeeds to count.
     * @example
     * // Count the number of TeamNeeds
     * const count = await prisma.teamNeed.count({
     *   where: {
     *     // ... the filter for the TeamNeeds we want to count
     *   }
     * })
    **/
    count<T extends TeamNeedCountArgs>(
      args?: Subset<T, TeamNeedCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TeamNeedCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TeamNeed.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamNeedAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TeamNeedAggregateArgs>(args: Subset<T, TeamNeedAggregateArgs>): Prisma.PrismaPromise<GetTeamNeedAggregateType<T>>

    /**
     * Group by TeamNeed.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamNeedGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TeamNeedGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TeamNeedGroupByArgs['orderBy'] }
        : { orderBy?: TeamNeedGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TeamNeedGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTeamNeedGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TeamNeed model
   */
  readonly fields: TeamNeedFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TeamNeed.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TeamNeedClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Team<T extends TeamDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TeamDefaultArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TeamNeed model
   */ 
  interface TeamNeedFieldRefs {
    readonly id: FieldRef<"TeamNeed", 'Int'>
    readonly teamId: FieldRef<"TeamNeed", 'Int'>
    readonly position: FieldRef<"TeamNeed", 'String'>
    readonly priority: FieldRef<"TeamNeed", 'Int'>
    readonly createdAt: FieldRef<"TeamNeed", 'DateTime'>
    readonly updatedAt: FieldRef<"TeamNeed", 'DateTime'>
    readonly draftYear: FieldRef<"TeamNeed", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * TeamNeed findUnique
   */
  export type TeamNeedFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamNeed
     */
    select?: TeamNeedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamNeedInclude<ExtArgs> | null
    /**
     * Filter, which TeamNeed to fetch.
     */
    where: TeamNeedWhereUniqueInput
  }

  /**
   * TeamNeed findUniqueOrThrow
   */
  export type TeamNeedFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamNeed
     */
    select?: TeamNeedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamNeedInclude<ExtArgs> | null
    /**
     * Filter, which TeamNeed to fetch.
     */
    where: TeamNeedWhereUniqueInput
  }

  /**
   * TeamNeed findFirst
   */
  export type TeamNeedFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamNeed
     */
    select?: TeamNeedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamNeedInclude<ExtArgs> | null
    /**
     * Filter, which TeamNeed to fetch.
     */
    where?: TeamNeedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeamNeeds to fetch.
     */
    orderBy?: TeamNeedOrderByWithRelationInput | TeamNeedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TeamNeeds.
     */
    cursor?: TeamNeedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeamNeeds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeamNeeds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TeamNeeds.
     */
    distinct?: TeamNeedScalarFieldEnum | TeamNeedScalarFieldEnum[]
  }

  /**
   * TeamNeed findFirstOrThrow
   */
  export type TeamNeedFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamNeed
     */
    select?: TeamNeedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamNeedInclude<ExtArgs> | null
    /**
     * Filter, which TeamNeed to fetch.
     */
    where?: TeamNeedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeamNeeds to fetch.
     */
    orderBy?: TeamNeedOrderByWithRelationInput | TeamNeedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TeamNeeds.
     */
    cursor?: TeamNeedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeamNeeds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeamNeeds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TeamNeeds.
     */
    distinct?: TeamNeedScalarFieldEnum | TeamNeedScalarFieldEnum[]
  }

  /**
   * TeamNeed findMany
   */
  export type TeamNeedFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamNeed
     */
    select?: TeamNeedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamNeedInclude<ExtArgs> | null
    /**
     * Filter, which TeamNeeds to fetch.
     */
    where?: TeamNeedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeamNeeds to fetch.
     */
    orderBy?: TeamNeedOrderByWithRelationInput | TeamNeedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TeamNeeds.
     */
    cursor?: TeamNeedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeamNeeds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeamNeeds.
     */
    skip?: number
    distinct?: TeamNeedScalarFieldEnum | TeamNeedScalarFieldEnum[]
  }

  /**
   * TeamNeed create
   */
  export type TeamNeedCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamNeed
     */
    select?: TeamNeedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamNeedInclude<ExtArgs> | null
    /**
     * The data needed to create a TeamNeed.
     */
    data: XOR<TeamNeedCreateInput, TeamNeedUncheckedCreateInput>
  }

  /**
   * TeamNeed createMany
   */
  export type TeamNeedCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TeamNeeds.
     */
    data: TeamNeedCreateManyInput | TeamNeedCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TeamNeed update
   */
  export type TeamNeedUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamNeed
     */
    select?: TeamNeedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamNeedInclude<ExtArgs> | null
    /**
     * The data needed to update a TeamNeed.
     */
    data: XOR<TeamNeedUpdateInput, TeamNeedUncheckedUpdateInput>
    /**
     * Choose, which TeamNeed to update.
     */
    where: TeamNeedWhereUniqueInput
  }

  /**
   * TeamNeed updateMany
   */
  export type TeamNeedUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TeamNeeds.
     */
    data: XOR<TeamNeedUpdateManyMutationInput, TeamNeedUncheckedUpdateManyInput>
    /**
     * Filter which TeamNeeds to update
     */
    where?: TeamNeedWhereInput
  }

  /**
   * TeamNeed upsert
   */
  export type TeamNeedUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamNeed
     */
    select?: TeamNeedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamNeedInclude<ExtArgs> | null
    /**
     * The filter to search for the TeamNeed to update in case it exists.
     */
    where: TeamNeedWhereUniqueInput
    /**
     * In case the TeamNeed found by the `where` argument doesn't exist, create a new TeamNeed with this data.
     */
    create: XOR<TeamNeedCreateInput, TeamNeedUncheckedCreateInput>
    /**
     * In case the TeamNeed was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TeamNeedUpdateInput, TeamNeedUncheckedUpdateInput>
  }

  /**
   * TeamNeed delete
   */
  export type TeamNeedDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamNeed
     */
    select?: TeamNeedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamNeedInclude<ExtArgs> | null
    /**
     * Filter which TeamNeed to delete.
     */
    where: TeamNeedWhereUniqueInput
  }

  /**
   * TeamNeed deleteMany
   */
  export type TeamNeedDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TeamNeeds to delete
     */
    where?: TeamNeedWhereInput
  }

  /**
   * TeamNeed without action
   */
  export type TeamNeedDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamNeed
     */
    select?: TeamNeedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamNeedInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const CombineScoreScalarFieldEnum: {
    id: 'id',
    fortyTime: 'fortyTime',
    tenYardSplit: 'tenYardSplit',
    twentyYardShuttle: 'twentyYardShuttle',
    threeCone: 'threeCone',
    verticalLeap: 'verticalLeap',
    playerId: 'playerId',
    broadJump: 'broadJump'
  };

  export type CombineScoreScalarFieldEnum = (typeof CombineScoreScalarFieldEnum)[keyof typeof CombineScoreScalarFieldEnum]


  export const DraftPickScalarFieldEnum: {
    id: 'id',
    round: 'round',
    pickNumber: 'pickNumber',
    draftYear: 'draftYear',
    currentTeamId: 'currentTeamId',
    prospectId: 'prospectId',
    playerId: 'playerId',
    used: 'used',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    originalTeam: 'originalTeam'
  };

  export type DraftPickScalarFieldEnum = (typeof DraftPickScalarFieldEnum)[keyof typeof DraftPickScalarFieldEnum]


  export const PersonScalarFieldEnum: {
    pid: 'pid',
    userName: 'userName',
    emailAddress: 'emailAddress',
    password: 'password',
    firstName: 'firstName',
    lastName: 'lastName'
  };

  export type PersonScalarFieldEnum = (typeof PersonScalarFieldEnum)[keyof typeof PersonScalarFieldEnum]


  export const PlayerScalarFieldEnum: {
    id: 'id',
    firstName: 'firstName',
    lastName: 'lastName',
    age: 'age',
    height: 'height',
    weight: 'weight',
    handSize: 'handSize',
    armLength: 'armLength',
    homeCity: 'homeCity',
    homeState: 'homeState',
    university: 'university',
    status: 'status',
    position: 'position',
    pickId: 'pickId',
    combineScoreId: 'combineScoreId',
    prospectId: 'prospectId',
    yearEnteredLeague: 'yearEnteredLeague'
  };

  export type PlayerScalarFieldEnum = (typeof PlayerScalarFieldEnum)[keyof typeof PlayerScalarFieldEnum]


  export const PlayerAwardScalarFieldEnum: {
    id: 'id',
    playerId: 'playerId',
    awardName: 'awardName',
    yearAwarded: 'yearAwarded'
  };

  export type PlayerAwardScalarFieldEnum = (typeof PlayerAwardScalarFieldEnum)[keyof typeof PlayerAwardScalarFieldEnum]


  export const PlayerTeamScalarFieldEnum: {
    id: 'id',
    playerId: 'playerId',
    teamId: 'teamId',
    currentTeam: 'currentTeam',
    startDate: 'startDate',
    endDate: 'endDate',
    jerseyNumber: 'jerseyNumber',
    contractValue: 'contractValue',
    contractLength: 'contractLength'
  };

  export type PlayerTeamScalarFieldEnum = (typeof PlayerTeamScalarFieldEnum)[keyof typeof PlayerTeamScalarFieldEnum]


  export const PostSeasonResultScalarFieldEnum: {
    id: 'id',
    playoffYear: 'playoffYear',
    lastRoundReached: 'lastRoundReached',
    winLose: 'winLose',
    opponentScore: 'opponentScore',
    teamScore: 'teamScore',
    teamId: 'teamId'
  };

  export type PostSeasonResultScalarFieldEnum = (typeof PostSeasonResultScalarFieldEnum)[keyof typeof PostSeasonResultScalarFieldEnum]


  export const ProspectScalarFieldEnum: {
    id: 'id',
    firstName: 'firstName',
    lastName: 'lastName',
    position: 'position',
    college: 'college',
    height: 'height',
    weight: 'weight',
    handSize: 'handSize',
    armLength: 'armLength',
    homeCity: 'homeCity',
    homeState: 'homeState',
    fortyTime: 'fortyTime',
    tenYardSplit: 'tenYardSplit',
    verticalLeap: 'verticalLeap',
    broadJump: 'broadJump',
    threeCone: 'threeCone',
    twentyYardShuttle: 'twentyYardShuttle',
    benchPress: 'benchPress',
    drafted: 'drafted',
    draftYear: 'draftYear',
    teamId: 'teamId',
    draftPickId: 'draftPickId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ProspectScalarFieldEnum = (typeof ProspectScalarFieldEnum)[keyof typeof ProspectScalarFieldEnum]


  export const ScheduleScalarFieldEnum: {
    id: 'id',
    teamId: 'teamId',
    seasonYear: 'seasonYear',
    oppTeamId: 'oppTeamId',
    oppTeamConference: 'oppTeamConference',
    oppTeamDivision: 'oppTeamDivision',
    scheduleWeek: 'scheduleWeek',
    gameDate: 'gameDate',
    gameCity: 'gameCity',
    gameStateProvince: 'gameStateProvince',
    gameCountry: 'gameCountry',
    gameLocation: 'gameLocation',
    wonLostFlag: 'wonLostFlag',
    homeOrAway: 'homeOrAway',
    oppTeamScore: 'oppTeamScore',
    teamScore: 'teamScore'
  };

  export type ScheduleScalarFieldEnum = (typeof ScheduleScalarFieldEnum)[keyof typeof ScheduleScalarFieldEnum]


  export const TeamScalarFieldEnum: {
    id: 'id',
    name: 'name',
    city: 'city',
    state: 'state',
    conference: 'conference',
    division: 'division',
    stadium: 'stadium',
    scheduleId: 'scheduleId'
  };

  export type TeamScalarFieldEnum = (typeof TeamScalarFieldEnum)[keyof typeof TeamScalarFieldEnum]


  export const TeamNeedScalarFieldEnum: {
    id: 'id',
    teamId: 'teamId',
    position: 'position',
    priority: 'priority',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    draftYear: 'draftYear'
  };

  export type TeamNeedScalarFieldEnum = (typeof TeamNeedScalarFieldEnum)[keyof typeof TeamNeedScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    
  /**
   * Deep Input Types
   */


  export type CombineScoreWhereInput = {
    AND?: CombineScoreWhereInput | CombineScoreWhereInput[]
    OR?: CombineScoreWhereInput[]
    NOT?: CombineScoreWhereInput | CombineScoreWhereInput[]
    id?: IntFilter<"CombineScore"> | number
    fortyTime?: FloatNullableFilter<"CombineScore"> | number | null
    tenYardSplit?: FloatNullableFilter<"CombineScore"> | number | null
    twentyYardShuttle?: FloatNullableFilter<"CombineScore"> | number | null
    threeCone?: FloatNullableFilter<"CombineScore"> | number | null
    verticalLeap?: FloatNullableFilter<"CombineScore"> | number | null
    playerId?: IntNullableFilter<"CombineScore"> | number | null
    broadJump?: FloatNullableFilter<"CombineScore"> | number | null
    Player?: XOR<PlayerNullableRelationFilter, PlayerWhereInput> | null
  }

  export type CombineScoreOrderByWithRelationInput = {
    id?: SortOrder
    fortyTime?: SortOrderInput | SortOrder
    tenYardSplit?: SortOrderInput | SortOrder
    twentyYardShuttle?: SortOrderInput | SortOrder
    threeCone?: SortOrderInput | SortOrder
    verticalLeap?: SortOrderInput | SortOrder
    playerId?: SortOrderInput | SortOrder
    broadJump?: SortOrderInput | SortOrder
    Player?: PlayerOrderByWithRelationInput
  }

  export type CombineScoreWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CombineScoreWhereInput | CombineScoreWhereInput[]
    OR?: CombineScoreWhereInput[]
    NOT?: CombineScoreWhereInput | CombineScoreWhereInput[]
    fortyTime?: FloatNullableFilter<"CombineScore"> | number | null
    tenYardSplit?: FloatNullableFilter<"CombineScore"> | number | null
    twentyYardShuttle?: FloatNullableFilter<"CombineScore"> | number | null
    threeCone?: FloatNullableFilter<"CombineScore"> | number | null
    verticalLeap?: FloatNullableFilter<"CombineScore"> | number | null
    playerId?: IntNullableFilter<"CombineScore"> | number | null
    broadJump?: FloatNullableFilter<"CombineScore"> | number | null
    Player?: XOR<PlayerNullableRelationFilter, PlayerWhereInput> | null
  }, "id">

  export type CombineScoreOrderByWithAggregationInput = {
    id?: SortOrder
    fortyTime?: SortOrderInput | SortOrder
    tenYardSplit?: SortOrderInput | SortOrder
    twentyYardShuttle?: SortOrderInput | SortOrder
    threeCone?: SortOrderInput | SortOrder
    verticalLeap?: SortOrderInput | SortOrder
    playerId?: SortOrderInput | SortOrder
    broadJump?: SortOrderInput | SortOrder
    _count?: CombineScoreCountOrderByAggregateInput
    _avg?: CombineScoreAvgOrderByAggregateInput
    _max?: CombineScoreMaxOrderByAggregateInput
    _min?: CombineScoreMinOrderByAggregateInput
    _sum?: CombineScoreSumOrderByAggregateInput
  }

  export type CombineScoreScalarWhereWithAggregatesInput = {
    AND?: CombineScoreScalarWhereWithAggregatesInput | CombineScoreScalarWhereWithAggregatesInput[]
    OR?: CombineScoreScalarWhereWithAggregatesInput[]
    NOT?: CombineScoreScalarWhereWithAggregatesInput | CombineScoreScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"CombineScore"> | number
    fortyTime?: FloatNullableWithAggregatesFilter<"CombineScore"> | number | null
    tenYardSplit?: FloatNullableWithAggregatesFilter<"CombineScore"> | number | null
    twentyYardShuttle?: FloatNullableWithAggregatesFilter<"CombineScore"> | number | null
    threeCone?: FloatNullableWithAggregatesFilter<"CombineScore"> | number | null
    verticalLeap?: FloatNullableWithAggregatesFilter<"CombineScore"> | number | null
    playerId?: IntNullableWithAggregatesFilter<"CombineScore"> | number | null
    broadJump?: FloatNullableWithAggregatesFilter<"CombineScore"> | number | null
  }

  export type DraftPickWhereInput = {
    AND?: DraftPickWhereInput | DraftPickWhereInput[]
    OR?: DraftPickWhereInput[]
    NOT?: DraftPickWhereInput | DraftPickWhereInput[]
    id?: IntFilter<"DraftPick"> | number
    round?: IntFilter<"DraftPick"> | number
    pickNumber?: IntFilter<"DraftPick"> | number
    draftYear?: IntFilter<"DraftPick"> | number
    currentTeamId?: IntFilter<"DraftPick"> | number
    prospectId?: IntNullableFilter<"DraftPick"> | number | null
    playerId?: IntNullableFilter<"DraftPick"> | number | null
    used?: BoolFilter<"DraftPick"> | boolean
    createdAt?: DateTimeNullableFilter<"DraftPick"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"DraftPick"> | Date | string | null
    originalTeam?: IntNullableFilter<"DraftPick"> | number | null
    Team?: XOR<TeamRelationFilter, TeamWhereInput>
    Player?: XOR<PlayerNullableRelationFilter, PlayerWhereInput> | null
    Prospect_DraftPick_prospectIdToProspect?: XOR<ProspectNullableRelationFilter, ProspectWhereInput> | null
    Prospect_Prospect_draftPickIdToDraftPick?: ProspectListRelationFilter
  }

  export type DraftPickOrderByWithRelationInput = {
    id?: SortOrder
    round?: SortOrder
    pickNumber?: SortOrder
    draftYear?: SortOrder
    currentTeamId?: SortOrder
    prospectId?: SortOrderInput | SortOrder
    playerId?: SortOrderInput | SortOrder
    used?: SortOrder
    createdAt?: SortOrderInput | SortOrder
    updatedAt?: SortOrderInput | SortOrder
    originalTeam?: SortOrderInput | SortOrder
    Team?: TeamOrderByWithRelationInput
    Player?: PlayerOrderByWithRelationInput
    Prospect_DraftPick_prospectIdToProspect?: ProspectOrderByWithRelationInput
    Prospect_Prospect_draftPickIdToDraftPick?: ProspectOrderByRelationAggregateInput
  }

  export type DraftPickWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    draftYear_round_pickNumber?: DraftPickDraftYearRoundPickNumberCompoundUniqueInput
    AND?: DraftPickWhereInput | DraftPickWhereInput[]
    OR?: DraftPickWhereInput[]
    NOT?: DraftPickWhereInput | DraftPickWhereInput[]
    round?: IntFilter<"DraftPick"> | number
    pickNumber?: IntFilter<"DraftPick"> | number
    draftYear?: IntFilter<"DraftPick"> | number
    currentTeamId?: IntFilter<"DraftPick"> | number
    prospectId?: IntNullableFilter<"DraftPick"> | number | null
    playerId?: IntNullableFilter<"DraftPick"> | number | null
    used?: BoolFilter<"DraftPick"> | boolean
    createdAt?: DateTimeNullableFilter<"DraftPick"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"DraftPick"> | Date | string | null
    originalTeam?: IntNullableFilter<"DraftPick"> | number | null
    Team?: XOR<TeamRelationFilter, TeamWhereInput>
    Player?: XOR<PlayerNullableRelationFilter, PlayerWhereInput> | null
    Prospect_DraftPick_prospectIdToProspect?: XOR<ProspectNullableRelationFilter, ProspectWhereInput> | null
    Prospect_Prospect_draftPickIdToDraftPick?: ProspectListRelationFilter
  }, "id" | "draftYear_round_pickNumber">

  export type DraftPickOrderByWithAggregationInput = {
    id?: SortOrder
    round?: SortOrder
    pickNumber?: SortOrder
    draftYear?: SortOrder
    currentTeamId?: SortOrder
    prospectId?: SortOrderInput | SortOrder
    playerId?: SortOrderInput | SortOrder
    used?: SortOrder
    createdAt?: SortOrderInput | SortOrder
    updatedAt?: SortOrderInput | SortOrder
    originalTeam?: SortOrderInput | SortOrder
    _count?: DraftPickCountOrderByAggregateInput
    _avg?: DraftPickAvgOrderByAggregateInput
    _max?: DraftPickMaxOrderByAggregateInput
    _min?: DraftPickMinOrderByAggregateInput
    _sum?: DraftPickSumOrderByAggregateInput
  }

  export type DraftPickScalarWhereWithAggregatesInput = {
    AND?: DraftPickScalarWhereWithAggregatesInput | DraftPickScalarWhereWithAggregatesInput[]
    OR?: DraftPickScalarWhereWithAggregatesInput[]
    NOT?: DraftPickScalarWhereWithAggregatesInput | DraftPickScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"DraftPick"> | number
    round?: IntWithAggregatesFilter<"DraftPick"> | number
    pickNumber?: IntWithAggregatesFilter<"DraftPick"> | number
    draftYear?: IntWithAggregatesFilter<"DraftPick"> | number
    currentTeamId?: IntWithAggregatesFilter<"DraftPick"> | number
    prospectId?: IntNullableWithAggregatesFilter<"DraftPick"> | number | null
    playerId?: IntNullableWithAggregatesFilter<"DraftPick"> | number | null
    used?: BoolWithAggregatesFilter<"DraftPick"> | boolean
    createdAt?: DateTimeNullableWithAggregatesFilter<"DraftPick"> | Date | string | null
    updatedAt?: DateTimeNullableWithAggregatesFilter<"DraftPick"> | Date | string | null
    originalTeam?: IntNullableWithAggregatesFilter<"DraftPick"> | number | null
  }

  export type PersonWhereInput = {
    AND?: PersonWhereInput | PersonWhereInput[]
    OR?: PersonWhereInput[]
    NOT?: PersonWhereInput | PersonWhereInput[]
    pid?: IntFilter<"Person"> | number
    userName?: StringFilter<"Person"> | string
    emailAddress?: StringFilter<"Person"> | string
    password?: StringFilter<"Person"> | string
    firstName?: StringFilter<"Person"> | string
    lastName?: StringFilter<"Person"> | string
  }

  export type PersonOrderByWithRelationInput = {
    pid?: SortOrder
    userName?: SortOrder
    emailAddress?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
  }

  export type PersonWhereUniqueInput = Prisma.AtLeast<{
    pid?: number
    AND?: PersonWhereInput | PersonWhereInput[]
    OR?: PersonWhereInput[]
    NOT?: PersonWhereInput | PersonWhereInput[]
    userName?: StringFilter<"Person"> | string
    emailAddress?: StringFilter<"Person"> | string
    password?: StringFilter<"Person"> | string
    firstName?: StringFilter<"Person"> | string
    lastName?: StringFilter<"Person"> | string
  }, "pid">

  export type PersonOrderByWithAggregationInput = {
    pid?: SortOrder
    userName?: SortOrder
    emailAddress?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    _count?: PersonCountOrderByAggregateInput
    _avg?: PersonAvgOrderByAggregateInput
    _max?: PersonMaxOrderByAggregateInput
    _min?: PersonMinOrderByAggregateInput
    _sum?: PersonSumOrderByAggregateInput
  }

  export type PersonScalarWhereWithAggregatesInput = {
    AND?: PersonScalarWhereWithAggregatesInput | PersonScalarWhereWithAggregatesInput[]
    OR?: PersonScalarWhereWithAggregatesInput[]
    NOT?: PersonScalarWhereWithAggregatesInput | PersonScalarWhereWithAggregatesInput[]
    pid?: IntWithAggregatesFilter<"Person"> | number
    userName?: StringWithAggregatesFilter<"Person"> | string
    emailAddress?: StringWithAggregatesFilter<"Person"> | string
    password?: StringWithAggregatesFilter<"Person"> | string
    firstName?: StringWithAggregatesFilter<"Person"> | string
    lastName?: StringWithAggregatesFilter<"Person"> | string
  }

  export type PlayerWhereInput = {
    AND?: PlayerWhereInput | PlayerWhereInput[]
    OR?: PlayerWhereInput[]
    NOT?: PlayerWhereInput | PlayerWhereInput[]
    id?: IntFilter<"Player"> | number
    firstName?: StringFilter<"Player"> | string
    lastName?: StringFilter<"Player"> | string
    age?: IntFilter<"Player"> | number
    height?: FloatNullableFilter<"Player"> | number | null
    weight?: FloatNullableFilter<"Player"> | number | null
    handSize?: FloatNullableFilter<"Player"> | number | null
    armLength?: FloatNullableFilter<"Player"> | number | null
    homeCity?: StringNullableFilter<"Player"> | string | null
    homeState?: StringNullableFilter<"Player"> | string | null
    university?: StringNullableFilter<"Player"> | string | null
    status?: StringNullableFilter<"Player"> | string | null
    position?: StringNullableFilter<"Player"> | string | null
    pickId?: IntNullableFilter<"Player"> | number | null
    combineScoreId?: IntNullableFilter<"Player"> | number | null
    prospectId?: IntNullableFilter<"Player"> | number | null
    yearEnteredLeague?: IntNullableFilter<"Player"> | number | null
    CombineScore?: CombineScoreListRelationFilter
    DraftPick?: DraftPickListRelationFilter
    Prospect?: XOR<ProspectNullableRelationFilter, ProspectWhereInput> | null
    PlayerAward?: PlayerAwardListRelationFilter
    PlayerTeam?: PlayerTeamListRelationFilter
  }

  export type PlayerOrderByWithRelationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    age?: SortOrder
    height?: SortOrderInput | SortOrder
    weight?: SortOrderInput | SortOrder
    handSize?: SortOrderInput | SortOrder
    armLength?: SortOrderInput | SortOrder
    homeCity?: SortOrderInput | SortOrder
    homeState?: SortOrderInput | SortOrder
    university?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    position?: SortOrderInput | SortOrder
    pickId?: SortOrderInput | SortOrder
    combineScoreId?: SortOrderInput | SortOrder
    prospectId?: SortOrderInput | SortOrder
    yearEnteredLeague?: SortOrderInput | SortOrder
    CombineScore?: CombineScoreOrderByRelationAggregateInput
    DraftPick?: DraftPickOrderByRelationAggregateInput
    Prospect?: ProspectOrderByWithRelationInput
    PlayerAward?: PlayerAwardOrderByRelationAggregateInput
    PlayerTeam?: PlayerTeamOrderByRelationAggregateInput
  }

  export type PlayerWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PlayerWhereInput | PlayerWhereInput[]
    OR?: PlayerWhereInput[]
    NOT?: PlayerWhereInput | PlayerWhereInput[]
    firstName?: StringFilter<"Player"> | string
    lastName?: StringFilter<"Player"> | string
    age?: IntFilter<"Player"> | number
    height?: FloatNullableFilter<"Player"> | number | null
    weight?: FloatNullableFilter<"Player"> | number | null
    handSize?: FloatNullableFilter<"Player"> | number | null
    armLength?: FloatNullableFilter<"Player"> | number | null
    homeCity?: StringNullableFilter<"Player"> | string | null
    homeState?: StringNullableFilter<"Player"> | string | null
    university?: StringNullableFilter<"Player"> | string | null
    status?: StringNullableFilter<"Player"> | string | null
    position?: StringNullableFilter<"Player"> | string | null
    pickId?: IntNullableFilter<"Player"> | number | null
    combineScoreId?: IntNullableFilter<"Player"> | number | null
    prospectId?: IntNullableFilter<"Player"> | number | null
    yearEnteredLeague?: IntNullableFilter<"Player"> | number | null
    CombineScore?: CombineScoreListRelationFilter
    DraftPick?: DraftPickListRelationFilter
    Prospect?: XOR<ProspectNullableRelationFilter, ProspectWhereInput> | null
    PlayerAward?: PlayerAwardListRelationFilter
    PlayerTeam?: PlayerTeamListRelationFilter
  }, "id">

  export type PlayerOrderByWithAggregationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    age?: SortOrder
    height?: SortOrderInput | SortOrder
    weight?: SortOrderInput | SortOrder
    handSize?: SortOrderInput | SortOrder
    armLength?: SortOrderInput | SortOrder
    homeCity?: SortOrderInput | SortOrder
    homeState?: SortOrderInput | SortOrder
    university?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    position?: SortOrderInput | SortOrder
    pickId?: SortOrderInput | SortOrder
    combineScoreId?: SortOrderInput | SortOrder
    prospectId?: SortOrderInput | SortOrder
    yearEnteredLeague?: SortOrderInput | SortOrder
    _count?: PlayerCountOrderByAggregateInput
    _avg?: PlayerAvgOrderByAggregateInput
    _max?: PlayerMaxOrderByAggregateInput
    _min?: PlayerMinOrderByAggregateInput
    _sum?: PlayerSumOrderByAggregateInput
  }

  export type PlayerScalarWhereWithAggregatesInput = {
    AND?: PlayerScalarWhereWithAggregatesInput | PlayerScalarWhereWithAggregatesInput[]
    OR?: PlayerScalarWhereWithAggregatesInput[]
    NOT?: PlayerScalarWhereWithAggregatesInput | PlayerScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Player"> | number
    firstName?: StringWithAggregatesFilter<"Player"> | string
    lastName?: StringWithAggregatesFilter<"Player"> | string
    age?: IntWithAggregatesFilter<"Player"> | number
    height?: FloatNullableWithAggregatesFilter<"Player"> | number | null
    weight?: FloatNullableWithAggregatesFilter<"Player"> | number | null
    handSize?: FloatNullableWithAggregatesFilter<"Player"> | number | null
    armLength?: FloatNullableWithAggregatesFilter<"Player"> | number | null
    homeCity?: StringNullableWithAggregatesFilter<"Player"> | string | null
    homeState?: StringNullableWithAggregatesFilter<"Player"> | string | null
    university?: StringNullableWithAggregatesFilter<"Player"> | string | null
    status?: StringNullableWithAggregatesFilter<"Player"> | string | null
    position?: StringNullableWithAggregatesFilter<"Player"> | string | null
    pickId?: IntNullableWithAggregatesFilter<"Player"> | number | null
    combineScoreId?: IntNullableWithAggregatesFilter<"Player"> | number | null
    prospectId?: IntNullableWithAggregatesFilter<"Player"> | number | null
    yearEnteredLeague?: IntNullableWithAggregatesFilter<"Player"> | number | null
  }

  export type PlayerAwardWhereInput = {
    AND?: PlayerAwardWhereInput | PlayerAwardWhereInput[]
    OR?: PlayerAwardWhereInput[]
    NOT?: PlayerAwardWhereInput | PlayerAwardWhereInput[]
    id?: IntFilter<"PlayerAward"> | number
    playerId?: IntFilter<"PlayerAward"> | number
    awardName?: StringNullableFilter<"PlayerAward"> | string | null
    yearAwarded?: IntNullableFilter<"PlayerAward"> | number | null
    Player?: XOR<PlayerRelationFilter, PlayerWhereInput>
  }

  export type PlayerAwardOrderByWithRelationInput = {
    id?: SortOrder
    playerId?: SortOrder
    awardName?: SortOrderInput | SortOrder
    yearAwarded?: SortOrderInput | SortOrder
    Player?: PlayerOrderByWithRelationInput
  }

  export type PlayerAwardWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PlayerAwardWhereInput | PlayerAwardWhereInput[]
    OR?: PlayerAwardWhereInput[]
    NOT?: PlayerAwardWhereInput | PlayerAwardWhereInput[]
    playerId?: IntFilter<"PlayerAward"> | number
    awardName?: StringNullableFilter<"PlayerAward"> | string | null
    yearAwarded?: IntNullableFilter<"PlayerAward"> | number | null
    Player?: XOR<PlayerRelationFilter, PlayerWhereInput>
  }, "id">

  export type PlayerAwardOrderByWithAggregationInput = {
    id?: SortOrder
    playerId?: SortOrder
    awardName?: SortOrderInput | SortOrder
    yearAwarded?: SortOrderInput | SortOrder
    _count?: PlayerAwardCountOrderByAggregateInput
    _avg?: PlayerAwardAvgOrderByAggregateInput
    _max?: PlayerAwardMaxOrderByAggregateInput
    _min?: PlayerAwardMinOrderByAggregateInput
    _sum?: PlayerAwardSumOrderByAggregateInput
  }

  export type PlayerAwardScalarWhereWithAggregatesInput = {
    AND?: PlayerAwardScalarWhereWithAggregatesInput | PlayerAwardScalarWhereWithAggregatesInput[]
    OR?: PlayerAwardScalarWhereWithAggregatesInput[]
    NOT?: PlayerAwardScalarWhereWithAggregatesInput | PlayerAwardScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"PlayerAward"> | number
    playerId?: IntWithAggregatesFilter<"PlayerAward"> | number
    awardName?: StringNullableWithAggregatesFilter<"PlayerAward"> | string | null
    yearAwarded?: IntNullableWithAggregatesFilter<"PlayerAward"> | number | null
  }

  export type PlayerTeamWhereInput = {
    AND?: PlayerTeamWhereInput | PlayerTeamWhereInput[]
    OR?: PlayerTeamWhereInput[]
    NOT?: PlayerTeamWhereInput | PlayerTeamWhereInput[]
    id?: IntFilter<"PlayerTeam"> | number
    playerId?: IntFilter<"PlayerTeam"> | number
    teamId?: IntFilter<"PlayerTeam"> | number
    currentTeam?: BoolFilter<"PlayerTeam"> | boolean
    startDate?: DateTimeNullableFilter<"PlayerTeam"> | Date | string | null
    endDate?: DateTimeNullableFilter<"PlayerTeam"> | Date | string | null
    jerseyNumber?: IntNullableFilter<"PlayerTeam"> | number | null
    contractValue?: IntNullableFilter<"PlayerTeam"> | number | null
    contractLength?: IntNullableFilter<"PlayerTeam"> | number | null
    Player?: XOR<PlayerRelationFilter, PlayerWhereInput>
    Team?: XOR<TeamRelationFilter, TeamWhereInput>
  }

  export type PlayerTeamOrderByWithRelationInput = {
    id?: SortOrder
    playerId?: SortOrder
    teamId?: SortOrder
    currentTeam?: SortOrder
    startDate?: SortOrderInput | SortOrder
    endDate?: SortOrderInput | SortOrder
    jerseyNumber?: SortOrderInput | SortOrder
    contractValue?: SortOrderInput | SortOrder
    contractLength?: SortOrderInput | SortOrder
    Player?: PlayerOrderByWithRelationInput
    Team?: TeamOrderByWithRelationInput
  }

  export type PlayerTeamWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PlayerTeamWhereInput | PlayerTeamWhereInput[]
    OR?: PlayerTeamWhereInput[]
    NOT?: PlayerTeamWhereInput | PlayerTeamWhereInput[]
    playerId?: IntFilter<"PlayerTeam"> | number
    teamId?: IntFilter<"PlayerTeam"> | number
    currentTeam?: BoolFilter<"PlayerTeam"> | boolean
    startDate?: DateTimeNullableFilter<"PlayerTeam"> | Date | string | null
    endDate?: DateTimeNullableFilter<"PlayerTeam"> | Date | string | null
    jerseyNumber?: IntNullableFilter<"PlayerTeam"> | number | null
    contractValue?: IntNullableFilter<"PlayerTeam"> | number | null
    contractLength?: IntNullableFilter<"PlayerTeam"> | number | null
    Player?: XOR<PlayerRelationFilter, PlayerWhereInput>
    Team?: XOR<TeamRelationFilter, TeamWhereInput>
  }, "id">

  export type PlayerTeamOrderByWithAggregationInput = {
    id?: SortOrder
    playerId?: SortOrder
    teamId?: SortOrder
    currentTeam?: SortOrder
    startDate?: SortOrderInput | SortOrder
    endDate?: SortOrderInput | SortOrder
    jerseyNumber?: SortOrderInput | SortOrder
    contractValue?: SortOrderInput | SortOrder
    contractLength?: SortOrderInput | SortOrder
    _count?: PlayerTeamCountOrderByAggregateInput
    _avg?: PlayerTeamAvgOrderByAggregateInput
    _max?: PlayerTeamMaxOrderByAggregateInput
    _min?: PlayerTeamMinOrderByAggregateInput
    _sum?: PlayerTeamSumOrderByAggregateInput
  }

  export type PlayerTeamScalarWhereWithAggregatesInput = {
    AND?: PlayerTeamScalarWhereWithAggregatesInput | PlayerTeamScalarWhereWithAggregatesInput[]
    OR?: PlayerTeamScalarWhereWithAggregatesInput[]
    NOT?: PlayerTeamScalarWhereWithAggregatesInput | PlayerTeamScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"PlayerTeam"> | number
    playerId?: IntWithAggregatesFilter<"PlayerTeam"> | number
    teamId?: IntWithAggregatesFilter<"PlayerTeam"> | number
    currentTeam?: BoolWithAggregatesFilter<"PlayerTeam"> | boolean
    startDate?: DateTimeNullableWithAggregatesFilter<"PlayerTeam"> | Date | string | null
    endDate?: DateTimeNullableWithAggregatesFilter<"PlayerTeam"> | Date | string | null
    jerseyNumber?: IntNullableWithAggregatesFilter<"PlayerTeam"> | number | null
    contractValue?: IntNullableWithAggregatesFilter<"PlayerTeam"> | number | null
    contractLength?: IntNullableWithAggregatesFilter<"PlayerTeam"> | number | null
  }

  export type PostSeasonResultWhereInput = {
    AND?: PostSeasonResultWhereInput | PostSeasonResultWhereInput[]
    OR?: PostSeasonResultWhereInput[]
    NOT?: PostSeasonResultWhereInput | PostSeasonResultWhereInput[]
    id?: IntFilter<"PostSeasonResult"> | number
    playoffYear?: IntNullableFilter<"PostSeasonResult"> | number | null
    lastRoundReached?: StringNullableFilter<"PostSeasonResult"> | string | null
    winLose?: StringNullableFilter<"PostSeasonResult"> | string | null
    opponentScore?: IntNullableFilter<"PostSeasonResult"> | number | null
    teamScore?: IntNullableFilter<"PostSeasonResult"> | number | null
    teamId?: IntNullableFilter<"PostSeasonResult"> | number | null
    Team?: XOR<TeamNullableRelationFilter, TeamWhereInput> | null
  }

  export type PostSeasonResultOrderByWithRelationInput = {
    id?: SortOrder
    playoffYear?: SortOrderInput | SortOrder
    lastRoundReached?: SortOrderInput | SortOrder
    winLose?: SortOrderInput | SortOrder
    opponentScore?: SortOrderInput | SortOrder
    teamScore?: SortOrderInput | SortOrder
    teamId?: SortOrderInput | SortOrder
    Team?: TeamOrderByWithRelationInput
  }

  export type PostSeasonResultWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PostSeasonResultWhereInput | PostSeasonResultWhereInput[]
    OR?: PostSeasonResultWhereInput[]
    NOT?: PostSeasonResultWhereInput | PostSeasonResultWhereInput[]
    playoffYear?: IntNullableFilter<"PostSeasonResult"> | number | null
    lastRoundReached?: StringNullableFilter<"PostSeasonResult"> | string | null
    winLose?: StringNullableFilter<"PostSeasonResult"> | string | null
    opponentScore?: IntNullableFilter<"PostSeasonResult"> | number | null
    teamScore?: IntNullableFilter<"PostSeasonResult"> | number | null
    teamId?: IntNullableFilter<"PostSeasonResult"> | number | null
    Team?: XOR<TeamNullableRelationFilter, TeamWhereInput> | null
  }, "id">

  export type PostSeasonResultOrderByWithAggregationInput = {
    id?: SortOrder
    playoffYear?: SortOrderInput | SortOrder
    lastRoundReached?: SortOrderInput | SortOrder
    winLose?: SortOrderInput | SortOrder
    opponentScore?: SortOrderInput | SortOrder
    teamScore?: SortOrderInput | SortOrder
    teamId?: SortOrderInput | SortOrder
    _count?: PostSeasonResultCountOrderByAggregateInput
    _avg?: PostSeasonResultAvgOrderByAggregateInput
    _max?: PostSeasonResultMaxOrderByAggregateInput
    _min?: PostSeasonResultMinOrderByAggregateInput
    _sum?: PostSeasonResultSumOrderByAggregateInput
  }

  export type PostSeasonResultScalarWhereWithAggregatesInput = {
    AND?: PostSeasonResultScalarWhereWithAggregatesInput | PostSeasonResultScalarWhereWithAggregatesInput[]
    OR?: PostSeasonResultScalarWhereWithAggregatesInput[]
    NOT?: PostSeasonResultScalarWhereWithAggregatesInput | PostSeasonResultScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"PostSeasonResult"> | number
    playoffYear?: IntNullableWithAggregatesFilter<"PostSeasonResult"> | number | null
    lastRoundReached?: StringNullableWithAggregatesFilter<"PostSeasonResult"> | string | null
    winLose?: StringNullableWithAggregatesFilter<"PostSeasonResult"> | string | null
    opponentScore?: IntNullableWithAggregatesFilter<"PostSeasonResult"> | number | null
    teamScore?: IntNullableWithAggregatesFilter<"PostSeasonResult"> | number | null
    teamId?: IntNullableWithAggregatesFilter<"PostSeasonResult"> | number | null
  }

  export type ProspectWhereInput = {
    AND?: ProspectWhereInput | ProspectWhereInput[]
    OR?: ProspectWhereInput[]
    NOT?: ProspectWhereInput | ProspectWhereInput[]
    id?: IntFilter<"Prospect"> | number
    firstName?: StringFilter<"Prospect"> | string
    lastName?: StringFilter<"Prospect"> | string
    position?: StringFilter<"Prospect"> | string
    college?: StringFilter<"Prospect"> | string
    height?: FloatFilter<"Prospect"> | number
    weight?: FloatFilter<"Prospect"> | number
    handSize?: FloatNullableFilter<"Prospect"> | number | null
    armLength?: FloatNullableFilter<"Prospect"> | number | null
    homeCity?: StringNullableFilter<"Prospect"> | string | null
    homeState?: StringNullableFilter<"Prospect"> | string | null
    fortyTime?: FloatNullableFilter<"Prospect"> | number | null
    tenYardSplit?: FloatNullableFilter<"Prospect"> | number | null
    verticalLeap?: FloatNullableFilter<"Prospect"> | number | null
    broadJump?: FloatNullableFilter<"Prospect"> | number | null
    threeCone?: FloatNullableFilter<"Prospect"> | number | null
    twentyYardShuttle?: FloatNullableFilter<"Prospect"> | number | null
    benchPress?: IntNullableFilter<"Prospect"> | number | null
    drafted?: BoolFilter<"Prospect"> | boolean
    draftYear?: IntNullableFilter<"Prospect"> | number | null
    teamId?: IntNullableFilter<"Prospect"> | number | null
    draftPickId?: IntNullableFilter<"Prospect"> | number | null
    createdAt?: DateTimeNullableFilter<"Prospect"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"Prospect"> | Date | string | null
    DraftPick_DraftPick_prospectIdToProspect?: DraftPickListRelationFilter
    Player?: PlayerListRelationFilter
    DraftPick_Prospect_draftPickIdToDraftPick?: XOR<DraftPickNullableRelationFilter, DraftPickWhereInput> | null
    Team?: XOR<TeamNullableRelationFilter, TeamWhereInput> | null
  }

  export type ProspectOrderByWithRelationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    position?: SortOrder
    college?: SortOrder
    height?: SortOrder
    weight?: SortOrder
    handSize?: SortOrderInput | SortOrder
    armLength?: SortOrderInput | SortOrder
    homeCity?: SortOrderInput | SortOrder
    homeState?: SortOrderInput | SortOrder
    fortyTime?: SortOrderInput | SortOrder
    tenYardSplit?: SortOrderInput | SortOrder
    verticalLeap?: SortOrderInput | SortOrder
    broadJump?: SortOrderInput | SortOrder
    threeCone?: SortOrderInput | SortOrder
    twentyYardShuttle?: SortOrderInput | SortOrder
    benchPress?: SortOrderInput | SortOrder
    drafted?: SortOrder
    draftYear?: SortOrderInput | SortOrder
    teamId?: SortOrderInput | SortOrder
    draftPickId?: SortOrderInput | SortOrder
    createdAt?: SortOrderInput | SortOrder
    updatedAt?: SortOrderInput | SortOrder
    DraftPick_DraftPick_prospectIdToProspect?: DraftPickOrderByRelationAggregateInput
    Player?: PlayerOrderByRelationAggregateInput
    DraftPick_Prospect_draftPickIdToDraftPick?: DraftPickOrderByWithRelationInput
    Team?: TeamOrderByWithRelationInput
  }

  export type ProspectWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ProspectWhereInput | ProspectWhereInput[]
    OR?: ProspectWhereInput[]
    NOT?: ProspectWhereInput | ProspectWhereInput[]
    firstName?: StringFilter<"Prospect"> | string
    lastName?: StringFilter<"Prospect"> | string
    position?: StringFilter<"Prospect"> | string
    college?: StringFilter<"Prospect"> | string
    height?: FloatFilter<"Prospect"> | number
    weight?: FloatFilter<"Prospect"> | number
    handSize?: FloatNullableFilter<"Prospect"> | number | null
    armLength?: FloatNullableFilter<"Prospect"> | number | null
    homeCity?: StringNullableFilter<"Prospect"> | string | null
    homeState?: StringNullableFilter<"Prospect"> | string | null
    fortyTime?: FloatNullableFilter<"Prospect"> | number | null
    tenYardSplit?: FloatNullableFilter<"Prospect"> | number | null
    verticalLeap?: FloatNullableFilter<"Prospect"> | number | null
    broadJump?: FloatNullableFilter<"Prospect"> | number | null
    threeCone?: FloatNullableFilter<"Prospect"> | number | null
    twentyYardShuttle?: FloatNullableFilter<"Prospect"> | number | null
    benchPress?: IntNullableFilter<"Prospect"> | number | null
    drafted?: BoolFilter<"Prospect"> | boolean
    draftYear?: IntNullableFilter<"Prospect"> | number | null
    teamId?: IntNullableFilter<"Prospect"> | number | null
    draftPickId?: IntNullableFilter<"Prospect"> | number | null
    createdAt?: DateTimeNullableFilter<"Prospect"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"Prospect"> | Date | string | null
    DraftPick_DraftPick_prospectIdToProspect?: DraftPickListRelationFilter
    Player?: PlayerListRelationFilter
    DraftPick_Prospect_draftPickIdToDraftPick?: XOR<DraftPickNullableRelationFilter, DraftPickWhereInput> | null
    Team?: XOR<TeamNullableRelationFilter, TeamWhereInput> | null
  }, "id">

  export type ProspectOrderByWithAggregationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    position?: SortOrder
    college?: SortOrder
    height?: SortOrder
    weight?: SortOrder
    handSize?: SortOrderInput | SortOrder
    armLength?: SortOrderInput | SortOrder
    homeCity?: SortOrderInput | SortOrder
    homeState?: SortOrderInput | SortOrder
    fortyTime?: SortOrderInput | SortOrder
    tenYardSplit?: SortOrderInput | SortOrder
    verticalLeap?: SortOrderInput | SortOrder
    broadJump?: SortOrderInput | SortOrder
    threeCone?: SortOrderInput | SortOrder
    twentyYardShuttle?: SortOrderInput | SortOrder
    benchPress?: SortOrderInput | SortOrder
    drafted?: SortOrder
    draftYear?: SortOrderInput | SortOrder
    teamId?: SortOrderInput | SortOrder
    draftPickId?: SortOrderInput | SortOrder
    createdAt?: SortOrderInput | SortOrder
    updatedAt?: SortOrderInput | SortOrder
    _count?: ProspectCountOrderByAggregateInput
    _avg?: ProspectAvgOrderByAggregateInput
    _max?: ProspectMaxOrderByAggregateInput
    _min?: ProspectMinOrderByAggregateInput
    _sum?: ProspectSumOrderByAggregateInput
  }

  export type ProspectScalarWhereWithAggregatesInput = {
    AND?: ProspectScalarWhereWithAggregatesInput | ProspectScalarWhereWithAggregatesInput[]
    OR?: ProspectScalarWhereWithAggregatesInput[]
    NOT?: ProspectScalarWhereWithAggregatesInput | ProspectScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Prospect"> | number
    firstName?: StringWithAggregatesFilter<"Prospect"> | string
    lastName?: StringWithAggregatesFilter<"Prospect"> | string
    position?: StringWithAggregatesFilter<"Prospect"> | string
    college?: StringWithAggregatesFilter<"Prospect"> | string
    height?: FloatWithAggregatesFilter<"Prospect"> | number
    weight?: FloatWithAggregatesFilter<"Prospect"> | number
    handSize?: FloatNullableWithAggregatesFilter<"Prospect"> | number | null
    armLength?: FloatNullableWithAggregatesFilter<"Prospect"> | number | null
    homeCity?: StringNullableWithAggregatesFilter<"Prospect"> | string | null
    homeState?: StringNullableWithAggregatesFilter<"Prospect"> | string | null
    fortyTime?: FloatNullableWithAggregatesFilter<"Prospect"> | number | null
    tenYardSplit?: FloatNullableWithAggregatesFilter<"Prospect"> | number | null
    verticalLeap?: FloatNullableWithAggregatesFilter<"Prospect"> | number | null
    broadJump?: FloatNullableWithAggregatesFilter<"Prospect"> | number | null
    threeCone?: FloatNullableWithAggregatesFilter<"Prospect"> | number | null
    twentyYardShuttle?: FloatNullableWithAggregatesFilter<"Prospect"> | number | null
    benchPress?: IntNullableWithAggregatesFilter<"Prospect"> | number | null
    drafted?: BoolWithAggregatesFilter<"Prospect"> | boolean
    draftYear?: IntNullableWithAggregatesFilter<"Prospect"> | number | null
    teamId?: IntNullableWithAggregatesFilter<"Prospect"> | number | null
    draftPickId?: IntNullableWithAggregatesFilter<"Prospect"> | number | null
    createdAt?: DateTimeNullableWithAggregatesFilter<"Prospect"> | Date | string | null
    updatedAt?: DateTimeNullableWithAggregatesFilter<"Prospect"> | Date | string | null
  }

  export type ScheduleWhereInput = {
    AND?: ScheduleWhereInput | ScheduleWhereInput[]
    OR?: ScheduleWhereInput[]
    NOT?: ScheduleWhereInput | ScheduleWhereInput[]
    id?: IntFilter<"Schedule"> | number
    teamId?: IntNullableFilter<"Schedule"> | number | null
    seasonYear?: IntNullableFilter<"Schedule"> | number | null
    oppTeamId?: IntFilter<"Schedule"> | number
    oppTeamConference?: StringNullableFilter<"Schedule"> | string | null
    oppTeamDivision?: StringNullableFilter<"Schedule"> | string | null
    scheduleWeek?: IntNullableFilter<"Schedule"> | number | null
    gameDate?: DateTimeNullableFilter<"Schedule"> | Date | string | null
    gameCity?: StringNullableFilter<"Schedule"> | string | null
    gameStateProvince?: StringNullableFilter<"Schedule"> | string | null
    gameCountry?: StringNullableFilter<"Schedule"> | string | null
    gameLocation?: StringNullableFilter<"Schedule"> | string | null
    wonLostFlag?: StringNullableFilter<"Schedule"> | string | null
    homeOrAway?: StringNullableFilter<"Schedule"> | string | null
    oppTeamScore?: IntNullableFilter<"Schedule"> | number | null
    teamScore?: IntNullableFilter<"Schedule"> | number | null
    Team_Schedule_teamIdToTeam?: XOR<TeamNullableRelationFilter, TeamWhereInput> | null
    Team_Schedule_oppTeamIdToTeam?: XOR<TeamRelationFilter, TeamWhereInput>
  }

  export type ScheduleOrderByWithRelationInput = {
    id?: SortOrder
    teamId?: SortOrderInput | SortOrder
    seasonYear?: SortOrderInput | SortOrder
    oppTeamId?: SortOrder
    oppTeamConference?: SortOrderInput | SortOrder
    oppTeamDivision?: SortOrderInput | SortOrder
    scheduleWeek?: SortOrderInput | SortOrder
    gameDate?: SortOrderInput | SortOrder
    gameCity?: SortOrderInput | SortOrder
    gameStateProvince?: SortOrderInput | SortOrder
    gameCountry?: SortOrderInput | SortOrder
    gameLocation?: SortOrderInput | SortOrder
    wonLostFlag?: SortOrderInput | SortOrder
    homeOrAway?: SortOrderInput | SortOrder
    oppTeamScore?: SortOrderInput | SortOrder
    teamScore?: SortOrderInput | SortOrder
    Team_Schedule_teamIdToTeam?: TeamOrderByWithRelationInput
    Team_Schedule_oppTeamIdToTeam?: TeamOrderByWithRelationInput
  }

  export type ScheduleWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ScheduleWhereInput | ScheduleWhereInput[]
    OR?: ScheduleWhereInput[]
    NOT?: ScheduleWhereInput | ScheduleWhereInput[]
    teamId?: IntNullableFilter<"Schedule"> | number | null
    seasonYear?: IntNullableFilter<"Schedule"> | number | null
    oppTeamId?: IntFilter<"Schedule"> | number
    oppTeamConference?: StringNullableFilter<"Schedule"> | string | null
    oppTeamDivision?: StringNullableFilter<"Schedule"> | string | null
    scheduleWeek?: IntNullableFilter<"Schedule"> | number | null
    gameDate?: DateTimeNullableFilter<"Schedule"> | Date | string | null
    gameCity?: StringNullableFilter<"Schedule"> | string | null
    gameStateProvince?: StringNullableFilter<"Schedule"> | string | null
    gameCountry?: StringNullableFilter<"Schedule"> | string | null
    gameLocation?: StringNullableFilter<"Schedule"> | string | null
    wonLostFlag?: StringNullableFilter<"Schedule"> | string | null
    homeOrAway?: StringNullableFilter<"Schedule"> | string | null
    oppTeamScore?: IntNullableFilter<"Schedule"> | number | null
    teamScore?: IntNullableFilter<"Schedule"> | number | null
    Team_Schedule_teamIdToTeam?: XOR<TeamNullableRelationFilter, TeamWhereInput> | null
    Team_Schedule_oppTeamIdToTeam?: XOR<TeamRelationFilter, TeamWhereInput>
  }, "id">

  export type ScheduleOrderByWithAggregationInput = {
    id?: SortOrder
    teamId?: SortOrderInput | SortOrder
    seasonYear?: SortOrderInput | SortOrder
    oppTeamId?: SortOrder
    oppTeamConference?: SortOrderInput | SortOrder
    oppTeamDivision?: SortOrderInput | SortOrder
    scheduleWeek?: SortOrderInput | SortOrder
    gameDate?: SortOrderInput | SortOrder
    gameCity?: SortOrderInput | SortOrder
    gameStateProvince?: SortOrderInput | SortOrder
    gameCountry?: SortOrderInput | SortOrder
    gameLocation?: SortOrderInput | SortOrder
    wonLostFlag?: SortOrderInput | SortOrder
    homeOrAway?: SortOrderInput | SortOrder
    oppTeamScore?: SortOrderInput | SortOrder
    teamScore?: SortOrderInput | SortOrder
    _count?: ScheduleCountOrderByAggregateInput
    _avg?: ScheduleAvgOrderByAggregateInput
    _max?: ScheduleMaxOrderByAggregateInput
    _min?: ScheduleMinOrderByAggregateInput
    _sum?: ScheduleSumOrderByAggregateInput
  }

  export type ScheduleScalarWhereWithAggregatesInput = {
    AND?: ScheduleScalarWhereWithAggregatesInput | ScheduleScalarWhereWithAggregatesInput[]
    OR?: ScheduleScalarWhereWithAggregatesInput[]
    NOT?: ScheduleScalarWhereWithAggregatesInput | ScheduleScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Schedule"> | number
    teamId?: IntNullableWithAggregatesFilter<"Schedule"> | number | null
    seasonYear?: IntNullableWithAggregatesFilter<"Schedule"> | number | null
    oppTeamId?: IntWithAggregatesFilter<"Schedule"> | number
    oppTeamConference?: StringNullableWithAggregatesFilter<"Schedule"> | string | null
    oppTeamDivision?: StringNullableWithAggregatesFilter<"Schedule"> | string | null
    scheduleWeek?: IntNullableWithAggregatesFilter<"Schedule"> | number | null
    gameDate?: DateTimeNullableWithAggregatesFilter<"Schedule"> | Date | string | null
    gameCity?: StringNullableWithAggregatesFilter<"Schedule"> | string | null
    gameStateProvince?: StringNullableWithAggregatesFilter<"Schedule"> | string | null
    gameCountry?: StringNullableWithAggregatesFilter<"Schedule"> | string | null
    gameLocation?: StringNullableWithAggregatesFilter<"Schedule"> | string | null
    wonLostFlag?: StringNullableWithAggregatesFilter<"Schedule"> | string | null
    homeOrAway?: StringNullableWithAggregatesFilter<"Schedule"> | string | null
    oppTeamScore?: IntNullableWithAggregatesFilter<"Schedule"> | number | null
    teamScore?: IntNullableWithAggregatesFilter<"Schedule"> | number | null
  }

  export type TeamWhereInput = {
    AND?: TeamWhereInput | TeamWhereInput[]
    OR?: TeamWhereInput[]
    NOT?: TeamWhereInput | TeamWhereInput[]
    id?: IntFilter<"Team"> | number
    name?: StringFilter<"Team"> | string
    city?: StringNullableFilter<"Team"> | string | null
    state?: StringNullableFilter<"Team"> | string | null
    conference?: StringNullableFilter<"Team"> | string | null
    division?: StringNullableFilter<"Team"> | string | null
    stadium?: StringNullableFilter<"Team"> | string | null
    scheduleId?: IntNullableFilter<"Team"> | number | null
    DraftPick?: DraftPickListRelationFilter
    PlayerTeam?: PlayerTeamListRelationFilter
    PostSeasonResult?: PostSeasonResultListRelationFilter
    Prospect?: ProspectListRelationFilter
    Schedule_Schedule_teamIdToTeam?: ScheduleListRelationFilter
    Schedule_Schedule_oppTeamIdToTeam?: ScheduleListRelationFilter
    TeamNeed?: TeamNeedListRelationFilter
  }

  export type TeamOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    city?: SortOrderInput | SortOrder
    state?: SortOrderInput | SortOrder
    conference?: SortOrderInput | SortOrder
    division?: SortOrderInput | SortOrder
    stadium?: SortOrderInput | SortOrder
    scheduleId?: SortOrderInput | SortOrder
    DraftPick?: DraftPickOrderByRelationAggregateInput
    PlayerTeam?: PlayerTeamOrderByRelationAggregateInput
    PostSeasonResult?: PostSeasonResultOrderByRelationAggregateInput
    Prospect?: ProspectOrderByRelationAggregateInput
    Schedule_Schedule_teamIdToTeam?: ScheduleOrderByRelationAggregateInput
    Schedule_Schedule_oppTeamIdToTeam?: ScheduleOrderByRelationAggregateInput
    TeamNeed?: TeamNeedOrderByRelationAggregateInput
  }

  export type TeamWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TeamWhereInput | TeamWhereInput[]
    OR?: TeamWhereInput[]
    NOT?: TeamWhereInput | TeamWhereInput[]
    name?: StringFilter<"Team"> | string
    city?: StringNullableFilter<"Team"> | string | null
    state?: StringNullableFilter<"Team"> | string | null
    conference?: StringNullableFilter<"Team"> | string | null
    division?: StringNullableFilter<"Team"> | string | null
    stadium?: StringNullableFilter<"Team"> | string | null
    scheduleId?: IntNullableFilter<"Team"> | number | null
    DraftPick?: DraftPickListRelationFilter
    PlayerTeam?: PlayerTeamListRelationFilter
    PostSeasonResult?: PostSeasonResultListRelationFilter
    Prospect?: ProspectListRelationFilter
    Schedule_Schedule_teamIdToTeam?: ScheduleListRelationFilter
    Schedule_Schedule_oppTeamIdToTeam?: ScheduleListRelationFilter
    TeamNeed?: TeamNeedListRelationFilter
  }, "id">

  export type TeamOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    city?: SortOrderInput | SortOrder
    state?: SortOrderInput | SortOrder
    conference?: SortOrderInput | SortOrder
    division?: SortOrderInput | SortOrder
    stadium?: SortOrderInput | SortOrder
    scheduleId?: SortOrderInput | SortOrder
    _count?: TeamCountOrderByAggregateInput
    _avg?: TeamAvgOrderByAggregateInput
    _max?: TeamMaxOrderByAggregateInput
    _min?: TeamMinOrderByAggregateInput
    _sum?: TeamSumOrderByAggregateInput
  }

  export type TeamScalarWhereWithAggregatesInput = {
    AND?: TeamScalarWhereWithAggregatesInput | TeamScalarWhereWithAggregatesInput[]
    OR?: TeamScalarWhereWithAggregatesInput[]
    NOT?: TeamScalarWhereWithAggregatesInput | TeamScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Team"> | number
    name?: StringWithAggregatesFilter<"Team"> | string
    city?: StringNullableWithAggregatesFilter<"Team"> | string | null
    state?: StringNullableWithAggregatesFilter<"Team"> | string | null
    conference?: StringNullableWithAggregatesFilter<"Team"> | string | null
    division?: StringNullableWithAggregatesFilter<"Team"> | string | null
    stadium?: StringNullableWithAggregatesFilter<"Team"> | string | null
    scheduleId?: IntNullableWithAggregatesFilter<"Team"> | number | null
  }

  export type TeamNeedWhereInput = {
    AND?: TeamNeedWhereInput | TeamNeedWhereInput[]
    OR?: TeamNeedWhereInput[]
    NOT?: TeamNeedWhereInput | TeamNeedWhereInput[]
    id?: IntFilter<"TeamNeed"> | number
    teamId?: IntFilter<"TeamNeed"> | number
    position?: StringFilter<"TeamNeed"> | string
    priority?: IntFilter<"TeamNeed"> | number
    createdAt?: DateTimeNullableFilter<"TeamNeed"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"TeamNeed"> | Date | string | null
    draftYear?: IntNullableFilter<"TeamNeed"> | number | null
    Team?: XOR<TeamRelationFilter, TeamWhereInput>
  }

  export type TeamNeedOrderByWithRelationInput = {
    id?: SortOrder
    teamId?: SortOrder
    position?: SortOrder
    priority?: SortOrder
    createdAt?: SortOrderInput | SortOrder
    updatedAt?: SortOrderInput | SortOrder
    draftYear?: SortOrderInput | SortOrder
    Team?: TeamOrderByWithRelationInput
  }

  export type TeamNeedWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    teamId_position?: TeamNeedTeamIdPositionCompoundUniqueInput
    AND?: TeamNeedWhereInput | TeamNeedWhereInput[]
    OR?: TeamNeedWhereInput[]
    NOT?: TeamNeedWhereInput | TeamNeedWhereInput[]
    teamId?: IntFilter<"TeamNeed"> | number
    position?: StringFilter<"TeamNeed"> | string
    priority?: IntFilter<"TeamNeed"> | number
    createdAt?: DateTimeNullableFilter<"TeamNeed"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"TeamNeed"> | Date | string | null
    draftYear?: IntNullableFilter<"TeamNeed"> | number | null
    Team?: XOR<TeamRelationFilter, TeamWhereInput>
  }, "id" | "teamId_position">

  export type TeamNeedOrderByWithAggregationInput = {
    id?: SortOrder
    teamId?: SortOrder
    position?: SortOrder
    priority?: SortOrder
    createdAt?: SortOrderInput | SortOrder
    updatedAt?: SortOrderInput | SortOrder
    draftYear?: SortOrderInput | SortOrder
    _count?: TeamNeedCountOrderByAggregateInput
    _avg?: TeamNeedAvgOrderByAggregateInput
    _max?: TeamNeedMaxOrderByAggregateInput
    _min?: TeamNeedMinOrderByAggregateInput
    _sum?: TeamNeedSumOrderByAggregateInput
  }

  export type TeamNeedScalarWhereWithAggregatesInput = {
    AND?: TeamNeedScalarWhereWithAggregatesInput | TeamNeedScalarWhereWithAggregatesInput[]
    OR?: TeamNeedScalarWhereWithAggregatesInput[]
    NOT?: TeamNeedScalarWhereWithAggregatesInput | TeamNeedScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"TeamNeed"> | number
    teamId?: IntWithAggregatesFilter<"TeamNeed"> | number
    position?: StringWithAggregatesFilter<"TeamNeed"> | string
    priority?: IntWithAggregatesFilter<"TeamNeed"> | number
    createdAt?: DateTimeNullableWithAggregatesFilter<"TeamNeed"> | Date | string | null
    updatedAt?: DateTimeNullableWithAggregatesFilter<"TeamNeed"> | Date | string | null
    draftYear?: IntNullableWithAggregatesFilter<"TeamNeed"> | number | null
  }

  export type CombineScoreCreateInput = {
    fortyTime?: number | null
    tenYardSplit?: number | null
    twentyYardShuttle?: number | null
    threeCone?: number | null
    verticalLeap?: number | null
    broadJump?: number | null
    Player?: PlayerCreateNestedOneWithoutCombineScoreInput
  }

  export type CombineScoreUncheckedCreateInput = {
    id?: number
    fortyTime?: number | null
    tenYardSplit?: number | null
    twentyYardShuttle?: number | null
    threeCone?: number | null
    verticalLeap?: number | null
    playerId?: number | null
    broadJump?: number | null
  }

  export type CombineScoreUpdateInput = {
    fortyTime?: NullableFloatFieldUpdateOperationsInput | number | null
    tenYardSplit?: NullableFloatFieldUpdateOperationsInput | number | null
    twentyYardShuttle?: NullableFloatFieldUpdateOperationsInput | number | null
    threeCone?: NullableFloatFieldUpdateOperationsInput | number | null
    verticalLeap?: NullableFloatFieldUpdateOperationsInput | number | null
    broadJump?: NullableFloatFieldUpdateOperationsInput | number | null
    Player?: PlayerUpdateOneWithoutCombineScoreNestedInput
  }

  export type CombineScoreUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    fortyTime?: NullableFloatFieldUpdateOperationsInput | number | null
    tenYardSplit?: NullableFloatFieldUpdateOperationsInput | number | null
    twentyYardShuttle?: NullableFloatFieldUpdateOperationsInput | number | null
    threeCone?: NullableFloatFieldUpdateOperationsInput | number | null
    verticalLeap?: NullableFloatFieldUpdateOperationsInput | number | null
    playerId?: NullableIntFieldUpdateOperationsInput | number | null
    broadJump?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type CombineScoreCreateManyInput = {
    id?: number
    fortyTime?: number | null
    tenYardSplit?: number | null
    twentyYardShuttle?: number | null
    threeCone?: number | null
    verticalLeap?: number | null
    playerId?: number | null
    broadJump?: number | null
  }

  export type CombineScoreUpdateManyMutationInput = {
    fortyTime?: NullableFloatFieldUpdateOperationsInput | number | null
    tenYardSplit?: NullableFloatFieldUpdateOperationsInput | number | null
    twentyYardShuttle?: NullableFloatFieldUpdateOperationsInput | number | null
    threeCone?: NullableFloatFieldUpdateOperationsInput | number | null
    verticalLeap?: NullableFloatFieldUpdateOperationsInput | number | null
    broadJump?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type CombineScoreUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    fortyTime?: NullableFloatFieldUpdateOperationsInput | number | null
    tenYardSplit?: NullableFloatFieldUpdateOperationsInput | number | null
    twentyYardShuttle?: NullableFloatFieldUpdateOperationsInput | number | null
    threeCone?: NullableFloatFieldUpdateOperationsInput | number | null
    verticalLeap?: NullableFloatFieldUpdateOperationsInput | number | null
    playerId?: NullableIntFieldUpdateOperationsInput | number | null
    broadJump?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type DraftPickCreateInput = {
    round: number
    pickNumber: number
    draftYear: number
    used?: boolean
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    originalTeam?: number | null
    Team: TeamCreateNestedOneWithoutDraftPickInput
    Player?: PlayerCreateNestedOneWithoutDraftPickInput
    Prospect_DraftPick_prospectIdToProspect?: ProspectCreateNestedOneWithoutDraftPick_DraftPick_prospectIdToProspectInput
    Prospect_Prospect_draftPickIdToDraftPick?: ProspectCreateNestedManyWithoutDraftPick_Prospect_draftPickIdToDraftPickInput
  }

  export type DraftPickUncheckedCreateInput = {
    id?: number
    round: number
    pickNumber: number
    draftYear: number
    currentTeamId: number
    prospectId?: number | null
    playerId?: number | null
    used?: boolean
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    originalTeam?: number | null
    Prospect_Prospect_draftPickIdToDraftPick?: ProspectUncheckedCreateNestedManyWithoutDraftPick_Prospect_draftPickIdToDraftPickInput
  }

  export type DraftPickUpdateInput = {
    round?: IntFieldUpdateOperationsInput | number
    pickNumber?: IntFieldUpdateOperationsInput | number
    draftYear?: IntFieldUpdateOperationsInput | number
    used?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    originalTeam?: NullableIntFieldUpdateOperationsInput | number | null
    Team?: TeamUpdateOneRequiredWithoutDraftPickNestedInput
    Player?: PlayerUpdateOneWithoutDraftPickNestedInput
    Prospect_DraftPick_prospectIdToProspect?: ProspectUpdateOneWithoutDraftPick_DraftPick_prospectIdToProspectNestedInput
    Prospect_Prospect_draftPickIdToDraftPick?: ProspectUpdateManyWithoutDraftPick_Prospect_draftPickIdToDraftPickNestedInput
  }

  export type DraftPickUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    round?: IntFieldUpdateOperationsInput | number
    pickNumber?: IntFieldUpdateOperationsInput | number
    draftYear?: IntFieldUpdateOperationsInput | number
    currentTeamId?: IntFieldUpdateOperationsInput | number
    prospectId?: NullableIntFieldUpdateOperationsInput | number | null
    playerId?: NullableIntFieldUpdateOperationsInput | number | null
    used?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    originalTeam?: NullableIntFieldUpdateOperationsInput | number | null
    Prospect_Prospect_draftPickIdToDraftPick?: ProspectUncheckedUpdateManyWithoutDraftPick_Prospect_draftPickIdToDraftPickNestedInput
  }

  export type DraftPickCreateManyInput = {
    id?: number
    round: number
    pickNumber: number
    draftYear: number
    currentTeamId: number
    prospectId?: number | null
    playerId?: number | null
    used?: boolean
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    originalTeam?: number | null
  }

  export type DraftPickUpdateManyMutationInput = {
    round?: IntFieldUpdateOperationsInput | number
    pickNumber?: IntFieldUpdateOperationsInput | number
    draftYear?: IntFieldUpdateOperationsInput | number
    used?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    originalTeam?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type DraftPickUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    round?: IntFieldUpdateOperationsInput | number
    pickNumber?: IntFieldUpdateOperationsInput | number
    draftYear?: IntFieldUpdateOperationsInput | number
    currentTeamId?: IntFieldUpdateOperationsInput | number
    prospectId?: NullableIntFieldUpdateOperationsInput | number | null
    playerId?: NullableIntFieldUpdateOperationsInput | number | null
    used?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    originalTeam?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PersonCreateInput = {
    userName: string
    emailAddress: string
    password: string
    firstName: string
    lastName: string
  }

  export type PersonUncheckedCreateInput = {
    pid?: number
    userName: string
    emailAddress: string
    password: string
    firstName: string
    lastName: string
  }

  export type PersonUpdateInput = {
    userName?: StringFieldUpdateOperationsInput | string
    emailAddress?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
  }

  export type PersonUncheckedUpdateInput = {
    pid?: IntFieldUpdateOperationsInput | number
    userName?: StringFieldUpdateOperationsInput | string
    emailAddress?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
  }

  export type PersonCreateManyInput = {
    pid?: number
    userName: string
    emailAddress: string
    password: string
    firstName: string
    lastName: string
  }

  export type PersonUpdateManyMutationInput = {
    userName?: StringFieldUpdateOperationsInput | string
    emailAddress?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
  }

  export type PersonUncheckedUpdateManyInput = {
    pid?: IntFieldUpdateOperationsInput | number
    userName?: StringFieldUpdateOperationsInput | string
    emailAddress?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
  }

  export type PlayerCreateInput = {
    firstName: string
    lastName: string
    age: number
    height?: number | null
    weight?: number | null
    handSize?: number | null
    armLength?: number | null
    homeCity?: string | null
    homeState?: string | null
    university?: string | null
    status?: string | null
    position?: string | null
    pickId?: number | null
    combineScoreId?: number | null
    yearEnteredLeague?: number | null
    CombineScore?: CombineScoreCreateNestedManyWithoutPlayerInput
    DraftPick?: DraftPickCreateNestedManyWithoutPlayerInput
    Prospect?: ProspectCreateNestedOneWithoutPlayerInput
    PlayerAward?: PlayerAwardCreateNestedManyWithoutPlayerInput
    PlayerTeam?: PlayerTeamCreateNestedManyWithoutPlayerInput
  }

  export type PlayerUncheckedCreateInput = {
    id?: number
    firstName: string
    lastName: string
    age: number
    height?: number | null
    weight?: number | null
    handSize?: number | null
    armLength?: number | null
    homeCity?: string | null
    homeState?: string | null
    university?: string | null
    status?: string | null
    position?: string | null
    pickId?: number | null
    combineScoreId?: number | null
    prospectId?: number | null
    yearEnteredLeague?: number | null
    CombineScore?: CombineScoreUncheckedCreateNestedManyWithoutPlayerInput
    DraftPick?: DraftPickUncheckedCreateNestedManyWithoutPlayerInput
    PlayerAward?: PlayerAwardUncheckedCreateNestedManyWithoutPlayerInput
    PlayerTeam?: PlayerTeamUncheckedCreateNestedManyWithoutPlayerInput
  }

  export type PlayerUpdateInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    handSize?: NullableFloatFieldUpdateOperationsInput | number | null
    armLength?: NullableFloatFieldUpdateOperationsInput | number | null
    homeCity?: NullableStringFieldUpdateOperationsInput | string | null
    homeState?: NullableStringFieldUpdateOperationsInput | string | null
    university?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    pickId?: NullableIntFieldUpdateOperationsInput | number | null
    combineScoreId?: NullableIntFieldUpdateOperationsInput | number | null
    yearEnteredLeague?: NullableIntFieldUpdateOperationsInput | number | null
    CombineScore?: CombineScoreUpdateManyWithoutPlayerNestedInput
    DraftPick?: DraftPickUpdateManyWithoutPlayerNestedInput
    Prospect?: ProspectUpdateOneWithoutPlayerNestedInput
    PlayerAward?: PlayerAwardUpdateManyWithoutPlayerNestedInput
    PlayerTeam?: PlayerTeamUpdateManyWithoutPlayerNestedInput
  }

  export type PlayerUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    handSize?: NullableFloatFieldUpdateOperationsInput | number | null
    armLength?: NullableFloatFieldUpdateOperationsInput | number | null
    homeCity?: NullableStringFieldUpdateOperationsInput | string | null
    homeState?: NullableStringFieldUpdateOperationsInput | string | null
    university?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    pickId?: NullableIntFieldUpdateOperationsInput | number | null
    combineScoreId?: NullableIntFieldUpdateOperationsInput | number | null
    prospectId?: NullableIntFieldUpdateOperationsInput | number | null
    yearEnteredLeague?: NullableIntFieldUpdateOperationsInput | number | null
    CombineScore?: CombineScoreUncheckedUpdateManyWithoutPlayerNestedInput
    DraftPick?: DraftPickUncheckedUpdateManyWithoutPlayerNestedInput
    PlayerAward?: PlayerAwardUncheckedUpdateManyWithoutPlayerNestedInput
    PlayerTeam?: PlayerTeamUncheckedUpdateManyWithoutPlayerNestedInput
  }

  export type PlayerCreateManyInput = {
    id?: number
    firstName: string
    lastName: string
    age: number
    height?: number | null
    weight?: number | null
    handSize?: number | null
    armLength?: number | null
    homeCity?: string | null
    homeState?: string | null
    university?: string | null
    status?: string | null
    position?: string | null
    pickId?: number | null
    combineScoreId?: number | null
    prospectId?: number | null
    yearEnteredLeague?: number | null
  }

  export type PlayerUpdateManyMutationInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    handSize?: NullableFloatFieldUpdateOperationsInput | number | null
    armLength?: NullableFloatFieldUpdateOperationsInput | number | null
    homeCity?: NullableStringFieldUpdateOperationsInput | string | null
    homeState?: NullableStringFieldUpdateOperationsInput | string | null
    university?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    pickId?: NullableIntFieldUpdateOperationsInput | number | null
    combineScoreId?: NullableIntFieldUpdateOperationsInput | number | null
    yearEnteredLeague?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PlayerUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    handSize?: NullableFloatFieldUpdateOperationsInput | number | null
    armLength?: NullableFloatFieldUpdateOperationsInput | number | null
    homeCity?: NullableStringFieldUpdateOperationsInput | string | null
    homeState?: NullableStringFieldUpdateOperationsInput | string | null
    university?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    pickId?: NullableIntFieldUpdateOperationsInput | number | null
    combineScoreId?: NullableIntFieldUpdateOperationsInput | number | null
    prospectId?: NullableIntFieldUpdateOperationsInput | number | null
    yearEnteredLeague?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PlayerAwardCreateInput = {
    awardName?: string | null
    yearAwarded?: number | null
    Player: PlayerCreateNestedOneWithoutPlayerAwardInput
  }

  export type PlayerAwardUncheckedCreateInput = {
    id?: number
    playerId: number
    awardName?: string | null
    yearAwarded?: number | null
  }

  export type PlayerAwardUpdateInput = {
    awardName?: NullableStringFieldUpdateOperationsInput | string | null
    yearAwarded?: NullableIntFieldUpdateOperationsInput | number | null
    Player?: PlayerUpdateOneRequiredWithoutPlayerAwardNestedInput
  }

  export type PlayerAwardUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    playerId?: IntFieldUpdateOperationsInput | number
    awardName?: NullableStringFieldUpdateOperationsInput | string | null
    yearAwarded?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PlayerAwardCreateManyInput = {
    id?: number
    playerId: number
    awardName?: string | null
    yearAwarded?: number | null
  }

  export type PlayerAwardUpdateManyMutationInput = {
    awardName?: NullableStringFieldUpdateOperationsInput | string | null
    yearAwarded?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PlayerAwardUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    playerId?: IntFieldUpdateOperationsInput | number
    awardName?: NullableStringFieldUpdateOperationsInput | string | null
    yearAwarded?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PlayerTeamCreateInput = {
    currentTeam?: boolean
    startDate?: Date | string | null
    endDate?: Date | string | null
    jerseyNumber?: number | null
    contractValue?: number | null
    contractLength?: number | null
    Player: PlayerCreateNestedOneWithoutPlayerTeamInput
    Team: TeamCreateNestedOneWithoutPlayerTeamInput
  }

  export type PlayerTeamUncheckedCreateInput = {
    id?: number
    playerId: number
    teamId: number
    currentTeam?: boolean
    startDate?: Date | string | null
    endDate?: Date | string | null
    jerseyNumber?: number | null
    contractValue?: number | null
    contractLength?: number | null
  }

  export type PlayerTeamUpdateInput = {
    currentTeam?: BoolFieldUpdateOperationsInput | boolean
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    jerseyNumber?: NullableIntFieldUpdateOperationsInput | number | null
    contractValue?: NullableIntFieldUpdateOperationsInput | number | null
    contractLength?: NullableIntFieldUpdateOperationsInput | number | null
    Player?: PlayerUpdateOneRequiredWithoutPlayerTeamNestedInput
    Team?: TeamUpdateOneRequiredWithoutPlayerTeamNestedInput
  }

  export type PlayerTeamUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    playerId?: IntFieldUpdateOperationsInput | number
    teamId?: IntFieldUpdateOperationsInput | number
    currentTeam?: BoolFieldUpdateOperationsInput | boolean
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    jerseyNumber?: NullableIntFieldUpdateOperationsInput | number | null
    contractValue?: NullableIntFieldUpdateOperationsInput | number | null
    contractLength?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PlayerTeamCreateManyInput = {
    id?: number
    playerId: number
    teamId: number
    currentTeam?: boolean
    startDate?: Date | string | null
    endDate?: Date | string | null
    jerseyNumber?: number | null
    contractValue?: number | null
    contractLength?: number | null
  }

  export type PlayerTeamUpdateManyMutationInput = {
    currentTeam?: BoolFieldUpdateOperationsInput | boolean
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    jerseyNumber?: NullableIntFieldUpdateOperationsInput | number | null
    contractValue?: NullableIntFieldUpdateOperationsInput | number | null
    contractLength?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PlayerTeamUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    playerId?: IntFieldUpdateOperationsInput | number
    teamId?: IntFieldUpdateOperationsInput | number
    currentTeam?: BoolFieldUpdateOperationsInput | boolean
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    jerseyNumber?: NullableIntFieldUpdateOperationsInput | number | null
    contractValue?: NullableIntFieldUpdateOperationsInput | number | null
    contractLength?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PostSeasonResultCreateInput = {
    playoffYear?: number | null
    lastRoundReached?: string | null
    winLose?: string | null
    opponentScore?: number | null
    teamScore?: number | null
    Team?: TeamCreateNestedOneWithoutPostSeasonResultInput
  }

  export type PostSeasonResultUncheckedCreateInput = {
    id?: number
    playoffYear?: number | null
    lastRoundReached?: string | null
    winLose?: string | null
    opponentScore?: number | null
    teamScore?: number | null
    teamId?: number | null
  }

  export type PostSeasonResultUpdateInput = {
    playoffYear?: NullableIntFieldUpdateOperationsInput | number | null
    lastRoundReached?: NullableStringFieldUpdateOperationsInput | string | null
    winLose?: NullableStringFieldUpdateOperationsInput | string | null
    opponentScore?: NullableIntFieldUpdateOperationsInput | number | null
    teamScore?: NullableIntFieldUpdateOperationsInput | number | null
    Team?: TeamUpdateOneWithoutPostSeasonResultNestedInput
  }

  export type PostSeasonResultUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    playoffYear?: NullableIntFieldUpdateOperationsInput | number | null
    lastRoundReached?: NullableStringFieldUpdateOperationsInput | string | null
    winLose?: NullableStringFieldUpdateOperationsInput | string | null
    opponentScore?: NullableIntFieldUpdateOperationsInput | number | null
    teamScore?: NullableIntFieldUpdateOperationsInput | number | null
    teamId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PostSeasonResultCreateManyInput = {
    id?: number
    playoffYear?: number | null
    lastRoundReached?: string | null
    winLose?: string | null
    opponentScore?: number | null
    teamScore?: number | null
    teamId?: number | null
  }

  export type PostSeasonResultUpdateManyMutationInput = {
    playoffYear?: NullableIntFieldUpdateOperationsInput | number | null
    lastRoundReached?: NullableStringFieldUpdateOperationsInput | string | null
    winLose?: NullableStringFieldUpdateOperationsInput | string | null
    opponentScore?: NullableIntFieldUpdateOperationsInput | number | null
    teamScore?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PostSeasonResultUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    playoffYear?: NullableIntFieldUpdateOperationsInput | number | null
    lastRoundReached?: NullableStringFieldUpdateOperationsInput | string | null
    winLose?: NullableStringFieldUpdateOperationsInput | string | null
    opponentScore?: NullableIntFieldUpdateOperationsInput | number | null
    teamScore?: NullableIntFieldUpdateOperationsInput | number | null
    teamId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ProspectCreateInput = {
    firstName: string
    lastName: string
    position: string
    college: string
    height: number
    weight: number
    handSize?: number | null
    armLength?: number | null
    homeCity?: string | null
    homeState?: string | null
    fortyTime?: number | null
    tenYardSplit?: number | null
    verticalLeap?: number | null
    broadJump?: number | null
    threeCone?: number | null
    twentyYardShuttle?: number | null
    benchPress?: number | null
    drafted?: boolean
    draftYear?: number | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    DraftPick_DraftPick_prospectIdToProspect?: DraftPickCreateNestedManyWithoutProspect_DraftPick_prospectIdToProspectInput
    Player?: PlayerCreateNestedManyWithoutProspectInput
    DraftPick_Prospect_draftPickIdToDraftPick?: DraftPickCreateNestedOneWithoutProspect_Prospect_draftPickIdToDraftPickInput
    Team?: TeamCreateNestedOneWithoutProspectInput
  }

  export type ProspectUncheckedCreateInput = {
    id?: number
    firstName: string
    lastName: string
    position: string
    college: string
    height: number
    weight: number
    handSize?: number | null
    armLength?: number | null
    homeCity?: string | null
    homeState?: string | null
    fortyTime?: number | null
    tenYardSplit?: number | null
    verticalLeap?: number | null
    broadJump?: number | null
    threeCone?: number | null
    twentyYardShuttle?: number | null
    benchPress?: number | null
    drafted?: boolean
    draftYear?: number | null
    teamId?: number | null
    draftPickId?: number | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    DraftPick_DraftPick_prospectIdToProspect?: DraftPickUncheckedCreateNestedManyWithoutProspect_DraftPick_prospectIdToProspectInput
    Player?: PlayerUncheckedCreateNestedManyWithoutProspectInput
  }

  export type ProspectUpdateInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    college?: StringFieldUpdateOperationsInput | string
    height?: FloatFieldUpdateOperationsInput | number
    weight?: FloatFieldUpdateOperationsInput | number
    handSize?: NullableFloatFieldUpdateOperationsInput | number | null
    armLength?: NullableFloatFieldUpdateOperationsInput | number | null
    homeCity?: NullableStringFieldUpdateOperationsInput | string | null
    homeState?: NullableStringFieldUpdateOperationsInput | string | null
    fortyTime?: NullableFloatFieldUpdateOperationsInput | number | null
    tenYardSplit?: NullableFloatFieldUpdateOperationsInput | number | null
    verticalLeap?: NullableFloatFieldUpdateOperationsInput | number | null
    broadJump?: NullableFloatFieldUpdateOperationsInput | number | null
    threeCone?: NullableFloatFieldUpdateOperationsInput | number | null
    twentyYardShuttle?: NullableFloatFieldUpdateOperationsInput | number | null
    benchPress?: NullableIntFieldUpdateOperationsInput | number | null
    drafted?: BoolFieldUpdateOperationsInput | boolean
    draftYear?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    DraftPick_DraftPick_prospectIdToProspect?: DraftPickUpdateManyWithoutProspect_DraftPick_prospectIdToProspectNestedInput
    Player?: PlayerUpdateManyWithoutProspectNestedInput
    DraftPick_Prospect_draftPickIdToDraftPick?: DraftPickUpdateOneWithoutProspect_Prospect_draftPickIdToDraftPickNestedInput
    Team?: TeamUpdateOneWithoutProspectNestedInput
  }

  export type ProspectUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    college?: StringFieldUpdateOperationsInput | string
    height?: FloatFieldUpdateOperationsInput | number
    weight?: FloatFieldUpdateOperationsInput | number
    handSize?: NullableFloatFieldUpdateOperationsInput | number | null
    armLength?: NullableFloatFieldUpdateOperationsInput | number | null
    homeCity?: NullableStringFieldUpdateOperationsInput | string | null
    homeState?: NullableStringFieldUpdateOperationsInput | string | null
    fortyTime?: NullableFloatFieldUpdateOperationsInput | number | null
    tenYardSplit?: NullableFloatFieldUpdateOperationsInput | number | null
    verticalLeap?: NullableFloatFieldUpdateOperationsInput | number | null
    broadJump?: NullableFloatFieldUpdateOperationsInput | number | null
    threeCone?: NullableFloatFieldUpdateOperationsInput | number | null
    twentyYardShuttle?: NullableFloatFieldUpdateOperationsInput | number | null
    benchPress?: NullableIntFieldUpdateOperationsInput | number | null
    drafted?: BoolFieldUpdateOperationsInput | boolean
    draftYear?: NullableIntFieldUpdateOperationsInput | number | null
    teamId?: NullableIntFieldUpdateOperationsInput | number | null
    draftPickId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    DraftPick_DraftPick_prospectIdToProspect?: DraftPickUncheckedUpdateManyWithoutProspect_DraftPick_prospectIdToProspectNestedInput
    Player?: PlayerUncheckedUpdateManyWithoutProspectNestedInput
  }

  export type ProspectCreateManyInput = {
    id?: number
    firstName: string
    lastName: string
    position: string
    college: string
    height: number
    weight: number
    handSize?: number | null
    armLength?: number | null
    homeCity?: string | null
    homeState?: string | null
    fortyTime?: number | null
    tenYardSplit?: number | null
    verticalLeap?: number | null
    broadJump?: number | null
    threeCone?: number | null
    twentyYardShuttle?: number | null
    benchPress?: number | null
    drafted?: boolean
    draftYear?: number | null
    teamId?: number | null
    draftPickId?: number | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type ProspectUpdateManyMutationInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    college?: StringFieldUpdateOperationsInput | string
    height?: FloatFieldUpdateOperationsInput | number
    weight?: FloatFieldUpdateOperationsInput | number
    handSize?: NullableFloatFieldUpdateOperationsInput | number | null
    armLength?: NullableFloatFieldUpdateOperationsInput | number | null
    homeCity?: NullableStringFieldUpdateOperationsInput | string | null
    homeState?: NullableStringFieldUpdateOperationsInput | string | null
    fortyTime?: NullableFloatFieldUpdateOperationsInput | number | null
    tenYardSplit?: NullableFloatFieldUpdateOperationsInput | number | null
    verticalLeap?: NullableFloatFieldUpdateOperationsInput | number | null
    broadJump?: NullableFloatFieldUpdateOperationsInput | number | null
    threeCone?: NullableFloatFieldUpdateOperationsInput | number | null
    twentyYardShuttle?: NullableFloatFieldUpdateOperationsInput | number | null
    benchPress?: NullableIntFieldUpdateOperationsInput | number | null
    drafted?: BoolFieldUpdateOperationsInput | boolean
    draftYear?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ProspectUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    college?: StringFieldUpdateOperationsInput | string
    height?: FloatFieldUpdateOperationsInput | number
    weight?: FloatFieldUpdateOperationsInput | number
    handSize?: NullableFloatFieldUpdateOperationsInput | number | null
    armLength?: NullableFloatFieldUpdateOperationsInput | number | null
    homeCity?: NullableStringFieldUpdateOperationsInput | string | null
    homeState?: NullableStringFieldUpdateOperationsInput | string | null
    fortyTime?: NullableFloatFieldUpdateOperationsInput | number | null
    tenYardSplit?: NullableFloatFieldUpdateOperationsInput | number | null
    verticalLeap?: NullableFloatFieldUpdateOperationsInput | number | null
    broadJump?: NullableFloatFieldUpdateOperationsInput | number | null
    threeCone?: NullableFloatFieldUpdateOperationsInput | number | null
    twentyYardShuttle?: NullableFloatFieldUpdateOperationsInput | number | null
    benchPress?: NullableIntFieldUpdateOperationsInput | number | null
    drafted?: BoolFieldUpdateOperationsInput | boolean
    draftYear?: NullableIntFieldUpdateOperationsInput | number | null
    teamId?: NullableIntFieldUpdateOperationsInput | number | null
    draftPickId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ScheduleCreateInput = {
    seasonYear?: number | null
    oppTeamConference?: string | null
    oppTeamDivision?: string | null
    scheduleWeek?: number | null
    gameDate?: Date | string | null
    gameCity?: string | null
    gameStateProvince?: string | null
    gameCountry?: string | null
    gameLocation?: string | null
    wonLostFlag?: string | null
    homeOrAway?: string | null
    oppTeamScore?: number | null
    teamScore?: number | null
    Team_Schedule_teamIdToTeam?: TeamCreateNestedOneWithoutSchedule_Schedule_teamIdToTeamInput
    Team_Schedule_oppTeamIdToTeam: TeamCreateNestedOneWithoutSchedule_Schedule_oppTeamIdToTeamInput
  }

  export type ScheduleUncheckedCreateInput = {
    id?: number
    teamId?: number | null
    seasonYear?: number | null
    oppTeamId: number
    oppTeamConference?: string | null
    oppTeamDivision?: string | null
    scheduleWeek?: number | null
    gameDate?: Date | string | null
    gameCity?: string | null
    gameStateProvince?: string | null
    gameCountry?: string | null
    gameLocation?: string | null
    wonLostFlag?: string | null
    homeOrAway?: string | null
    oppTeamScore?: number | null
    teamScore?: number | null
  }

  export type ScheduleUpdateInput = {
    seasonYear?: NullableIntFieldUpdateOperationsInput | number | null
    oppTeamConference?: NullableStringFieldUpdateOperationsInput | string | null
    oppTeamDivision?: NullableStringFieldUpdateOperationsInput | string | null
    scheduleWeek?: NullableIntFieldUpdateOperationsInput | number | null
    gameDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gameCity?: NullableStringFieldUpdateOperationsInput | string | null
    gameStateProvince?: NullableStringFieldUpdateOperationsInput | string | null
    gameCountry?: NullableStringFieldUpdateOperationsInput | string | null
    gameLocation?: NullableStringFieldUpdateOperationsInput | string | null
    wonLostFlag?: NullableStringFieldUpdateOperationsInput | string | null
    homeOrAway?: NullableStringFieldUpdateOperationsInput | string | null
    oppTeamScore?: NullableIntFieldUpdateOperationsInput | number | null
    teamScore?: NullableIntFieldUpdateOperationsInput | number | null
    Team_Schedule_teamIdToTeam?: TeamUpdateOneWithoutSchedule_Schedule_teamIdToTeamNestedInput
    Team_Schedule_oppTeamIdToTeam?: TeamUpdateOneRequiredWithoutSchedule_Schedule_oppTeamIdToTeamNestedInput
  }

  export type ScheduleUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    teamId?: NullableIntFieldUpdateOperationsInput | number | null
    seasonYear?: NullableIntFieldUpdateOperationsInput | number | null
    oppTeamId?: IntFieldUpdateOperationsInput | number
    oppTeamConference?: NullableStringFieldUpdateOperationsInput | string | null
    oppTeamDivision?: NullableStringFieldUpdateOperationsInput | string | null
    scheduleWeek?: NullableIntFieldUpdateOperationsInput | number | null
    gameDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gameCity?: NullableStringFieldUpdateOperationsInput | string | null
    gameStateProvince?: NullableStringFieldUpdateOperationsInput | string | null
    gameCountry?: NullableStringFieldUpdateOperationsInput | string | null
    gameLocation?: NullableStringFieldUpdateOperationsInput | string | null
    wonLostFlag?: NullableStringFieldUpdateOperationsInput | string | null
    homeOrAway?: NullableStringFieldUpdateOperationsInput | string | null
    oppTeamScore?: NullableIntFieldUpdateOperationsInput | number | null
    teamScore?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ScheduleCreateManyInput = {
    id?: number
    teamId?: number | null
    seasonYear?: number | null
    oppTeamId: number
    oppTeamConference?: string | null
    oppTeamDivision?: string | null
    scheduleWeek?: number | null
    gameDate?: Date | string | null
    gameCity?: string | null
    gameStateProvince?: string | null
    gameCountry?: string | null
    gameLocation?: string | null
    wonLostFlag?: string | null
    homeOrAway?: string | null
    oppTeamScore?: number | null
    teamScore?: number | null
  }

  export type ScheduleUpdateManyMutationInput = {
    seasonYear?: NullableIntFieldUpdateOperationsInput | number | null
    oppTeamConference?: NullableStringFieldUpdateOperationsInput | string | null
    oppTeamDivision?: NullableStringFieldUpdateOperationsInput | string | null
    scheduleWeek?: NullableIntFieldUpdateOperationsInput | number | null
    gameDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gameCity?: NullableStringFieldUpdateOperationsInput | string | null
    gameStateProvince?: NullableStringFieldUpdateOperationsInput | string | null
    gameCountry?: NullableStringFieldUpdateOperationsInput | string | null
    gameLocation?: NullableStringFieldUpdateOperationsInput | string | null
    wonLostFlag?: NullableStringFieldUpdateOperationsInput | string | null
    homeOrAway?: NullableStringFieldUpdateOperationsInput | string | null
    oppTeamScore?: NullableIntFieldUpdateOperationsInput | number | null
    teamScore?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ScheduleUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    teamId?: NullableIntFieldUpdateOperationsInput | number | null
    seasonYear?: NullableIntFieldUpdateOperationsInput | number | null
    oppTeamId?: IntFieldUpdateOperationsInput | number
    oppTeamConference?: NullableStringFieldUpdateOperationsInput | string | null
    oppTeamDivision?: NullableStringFieldUpdateOperationsInput | string | null
    scheduleWeek?: NullableIntFieldUpdateOperationsInput | number | null
    gameDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gameCity?: NullableStringFieldUpdateOperationsInput | string | null
    gameStateProvince?: NullableStringFieldUpdateOperationsInput | string | null
    gameCountry?: NullableStringFieldUpdateOperationsInput | string | null
    gameLocation?: NullableStringFieldUpdateOperationsInput | string | null
    wonLostFlag?: NullableStringFieldUpdateOperationsInput | string | null
    homeOrAway?: NullableStringFieldUpdateOperationsInput | string | null
    oppTeamScore?: NullableIntFieldUpdateOperationsInput | number | null
    teamScore?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type TeamCreateInput = {
    name: string
    city?: string | null
    state?: string | null
    conference?: string | null
    division?: string | null
    stadium?: string | null
    scheduleId?: number | null
    DraftPick?: DraftPickCreateNestedManyWithoutTeamInput
    PlayerTeam?: PlayerTeamCreateNestedManyWithoutTeamInput
    PostSeasonResult?: PostSeasonResultCreateNestedManyWithoutTeamInput
    Prospect?: ProspectCreateNestedManyWithoutTeamInput
    Schedule_Schedule_teamIdToTeam?: ScheduleCreateNestedManyWithoutTeam_Schedule_teamIdToTeamInput
    Schedule_Schedule_oppTeamIdToTeam?: ScheduleCreateNestedManyWithoutTeam_Schedule_oppTeamIdToTeamInput
    TeamNeed?: TeamNeedCreateNestedManyWithoutTeamInput
  }

  export type TeamUncheckedCreateInput = {
    id?: number
    name: string
    city?: string | null
    state?: string | null
    conference?: string | null
    division?: string | null
    stadium?: string | null
    scheduleId?: number | null
    DraftPick?: DraftPickUncheckedCreateNestedManyWithoutTeamInput
    PlayerTeam?: PlayerTeamUncheckedCreateNestedManyWithoutTeamInput
    PostSeasonResult?: PostSeasonResultUncheckedCreateNestedManyWithoutTeamInput
    Prospect?: ProspectUncheckedCreateNestedManyWithoutTeamInput
    Schedule_Schedule_teamIdToTeam?: ScheduleUncheckedCreateNestedManyWithoutTeam_Schedule_teamIdToTeamInput
    Schedule_Schedule_oppTeamIdToTeam?: ScheduleUncheckedCreateNestedManyWithoutTeam_Schedule_oppTeamIdToTeamInput
    TeamNeed?: TeamNeedUncheckedCreateNestedManyWithoutTeamInput
  }

  export type TeamUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    conference?: NullableStringFieldUpdateOperationsInput | string | null
    division?: NullableStringFieldUpdateOperationsInput | string | null
    stadium?: NullableStringFieldUpdateOperationsInput | string | null
    scheduleId?: NullableIntFieldUpdateOperationsInput | number | null
    DraftPick?: DraftPickUpdateManyWithoutTeamNestedInput
    PlayerTeam?: PlayerTeamUpdateManyWithoutTeamNestedInput
    PostSeasonResult?: PostSeasonResultUpdateManyWithoutTeamNestedInput
    Prospect?: ProspectUpdateManyWithoutTeamNestedInput
    Schedule_Schedule_teamIdToTeam?: ScheduleUpdateManyWithoutTeam_Schedule_teamIdToTeamNestedInput
    Schedule_Schedule_oppTeamIdToTeam?: ScheduleUpdateManyWithoutTeam_Schedule_oppTeamIdToTeamNestedInput
    TeamNeed?: TeamNeedUpdateManyWithoutTeamNestedInput
  }

  export type TeamUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    conference?: NullableStringFieldUpdateOperationsInput | string | null
    division?: NullableStringFieldUpdateOperationsInput | string | null
    stadium?: NullableStringFieldUpdateOperationsInput | string | null
    scheduleId?: NullableIntFieldUpdateOperationsInput | number | null
    DraftPick?: DraftPickUncheckedUpdateManyWithoutTeamNestedInput
    PlayerTeam?: PlayerTeamUncheckedUpdateManyWithoutTeamNestedInput
    PostSeasonResult?: PostSeasonResultUncheckedUpdateManyWithoutTeamNestedInput
    Prospect?: ProspectUncheckedUpdateManyWithoutTeamNestedInput
    Schedule_Schedule_teamIdToTeam?: ScheduleUncheckedUpdateManyWithoutTeam_Schedule_teamIdToTeamNestedInput
    Schedule_Schedule_oppTeamIdToTeam?: ScheduleUncheckedUpdateManyWithoutTeam_Schedule_oppTeamIdToTeamNestedInput
    TeamNeed?: TeamNeedUncheckedUpdateManyWithoutTeamNestedInput
  }

  export type TeamCreateManyInput = {
    id?: number
    name: string
    city?: string | null
    state?: string | null
    conference?: string | null
    division?: string | null
    stadium?: string | null
    scheduleId?: number | null
  }

  export type TeamUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    conference?: NullableStringFieldUpdateOperationsInput | string | null
    division?: NullableStringFieldUpdateOperationsInput | string | null
    stadium?: NullableStringFieldUpdateOperationsInput | string | null
    scheduleId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type TeamUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    conference?: NullableStringFieldUpdateOperationsInput | string | null
    division?: NullableStringFieldUpdateOperationsInput | string | null
    stadium?: NullableStringFieldUpdateOperationsInput | string | null
    scheduleId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type TeamNeedCreateInput = {
    position: string
    priority?: number
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    draftYear?: number | null
    Team: TeamCreateNestedOneWithoutTeamNeedInput
  }

  export type TeamNeedUncheckedCreateInput = {
    id?: number
    teamId: number
    position: string
    priority?: number
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    draftYear?: number | null
  }

  export type TeamNeedUpdateInput = {
    position?: StringFieldUpdateOperationsInput | string
    priority?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    draftYear?: NullableIntFieldUpdateOperationsInput | number | null
    Team?: TeamUpdateOneRequiredWithoutTeamNeedNestedInput
  }

  export type TeamNeedUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    teamId?: IntFieldUpdateOperationsInput | number
    position?: StringFieldUpdateOperationsInput | string
    priority?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    draftYear?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type TeamNeedCreateManyInput = {
    id?: number
    teamId: number
    position: string
    priority?: number
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    draftYear?: number | null
  }

  export type TeamNeedUpdateManyMutationInput = {
    position?: StringFieldUpdateOperationsInput | string
    priority?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    draftYear?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type TeamNeedUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    teamId?: IntFieldUpdateOperationsInput | number
    position?: StringFieldUpdateOperationsInput | string
    priority?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    draftYear?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type PlayerNullableRelationFilter = {
    is?: PlayerWhereInput | null
    isNot?: PlayerWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type CombineScoreCountOrderByAggregateInput = {
    id?: SortOrder
    fortyTime?: SortOrder
    tenYardSplit?: SortOrder
    twentyYardShuttle?: SortOrder
    threeCone?: SortOrder
    verticalLeap?: SortOrder
    playerId?: SortOrder
    broadJump?: SortOrder
  }

  export type CombineScoreAvgOrderByAggregateInput = {
    id?: SortOrder
    fortyTime?: SortOrder
    tenYardSplit?: SortOrder
    twentyYardShuttle?: SortOrder
    threeCone?: SortOrder
    verticalLeap?: SortOrder
    playerId?: SortOrder
    broadJump?: SortOrder
  }

  export type CombineScoreMaxOrderByAggregateInput = {
    id?: SortOrder
    fortyTime?: SortOrder
    tenYardSplit?: SortOrder
    twentyYardShuttle?: SortOrder
    threeCone?: SortOrder
    verticalLeap?: SortOrder
    playerId?: SortOrder
    broadJump?: SortOrder
  }

  export type CombineScoreMinOrderByAggregateInput = {
    id?: SortOrder
    fortyTime?: SortOrder
    tenYardSplit?: SortOrder
    twentyYardShuttle?: SortOrder
    threeCone?: SortOrder
    verticalLeap?: SortOrder
    playerId?: SortOrder
    broadJump?: SortOrder
  }

  export type CombineScoreSumOrderByAggregateInput = {
    id?: SortOrder
    fortyTime?: SortOrder
    tenYardSplit?: SortOrder
    twentyYardShuttle?: SortOrder
    threeCone?: SortOrder
    verticalLeap?: SortOrder
    playerId?: SortOrder
    broadJump?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type TeamRelationFilter = {
    is?: TeamWhereInput
    isNot?: TeamWhereInput
  }

  export type ProspectNullableRelationFilter = {
    is?: ProspectWhereInput | null
    isNot?: ProspectWhereInput | null
  }

  export type ProspectListRelationFilter = {
    every?: ProspectWhereInput
    some?: ProspectWhereInput
    none?: ProspectWhereInput
  }

  export type ProspectOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DraftPickDraftYearRoundPickNumberCompoundUniqueInput = {
    draftYear: number
    round: number
    pickNumber: number
  }

  export type DraftPickCountOrderByAggregateInput = {
    id?: SortOrder
    round?: SortOrder
    pickNumber?: SortOrder
    draftYear?: SortOrder
    currentTeamId?: SortOrder
    prospectId?: SortOrder
    playerId?: SortOrder
    used?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    originalTeam?: SortOrder
  }

  export type DraftPickAvgOrderByAggregateInput = {
    id?: SortOrder
    round?: SortOrder
    pickNumber?: SortOrder
    draftYear?: SortOrder
    currentTeamId?: SortOrder
    prospectId?: SortOrder
    playerId?: SortOrder
    originalTeam?: SortOrder
  }

  export type DraftPickMaxOrderByAggregateInput = {
    id?: SortOrder
    round?: SortOrder
    pickNumber?: SortOrder
    draftYear?: SortOrder
    currentTeamId?: SortOrder
    prospectId?: SortOrder
    playerId?: SortOrder
    used?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    originalTeam?: SortOrder
  }

  export type DraftPickMinOrderByAggregateInput = {
    id?: SortOrder
    round?: SortOrder
    pickNumber?: SortOrder
    draftYear?: SortOrder
    currentTeamId?: SortOrder
    prospectId?: SortOrder
    playerId?: SortOrder
    used?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    originalTeam?: SortOrder
  }

  export type DraftPickSumOrderByAggregateInput = {
    id?: SortOrder
    round?: SortOrder
    pickNumber?: SortOrder
    draftYear?: SortOrder
    currentTeamId?: SortOrder
    prospectId?: SortOrder
    playerId?: SortOrder
    originalTeam?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type PersonCountOrderByAggregateInput = {
    pid?: SortOrder
    userName?: SortOrder
    emailAddress?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
  }

  export type PersonAvgOrderByAggregateInput = {
    pid?: SortOrder
  }

  export type PersonMaxOrderByAggregateInput = {
    pid?: SortOrder
    userName?: SortOrder
    emailAddress?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
  }

  export type PersonMinOrderByAggregateInput = {
    pid?: SortOrder
    userName?: SortOrder
    emailAddress?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
  }

  export type PersonSumOrderByAggregateInput = {
    pid?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type CombineScoreListRelationFilter = {
    every?: CombineScoreWhereInput
    some?: CombineScoreWhereInput
    none?: CombineScoreWhereInput
  }

  export type DraftPickListRelationFilter = {
    every?: DraftPickWhereInput
    some?: DraftPickWhereInput
    none?: DraftPickWhereInput
  }

  export type PlayerAwardListRelationFilter = {
    every?: PlayerAwardWhereInput
    some?: PlayerAwardWhereInput
    none?: PlayerAwardWhereInput
  }

  export type PlayerTeamListRelationFilter = {
    every?: PlayerTeamWhereInput
    some?: PlayerTeamWhereInput
    none?: PlayerTeamWhereInput
  }

  export type CombineScoreOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DraftPickOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PlayerAwardOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PlayerTeamOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PlayerCountOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    age?: SortOrder
    height?: SortOrder
    weight?: SortOrder
    handSize?: SortOrder
    armLength?: SortOrder
    homeCity?: SortOrder
    homeState?: SortOrder
    university?: SortOrder
    status?: SortOrder
    position?: SortOrder
    pickId?: SortOrder
    combineScoreId?: SortOrder
    prospectId?: SortOrder
    yearEnteredLeague?: SortOrder
  }

  export type PlayerAvgOrderByAggregateInput = {
    id?: SortOrder
    age?: SortOrder
    height?: SortOrder
    weight?: SortOrder
    handSize?: SortOrder
    armLength?: SortOrder
    pickId?: SortOrder
    combineScoreId?: SortOrder
    prospectId?: SortOrder
    yearEnteredLeague?: SortOrder
  }

  export type PlayerMaxOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    age?: SortOrder
    height?: SortOrder
    weight?: SortOrder
    handSize?: SortOrder
    armLength?: SortOrder
    homeCity?: SortOrder
    homeState?: SortOrder
    university?: SortOrder
    status?: SortOrder
    position?: SortOrder
    pickId?: SortOrder
    combineScoreId?: SortOrder
    prospectId?: SortOrder
    yearEnteredLeague?: SortOrder
  }

  export type PlayerMinOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    age?: SortOrder
    height?: SortOrder
    weight?: SortOrder
    handSize?: SortOrder
    armLength?: SortOrder
    homeCity?: SortOrder
    homeState?: SortOrder
    university?: SortOrder
    status?: SortOrder
    position?: SortOrder
    pickId?: SortOrder
    combineScoreId?: SortOrder
    prospectId?: SortOrder
    yearEnteredLeague?: SortOrder
  }

  export type PlayerSumOrderByAggregateInput = {
    id?: SortOrder
    age?: SortOrder
    height?: SortOrder
    weight?: SortOrder
    handSize?: SortOrder
    armLength?: SortOrder
    pickId?: SortOrder
    combineScoreId?: SortOrder
    prospectId?: SortOrder
    yearEnteredLeague?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type PlayerRelationFilter = {
    is?: PlayerWhereInput
    isNot?: PlayerWhereInput
  }

  export type PlayerAwardCountOrderByAggregateInput = {
    id?: SortOrder
    playerId?: SortOrder
    awardName?: SortOrder
    yearAwarded?: SortOrder
  }

  export type PlayerAwardAvgOrderByAggregateInput = {
    id?: SortOrder
    playerId?: SortOrder
    yearAwarded?: SortOrder
  }

  export type PlayerAwardMaxOrderByAggregateInput = {
    id?: SortOrder
    playerId?: SortOrder
    awardName?: SortOrder
    yearAwarded?: SortOrder
  }

  export type PlayerAwardMinOrderByAggregateInput = {
    id?: SortOrder
    playerId?: SortOrder
    awardName?: SortOrder
    yearAwarded?: SortOrder
  }

  export type PlayerAwardSumOrderByAggregateInput = {
    id?: SortOrder
    playerId?: SortOrder
    yearAwarded?: SortOrder
  }

  export type PlayerTeamCountOrderByAggregateInput = {
    id?: SortOrder
    playerId?: SortOrder
    teamId?: SortOrder
    currentTeam?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    jerseyNumber?: SortOrder
    contractValue?: SortOrder
    contractLength?: SortOrder
  }

  export type PlayerTeamAvgOrderByAggregateInput = {
    id?: SortOrder
    playerId?: SortOrder
    teamId?: SortOrder
    jerseyNumber?: SortOrder
    contractValue?: SortOrder
    contractLength?: SortOrder
  }

  export type PlayerTeamMaxOrderByAggregateInput = {
    id?: SortOrder
    playerId?: SortOrder
    teamId?: SortOrder
    currentTeam?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    jerseyNumber?: SortOrder
    contractValue?: SortOrder
    contractLength?: SortOrder
  }

  export type PlayerTeamMinOrderByAggregateInput = {
    id?: SortOrder
    playerId?: SortOrder
    teamId?: SortOrder
    currentTeam?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    jerseyNumber?: SortOrder
    contractValue?: SortOrder
    contractLength?: SortOrder
  }

  export type PlayerTeamSumOrderByAggregateInput = {
    id?: SortOrder
    playerId?: SortOrder
    teamId?: SortOrder
    jerseyNumber?: SortOrder
    contractValue?: SortOrder
    contractLength?: SortOrder
  }

  export type TeamNullableRelationFilter = {
    is?: TeamWhereInput | null
    isNot?: TeamWhereInput | null
  }

  export type PostSeasonResultCountOrderByAggregateInput = {
    id?: SortOrder
    playoffYear?: SortOrder
    lastRoundReached?: SortOrder
    winLose?: SortOrder
    opponentScore?: SortOrder
    teamScore?: SortOrder
    teamId?: SortOrder
  }

  export type PostSeasonResultAvgOrderByAggregateInput = {
    id?: SortOrder
    playoffYear?: SortOrder
    opponentScore?: SortOrder
    teamScore?: SortOrder
    teamId?: SortOrder
  }

  export type PostSeasonResultMaxOrderByAggregateInput = {
    id?: SortOrder
    playoffYear?: SortOrder
    lastRoundReached?: SortOrder
    winLose?: SortOrder
    opponentScore?: SortOrder
    teamScore?: SortOrder
    teamId?: SortOrder
  }

  export type PostSeasonResultMinOrderByAggregateInput = {
    id?: SortOrder
    playoffYear?: SortOrder
    lastRoundReached?: SortOrder
    winLose?: SortOrder
    opponentScore?: SortOrder
    teamScore?: SortOrder
    teamId?: SortOrder
  }

  export type PostSeasonResultSumOrderByAggregateInput = {
    id?: SortOrder
    playoffYear?: SortOrder
    opponentScore?: SortOrder
    teamScore?: SortOrder
    teamId?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type PlayerListRelationFilter = {
    every?: PlayerWhereInput
    some?: PlayerWhereInput
    none?: PlayerWhereInput
  }

  export type DraftPickNullableRelationFilter = {
    is?: DraftPickWhereInput | null
    isNot?: DraftPickWhereInput | null
  }

  export type PlayerOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProspectCountOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    position?: SortOrder
    college?: SortOrder
    height?: SortOrder
    weight?: SortOrder
    handSize?: SortOrder
    armLength?: SortOrder
    homeCity?: SortOrder
    homeState?: SortOrder
    fortyTime?: SortOrder
    tenYardSplit?: SortOrder
    verticalLeap?: SortOrder
    broadJump?: SortOrder
    threeCone?: SortOrder
    twentyYardShuttle?: SortOrder
    benchPress?: SortOrder
    drafted?: SortOrder
    draftYear?: SortOrder
    teamId?: SortOrder
    draftPickId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProspectAvgOrderByAggregateInput = {
    id?: SortOrder
    height?: SortOrder
    weight?: SortOrder
    handSize?: SortOrder
    armLength?: SortOrder
    fortyTime?: SortOrder
    tenYardSplit?: SortOrder
    verticalLeap?: SortOrder
    broadJump?: SortOrder
    threeCone?: SortOrder
    twentyYardShuttle?: SortOrder
    benchPress?: SortOrder
    draftYear?: SortOrder
    teamId?: SortOrder
    draftPickId?: SortOrder
  }

  export type ProspectMaxOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    position?: SortOrder
    college?: SortOrder
    height?: SortOrder
    weight?: SortOrder
    handSize?: SortOrder
    armLength?: SortOrder
    homeCity?: SortOrder
    homeState?: SortOrder
    fortyTime?: SortOrder
    tenYardSplit?: SortOrder
    verticalLeap?: SortOrder
    broadJump?: SortOrder
    threeCone?: SortOrder
    twentyYardShuttle?: SortOrder
    benchPress?: SortOrder
    drafted?: SortOrder
    draftYear?: SortOrder
    teamId?: SortOrder
    draftPickId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProspectMinOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    position?: SortOrder
    college?: SortOrder
    height?: SortOrder
    weight?: SortOrder
    handSize?: SortOrder
    armLength?: SortOrder
    homeCity?: SortOrder
    homeState?: SortOrder
    fortyTime?: SortOrder
    tenYardSplit?: SortOrder
    verticalLeap?: SortOrder
    broadJump?: SortOrder
    threeCone?: SortOrder
    twentyYardShuttle?: SortOrder
    benchPress?: SortOrder
    drafted?: SortOrder
    draftYear?: SortOrder
    teamId?: SortOrder
    draftPickId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProspectSumOrderByAggregateInput = {
    id?: SortOrder
    height?: SortOrder
    weight?: SortOrder
    handSize?: SortOrder
    armLength?: SortOrder
    fortyTime?: SortOrder
    tenYardSplit?: SortOrder
    verticalLeap?: SortOrder
    broadJump?: SortOrder
    threeCone?: SortOrder
    twentyYardShuttle?: SortOrder
    benchPress?: SortOrder
    draftYear?: SortOrder
    teamId?: SortOrder
    draftPickId?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type ScheduleCountOrderByAggregateInput = {
    id?: SortOrder
    teamId?: SortOrder
    seasonYear?: SortOrder
    oppTeamId?: SortOrder
    oppTeamConference?: SortOrder
    oppTeamDivision?: SortOrder
    scheduleWeek?: SortOrder
    gameDate?: SortOrder
    gameCity?: SortOrder
    gameStateProvince?: SortOrder
    gameCountry?: SortOrder
    gameLocation?: SortOrder
    wonLostFlag?: SortOrder
    homeOrAway?: SortOrder
    oppTeamScore?: SortOrder
    teamScore?: SortOrder
  }

  export type ScheduleAvgOrderByAggregateInput = {
    id?: SortOrder
    teamId?: SortOrder
    seasonYear?: SortOrder
    oppTeamId?: SortOrder
    scheduleWeek?: SortOrder
    oppTeamScore?: SortOrder
    teamScore?: SortOrder
  }

  export type ScheduleMaxOrderByAggregateInput = {
    id?: SortOrder
    teamId?: SortOrder
    seasonYear?: SortOrder
    oppTeamId?: SortOrder
    oppTeamConference?: SortOrder
    oppTeamDivision?: SortOrder
    scheduleWeek?: SortOrder
    gameDate?: SortOrder
    gameCity?: SortOrder
    gameStateProvince?: SortOrder
    gameCountry?: SortOrder
    gameLocation?: SortOrder
    wonLostFlag?: SortOrder
    homeOrAway?: SortOrder
    oppTeamScore?: SortOrder
    teamScore?: SortOrder
  }

  export type ScheduleMinOrderByAggregateInput = {
    id?: SortOrder
    teamId?: SortOrder
    seasonYear?: SortOrder
    oppTeamId?: SortOrder
    oppTeamConference?: SortOrder
    oppTeamDivision?: SortOrder
    scheduleWeek?: SortOrder
    gameDate?: SortOrder
    gameCity?: SortOrder
    gameStateProvince?: SortOrder
    gameCountry?: SortOrder
    gameLocation?: SortOrder
    wonLostFlag?: SortOrder
    homeOrAway?: SortOrder
    oppTeamScore?: SortOrder
    teamScore?: SortOrder
  }

  export type ScheduleSumOrderByAggregateInput = {
    id?: SortOrder
    teamId?: SortOrder
    seasonYear?: SortOrder
    oppTeamId?: SortOrder
    scheduleWeek?: SortOrder
    oppTeamScore?: SortOrder
    teamScore?: SortOrder
  }

  export type PostSeasonResultListRelationFilter = {
    every?: PostSeasonResultWhereInput
    some?: PostSeasonResultWhereInput
    none?: PostSeasonResultWhereInput
  }

  export type ScheduleListRelationFilter = {
    every?: ScheduleWhereInput
    some?: ScheduleWhereInput
    none?: ScheduleWhereInput
  }

  export type TeamNeedListRelationFilter = {
    every?: TeamNeedWhereInput
    some?: TeamNeedWhereInput
    none?: TeamNeedWhereInput
  }

  export type PostSeasonResultOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ScheduleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TeamNeedOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TeamCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    city?: SortOrder
    state?: SortOrder
    conference?: SortOrder
    division?: SortOrder
    stadium?: SortOrder
    scheduleId?: SortOrder
  }

  export type TeamAvgOrderByAggregateInput = {
    id?: SortOrder
    scheduleId?: SortOrder
  }

  export type TeamMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    city?: SortOrder
    state?: SortOrder
    conference?: SortOrder
    division?: SortOrder
    stadium?: SortOrder
    scheduleId?: SortOrder
  }

  export type TeamMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    city?: SortOrder
    state?: SortOrder
    conference?: SortOrder
    division?: SortOrder
    stadium?: SortOrder
    scheduleId?: SortOrder
  }

  export type TeamSumOrderByAggregateInput = {
    id?: SortOrder
    scheduleId?: SortOrder
  }

  export type TeamNeedTeamIdPositionCompoundUniqueInput = {
    teamId: number
    position: string
  }

  export type TeamNeedCountOrderByAggregateInput = {
    id?: SortOrder
    teamId?: SortOrder
    position?: SortOrder
    priority?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    draftYear?: SortOrder
  }

  export type TeamNeedAvgOrderByAggregateInput = {
    id?: SortOrder
    teamId?: SortOrder
    priority?: SortOrder
    draftYear?: SortOrder
  }

  export type TeamNeedMaxOrderByAggregateInput = {
    id?: SortOrder
    teamId?: SortOrder
    position?: SortOrder
    priority?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    draftYear?: SortOrder
  }

  export type TeamNeedMinOrderByAggregateInput = {
    id?: SortOrder
    teamId?: SortOrder
    position?: SortOrder
    priority?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    draftYear?: SortOrder
  }

  export type TeamNeedSumOrderByAggregateInput = {
    id?: SortOrder
    teamId?: SortOrder
    priority?: SortOrder
    draftYear?: SortOrder
  }

  export type PlayerCreateNestedOneWithoutCombineScoreInput = {
    create?: XOR<PlayerCreateWithoutCombineScoreInput, PlayerUncheckedCreateWithoutCombineScoreInput>
    connectOrCreate?: PlayerCreateOrConnectWithoutCombineScoreInput
    connect?: PlayerWhereUniqueInput
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type PlayerUpdateOneWithoutCombineScoreNestedInput = {
    create?: XOR<PlayerCreateWithoutCombineScoreInput, PlayerUncheckedCreateWithoutCombineScoreInput>
    connectOrCreate?: PlayerCreateOrConnectWithoutCombineScoreInput
    upsert?: PlayerUpsertWithoutCombineScoreInput
    disconnect?: PlayerWhereInput | boolean
    delete?: PlayerWhereInput | boolean
    connect?: PlayerWhereUniqueInput
    update?: XOR<XOR<PlayerUpdateToOneWithWhereWithoutCombineScoreInput, PlayerUpdateWithoutCombineScoreInput>, PlayerUncheckedUpdateWithoutCombineScoreInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type TeamCreateNestedOneWithoutDraftPickInput = {
    create?: XOR<TeamCreateWithoutDraftPickInput, TeamUncheckedCreateWithoutDraftPickInput>
    connectOrCreate?: TeamCreateOrConnectWithoutDraftPickInput
    connect?: TeamWhereUniqueInput
  }

  export type PlayerCreateNestedOneWithoutDraftPickInput = {
    create?: XOR<PlayerCreateWithoutDraftPickInput, PlayerUncheckedCreateWithoutDraftPickInput>
    connectOrCreate?: PlayerCreateOrConnectWithoutDraftPickInput
    connect?: PlayerWhereUniqueInput
  }

  export type ProspectCreateNestedOneWithoutDraftPick_DraftPick_prospectIdToProspectInput = {
    create?: XOR<ProspectCreateWithoutDraftPick_DraftPick_prospectIdToProspectInput, ProspectUncheckedCreateWithoutDraftPick_DraftPick_prospectIdToProspectInput>
    connectOrCreate?: ProspectCreateOrConnectWithoutDraftPick_DraftPick_prospectIdToProspectInput
    connect?: ProspectWhereUniqueInput
  }

  export type ProspectCreateNestedManyWithoutDraftPick_Prospect_draftPickIdToDraftPickInput = {
    create?: XOR<ProspectCreateWithoutDraftPick_Prospect_draftPickIdToDraftPickInput, ProspectUncheckedCreateWithoutDraftPick_Prospect_draftPickIdToDraftPickInput> | ProspectCreateWithoutDraftPick_Prospect_draftPickIdToDraftPickInput[] | ProspectUncheckedCreateWithoutDraftPick_Prospect_draftPickIdToDraftPickInput[]
    connectOrCreate?: ProspectCreateOrConnectWithoutDraftPick_Prospect_draftPickIdToDraftPickInput | ProspectCreateOrConnectWithoutDraftPick_Prospect_draftPickIdToDraftPickInput[]
    createMany?: ProspectCreateManyDraftPick_Prospect_draftPickIdToDraftPickInputEnvelope
    connect?: ProspectWhereUniqueInput | ProspectWhereUniqueInput[]
  }

  export type ProspectUncheckedCreateNestedManyWithoutDraftPick_Prospect_draftPickIdToDraftPickInput = {
    create?: XOR<ProspectCreateWithoutDraftPick_Prospect_draftPickIdToDraftPickInput, ProspectUncheckedCreateWithoutDraftPick_Prospect_draftPickIdToDraftPickInput> | ProspectCreateWithoutDraftPick_Prospect_draftPickIdToDraftPickInput[] | ProspectUncheckedCreateWithoutDraftPick_Prospect_draftPickIdToDraftPickInput[]
    connectOrCreate?: ProspectCreateOrConnectWithoutDraftPick_Prospect_draftPickIdToDraftPickInput | ProspectCreateOrConnectWithoutDraftPick_Prospect_draftPickIdToDraftPickInput[]
    createMany?: ProspectCreateManyDraftPick_Prospect_draftPickIdToDraftPickInputEnvelope
    connect?: ProspectWhereUniqueInput | ProspectWhereUniqueInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type TeamUpdateOneRequiredWithoutDraftPickNestedInput = {
    create?: XOR<TeamCreateWithoutDraftPickInput, TeamUncheckedCreateWithoutDraftPickInput>
    connectOrCreate?: TeamCreateOrConnectWithoutDraftPickInput
    upsert?: TeamUpsertWithoutDraftPickInput
    connect?: TeamWhereUniqueInput
    update?: XOR<XOR<TeamUpdateToOneWithWhereWithoutDraftPickInput, TeamUpdateWithoutDraftPickInput>, TeamUncheckedUpdateWithoutDraftPickInput>
  }

  export type PlayerUpdateOneWithoutDraftPickNestedInput = {
    create?: XOR<PlayerCreateWithoutDraftPickInput, PlayerUncheckedCreateWithoutDraftPickInput>
    connectOrCreate?: PlayerCreateOrConnectWithoutDraftPickInput
    upsert?: PlayerUpsertWithoutDraftPickInput
    disconnect?: PlayerWhereInput | boolean
    delete?: PlayerWhereInput | boolean
    connect?: PlayerWhereUniqueInput
    update?: XOR<XOR<PlayerUpdateToOneWithWhereWithoutDraftPickInput, PlayerUpdateWithoutDraftPickInput>, PlayerUncheckedUpdateWithoutDraftPickInput>
  }

  export type ProspectUpdateOneWithoutDraftPick_DraftPick_prospectIdToProspectNestedInput = {
    create?: XOR<ProspectCreateWithoutDraftPick_DraftPick_prospectIdToProspectInput, ProspectUncheckedCreateWithoutDraftPick_DraftPick_prospectIdToProspectInput>
    connectOrCreate?: ProspectCreateOrConnectWithoutDraftPick_DraftPick_prospectIdToProspectInput
    upsert?: ProspectUpsertWithoutDraftPick_DraftPick_prospectIdToProspectInput
    disconnect?: ProspectWhereInput | boolean
    delete?: ProspectWhereInput | boolean
    connect?: ProspectWhereUniqueInput
    update?: XOR<XOR<ProspectUpdateToOneWithWhereWithoutDraftPick_DraftPick_prospectIdToProspectInput, ProspectUpdateWithoutDraftPick_DraftPick_prospectIdToProspectInput>, ProspectUncheckedUpdateWithoutDraftPick_DraftPick_prospectIdToProspectInput>
  }

  export type ProspectUpdateManyWithoutDraftPick_Prospect_draftPickIdToDraftPickNestedInput = {
    create?: XOR<ProspectCreateWithoutDraftPick_Prospect_draftPickIdToDraftPickInput, ProspectUncheckedCreateWithoutDraftPick_Prospect_draftPickIdToDraftPickInput> | ProspectCreateWithoutDraftPick_Prospect_draftPickIdToDraftPickInput[] | ProspectUncheckedCreateWithoutDraftPick_Prospect_draftPickIdToDraftPickInput[]
    connectOrCreate?: ProspectCreateOrConnectWithoutDraftPick_Prospect_draftPickIdToDraftPickInput | ProspectCreateOrConnectWithoutDraftPick_Prospect_draftPickIdToDraftPickInput[]
    upsert?: ProspectUpsertWithWhereUniqueWithoutDraftPick_Prospect_draftPickIdToDraftPickInput | ProspectUpsertWithWhereUniqueWithoutDraftPick_Prospect_draftPickIdToDraftPickInput[]
    createMany?: ProspectCreateManyDraftPick_Prospect_draftPickIdToDraftPickInputEnvelope
    set?: ProspectWhereUniqueInput | ProspectWhereUniqueInput[]
    disconnect?: ProspectWhereUniqueInput | ProspectWhereUniqueInput[]
    delete?: ProspectWhereUniqueInput | ProspectWhereUniqueInput[]
    connect?: ProspectWhereUniqueInput | ProspectWhereUniqueInput[]
    update?: ProspectUpdateWithWhereUniqueWithoutDraftPick_Prospect_draftPickIdToDraftPickInput | ProspectUpdateWithWhereUniqueWithoutDraftPick_Prospect_draftPickIdToDraftPickInput[]
    updateMany?: ProspectUpdateManyWithWhereWithoutDraftPick_Prospect_draftPickIdToDraftPickInput | ProspectUpdateManyWithWhereWithoutDraftPick_Prospect_draftPickIdToDraftPickInput[]
    deleteMany?: ProspectScalarWhereInput | ProspectScalarWhereInput[]
  }

  export type ProspectUncheckedUpdateManyWithoutDraftPick_Prospect_draftPickIdToDraftPickNestedInput = {
    create?: XOR<ProspectCreateWithoutDraftPick_Prospect_draftPickIdToDraftPickInput, ProspectUncheckedCreateWithoutDraftPick_Prospect_draftPickIdToDraftPickInput> | ProspectCreateWithoutDraftPick_Prospect_draftPickIdToDraftPickInput[] | ProspectUncheckedCreateWithoutDraftPick_Prospect_draftPickIdToDraftPickInput[]
    connectOrCreate?: ProspectCreateOrConnectWithoutDraftPick_Prospect_draftPickIdToDraftPickInput | ProspectCreateOrConnectWithoutDraftPick_Prospect_draftPickIdToDraftPickInput[]
    upsert?: ProspectUpsertWithWhereUniqueWithoutDraftPick_Prospect_draftPickIdToDraftPickInput | ProspectUpsertWithWhereUniqueWithoutDraftPick_Prospect_draftPickIdToDraftPickInput[]
    createMany?: ProspectCreateManyDraftPick_Prospect_draftPickIdToDraftPickInputEnvelope
    set?: ProspectWhereUniqueInput | ProspectWhereUniqueInput[]
    disconnect?: ProspectWhereUniqueInput | ProspectWhereUniqueInput[]
    delete?: ProspectWhereUniqueInput | ProspectWhereUniqueInput[]
    connect?: ProspectWhereUniqueInput | ProspectWhereUniqueInput[]
    update?: ProspectUpdateWithWhereUniqueWithoutDraftPick_Prospect_draftPickIdToDraftPickInput | ProspectUpdateWithWhereUniqueWithoutDraftPick_Prospect_draftPickIdToDraftPickInput[]
    updateMany?: ProspectUpdateManyWithWhereWithoutDraftPick_Prospect_draftPickIdToDraftPickInput | ProspectUpdateManyWithWhereWithoutDraftPick_Prospect_draftPickIdToDraftPickInput[]
    deleteMany?: ProspectScalarWhereInput | ProspectScalarWhereInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type CombineScoreCreateNestedManyWithoutPlayerInput = {
    create?: XOR<CombineScoreCreateWithoutPlayerInput, CombineScoreUncheckedCreateWithoutPlayerInput> | CombineScoreCreateWithoutPlayerInput[] | CombineScoreUncheckedCreateWithoutPlayerInput[]
    connectOrCreate?: CombineScoreCreateOrConnectWithoutPlayerInput | CombineScoreCreateOrConnectWithoutPlayerInput[]
    createMany?: CombineScoreCreateManyPlayerInputEnvelope
    connect?: CombineScoreWhereUniqueInput | CombineScoreWhereUniqueInput[]
  }

  export type DraftPickCreateNestedManyWithoutPlayerInput = {
    create?: XOR<DraftPickCreateWithoutPlayerInput, DraftPickUncheckedCreateWithoutPlayerInput> | DraftPickCreateWithoutPlayerInput[] | DraftPickUncheckedCreateWithoutPlayerInput[]
    connectOrCreate?: DraftPickCreateOrConnectWithoutPlayerInput | DraftPickCreateOrConnectWithoutPlayerInput[]
    createMany?: DraftPickCreateManyPlayerInputEnvelope
    connect?: DraftPickWhereUniqueInput | DraftPickWhereUniqueInput[]
  }

  export type ProspectCreateNestedOneWithoutPlayerInput = {
    create?: XOR<ProspectCreateWithoutPlayerInput, ProspectUncheckedCreateWithoutPlayerInput>
    connectOrCreate?: ProspectCreateOrConnectWithoutPlayerInput
    connect?: ProspectWhereUniqueInput
  }

  export type PlayerAwardCreateNestedManyWithoutPlayerInput = {
    create?: XOR<PlayerAwardCreateWithoutPlayerInput, PlayerAwardUncheckedCreateWithoutPlayerInput> | PlayerAwardCreateWithoutPlayerInput[] | PlayerAwardUncheckedCreateWithoutPlayerInput[]
    connectOrCreate?: PlayerAwardCreateOrConnectWithoutPlayerInput | PlayerAwardCreateOrConnectWithoutPlayerInput[]
    createMany?: PlayerAwardCreateManyPlayerInputEnvelope
    connect?: PlayerAwardWhereUniqueInput | PlayerAwardWhereUniqueInput[]
  }

  export type PlayerTeamCreateNestedManyWithoutPlayerInput = {
    create?: XOR<PlayerTeamCreateWithoutPlayerInput, PlayerTeamUncheckedCreateWithoutPlayerInput> | PlayerTeamCreateWithoutPlayerInput[] | PlayerTeamUncheckedCreateWithoutPlayerInput[]
    connectOrCreate?: PlayerTeamCreateOrConnectWithoutPlayerInput | PlayerTeamCreateOrConnectWithoutPlayerInput[]
    createMany?: PlayerTeamCreateManyPlayerInputEnvelope
    connect?: PlayerTeamWhereUniqueInput | PlayerTeamWhereUniqueInput[]
  }

  export type CombineScoreUncheckedCreateNestedManyWithoutPlayerInput = {
    create?: XOR<CombineScoreCreateWithoutPlayerInput, CombineScoreUncheckedCreateWithoutPlayerInput> | CombineScoreCreateWithoutPlayerInput[] | CombineScoreUncheckedCreateWithoutPlayerInput[]
    connectOrCreate?: CombineScoreCreateOrConnectWithoutPlayerInput | CombineScoreCreateOrConnectWithoutPlayerInput[]
    createMany?: CombineScoreCreateManyPlayerInputEnvelope
    connect?: CombineScoreWhereUniqueInput | CombineScoreWhereUniqueInput[]
  }

  export type DraftPickUncheckedCreateNestedManyWithoutPlayerInput = {
    create?: XOR<DraftPickCreateWithoutPlayerInput, DraftPickUncheckedCreateWithoutPlayerInput> | DraftPickCreateWithoutPlayerInput[] | DraftPickUncheckedCreateWithoutPlayerInput[]
    connectOrCreate?: DraftPickCreateOrConnectWithoutPlayerInput | DraftPickCreateOrConnectWithoutPlayerInput[]
    createMany?: DraftPickCreateManyPlayerInputEnvelope
    connect?: DraftPickWhereUniqueInput | DraftPickWhereUniqueInput[]
  }

  export type PlayerAwardUncheckedCreateNestedManyWithoutPlayerInput = {
    create?: XOR<PlayerAwardCreateWithoutPlayerInput, PlayerAwardUncheckedCreateWithoutPlayerInput> | PlayerAwardCreateWithoutPlayerInput[] | PlayerAwardUncheckedCreateWithoutPlayerInput[]
    connectOrCreate?: PlayerAwardCreateOrConnectWithoutPlayerInput | PlayerAwardCreateOrConnectWithoutPlayerInput[]
    createMany?: PlayerAwardCreateManyPlayerInputEnvelope
    connect?: PlayerAwardWhereUniqueInput | PlayerAwardWhereUniqueInput[]
  }

  export type PlayerTeamUncheckedCreateNestedManyWithoutPlayerInput = {
    create?: XOR<PlayerTeamCreateWithoutPlayerInput, PlayerTeamUncheckedCreateWithoutPlayerInput> | PlayerTeamCreateWithoutPlayerInput[] | PlayerTeamUncheckedCreateWithoutPlayerInput[]
    connectOrCreate?: PlayerTeamCreateOrConnectWithoutPlayerInput | PlayerTeamCreateOrConnectWithoutPlayerInput[]
    createMany?: PlayerTeamCreateManyPlayerInputEnvelope
    connect?: PlayerTeamWhereUniqueInput | PlayerTeamWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type CombineScoreUpdateManyWithoutPlayerNestedInput = {
    create?: XOR<CombineScoreCreateWithoutPlayerInput, CombineScoreUncheckedCreateWithoutPlayerInput> | CombineScoreCreateWithoutPlayerInput[] | CombineScoreUncheckedCreateWithoutPlayerInput[]
    connectOrCreate?: CombineScoreCreateOrConnectWithoutPlayerInput | CombineScoreCreateOrConnectWithoutPlayerInput[]
    upsert?: CombineScoreUpsertWithWhereUniqueWithoutPlayerInput | CombineScoreUpsertWithWhereUniqueWithoutPlayerInput[]
    createMany?: CombineScoreCreateManyPlayerInputEnvelope
    set?: CombineScoreWhereUniqueInput | CombineScoreWhereUniqueInput[]
    disconnect?: CombineScoreWhereUniqueInput | CombineScoreWhereUniqueInput[]
    delete?: CombineScoreWhereUniqueInput | CombineScoreWhereUniqueInput[]
    connect?: CombineScoreWhereUniqueInput | CombineScoreWhereUniqueInput[]
    update?: CombineScoreUpdateWithWhereUniqueWithoutPlayerInput | CombineScoreUpdateWithWhereUniqueWithoutPlayerInput[]
    updateMany?: CombineScoreUpdateManyWithWhereWithoutPlayerInput | CombineScoreUpdateManyWithWhereWithoutPlayerInput[]
    deleteMany?: CombineScoreScalarWhereInput | CombineScoreScalarWhereInput[]
  }

  export type DraftPickUpdateManyWithoutPlayerNestedInput = {
    create?: XOR<DraftPickCreateWithoutPlayerInput, DraftPickUncheckedCreateWithoutPlayerInput> | DraftPickCreateWithoutPlayerInput[] | DraftPickUncheckedCreateWithoutPlayerInput[]
    connectOrCreate?: DraftPickCreateOrConnectWithoutPlayerInput | DraftPickCreateOrConnectWithoutPlayerInput[]
    upsert?: DraftPickUpsertWithWhereUniqueWithoutPlayerInput | DraftPickUpsertWithWhereUniqueWithoutPlayerInput[]
    createMany?: DraftPickCreateManyPlayerInputEnvelope
    set?: DraftPickWhereUniqueInput | DraftPickWhereUniqueInput[]
    disconnect?: DraftPickWhereUniqueInput | DraftPickWhereUniqueInput[]
    delete?: DraftPickWhereUniqueInput | DraftPickWhereUniqueInput[]
    connect?: DraftPickWhereUniqueInput | DraftPickWhereUniqueInput[]
    update?: DraftPickUpdateWithWhereUniqueWithoutPlayerInput | DraftPickUpdateWithWhereUniqueWithoutPlayerInput[]
    updateMany?: DraftPickUpdateManyWithWhereWithoutPlayerInput | DraftPickUpdateManyWithWhereWithoutPlayerInput[]
    deleteMany?: DraftPickScalarWhereInput | DraftPickScalarWhereInput[]
  }

  export type ProspectUpdateOneWithoutPlayerNestedInput = {
    create?: XOR<ProspectCreateWithoutPlayerInput, ProspectUncheckedCreateWithoutPlayerInput>
    connectOrCreate?: ProspectCreateOrConnectWithoutPlayerInput
    upsert?: ProspectUpsertWithoutPlayerInput
    disconnect?: ProspectWhereInput | boolean
    delete?: ProspectWhereInput | boolean
    connect?: ProspectWhereUniqueInput
    update?: XOR<XOR<ProspectUpdateToOneWithWhereWithoutPlayerInput, ProspectUpdateWithoutPlayerInput>, ProspectUncheckedUpdateWithoutPlayerInput>
  }

  export type PlayerAwardUpdateManyWithoutPlayerNestedInput = {
    create?: XOR<PlayerAwardCreateWithoutPlayerInput, PlayerAwardUncheckedCreateWithoutPlayerInput> | PlayerAwardCreateWithoutPlayerInput[] | PlayerAwardUncheckedCreateWithoutPlayerInput[]
    connectOrCreate?: PlayerAwardCreateOrConnectWithoutPlayerInput | PlayerAwardCreateOrConnectWithoutPlayerInput[]
    upsert?: PlayerAwardUpsertWithWhereUniqueWithoutPlayerInput | PlayerAwardUpsertWithWhereUniqueWithoutPlayerInput[]
    createMany?: PlayerAwardCreateManyPlayerInputEnvelope
    set?: PlayerAwardWhereUniqueInput | PlayerAwardWhereUniqueInput[]
    disconnect?: PlayerAwardWhereUniqueInput | PlayerAwardWhereUniqueInput[]
    delete?: PlayerAwardWhereUniqueInput | PlayerAwardWhereUniqueInput[]
    connect?: PlayerAwardWhereUniqueInput | PlayerAwardWhereUniqueInput[]
    update?: PlayerAwardUpdateWithWhereUniqueWithoutPlayerInput | PlayerAwardUpdateWithWhereUniqueWithoutPlayerInput[]
    updateMany?: PlayerAwardUpdateManyWithWhereWithoutPlayerInput | PlayerAwardUpdateManyWithWhereWithoutPlayerInput[]
    deleteMany?: PlayerAwardScalarWhereInput | PlayerAwardScalarWhereInput[]
  }

  export type PlayerTeamUpdateManyWithoutPlayerNestedInput = {
    create?: XOR<PlayerTeamCreateWithoutPlayerInput, PlayerTeamUncheckedCreateWithoutPlayerInput> | PlayerTeamCreateWithoutPlayerInput[] | PlayerTeamUncheckedCreateWithoutPlayerInput[]
    connectOrCreate?: PlayerTeamCreateOrConnectWithoutPlayerInput | PlayerTeamCreateOrConnectWithoutPlayerInput[]
    upsert?: PlayerTeamUpsertWithWhereUniqueWithoutPlayerInput | PlayerTeamUpsertWithWhereUniqueWithoutPlayerInput[]
    createMany?: PlayerTeamCreateManyPlayerInputEnvelope
    set?: PlayerTeamWhereUniqueInput | PlayerTeamWhereUniqueInput[]
    disconnect?: PlayerTeamWhereUniqueInput | PlayerTeamWhereUniqueInput[]
    delete?: PlayerTeamWhereUniqueInput | PlayerTeamWhereUniqueInput[]
    connect?: PlayerTeamWhereUniqueInput | PlayerTeamWhereUniqueInput[]
    update?: PlayerTeamUpdateWithWhereUniqueWithoutPlayerInput | PlayerTeamUpdateWithWhereUniqueWithoutPlayerInput[]
    updateMany?: PlayerTeamUpdateManyWithWhereWithoutPlayerInput | PlayerTeamUpdateManyWithWhereWithoutPlayerInput[]
    deleteMany?: PlayerTeamScalarWhereInput | PlayerTeamScalarWhereInput[]
  }

  export type CombineScoreUncheckedUpdateManyWithoutPlayerNestedInput = {
    create?: XOR<CombineScoreCreateWithoutPlayerInput, CombineScoreUncheckedCreateWithoutPlayerInput> | CombineScoreCreateWithoutPlayerInput[] | CombineScoreUncheckedCreateWithoutPlayerInput[]
    connectOrCreate?: CombineScoreCreateOrConnectWithoutPlayerInput | CombineScoreCreateOrConnectWithoutPlayerInput[]
    upsert?: CombineScoreUpsertWithWhereUniqueWithoutPlayerInput | CombineScoreUpsertWithWhereUniqueWithoutPlayerInput[]
    createMany?: CombineScoreCreateManyPlayerInputEnvelope
    set?: CombineScoreWhereUniqueInput | CombineScoreWhereUniqueInput[]
    disconnect?: CombineScoreWhereUniqueInput | CombineScoreWhereUniqueInput[]
    delete?: CombineScoreWhereUniqueInput | CombineScoreWhereUniqueInput[]
    connect?: CombineScoreWhereUniqueInput | CombineScoreWhereUniqueInput[]
    update?: CombineScoreUpdateWithWhereUniqueWithoutPlayerInput | CombineScoreUpdateWithWhereUniqueWithoutPlayerInput[]
    updateMany?: CombineScoreUpdateManyWithWhereWithoutPlayerInput | CombineScoreUpdateManyWithWhereWithoutPlayerInput[]
    deleteMany?: CombineScoreScalarWhereInput | CombineScoreScalarWhereInput[]
  }

  export type DraftPickUncheckedUpdateManyWithoutPlayerNestedInput = {
    create?: XOR<DraftPickCreateWithoutPlayerInput, DraftPickUncheckedCreateWithoutPlayerInput> | DraftPickCreateWithoutPlayerInput[] | DraftPickUncheckedCreateWithoutPlayerInput[]
    connectOrCreate?: DraftPickCreateOrConnectWithoutPlayerInput | DraftPickCreateOrConnectWithoutPlayerInput[]
    upsert?: DraftPickUpsertWithWhereUniqueWithoutPlayerInput | DraftPickUpsertWithWhereUniqueWithoutPlayerInput[]
    createMany?: DraftPickCreateManyPlayerInputEnvelope
    set?: DraftPickWhereUniqueInput | DraftPickWhereUniqueInput[]
    disconnect?: DraftPickWhereUniqueInput | DraftPickWhereUniqueInput[]
    delete?: DraftPickWhereUniqueInput | DraftPickWhereUniqueInput[]
    connect?: DraftPickWhereUniqueInput | DraftPickWhereUniqueInput[]
    update?: DraftPickUpdateWithWhereUniqueWithoutPlayerInput | DraftPickUpdateWithWhereUniqueWithoutPlayerInput[]
    updateMany?: DraftPickUpdateManyWithWhereWithoutPlayerInput | DraftPickUpdateManyWithWhereWithoutPlayerInput[]
    deleteMany?: DraftPickScalarWhereInput | DraftPickScalarWhereInput[]
  }

  export type PlayerAwardUncheckedUpdateManyWithoutPlayerNestedInput = {
    create?: XOR<PlayerAwardCreateWithoutPlayerInput, PlayerAwardUncheckedCreateWithoutPlayerInput> | PlayerAwardCreateWithoutPlayerInput[] | PlayerAwardUncheckedCreateWithoutPlayerInput[]
    connectOrCreate?: PlayerAwardCreateOrConnectWithoutPlayerInput | PlayerAwardCreateOrConnectWithoutPlayerInput[]
    upsert?: PlayerAwardUpsertWithWhereUniqueWithoutPlayerInput | PlayerAwardUpsertWithWhereUniqueWithoutPlayerInput[]
    createMany?: PlayerAwardCreateManyPlayerInputEnvelope
    set?: PlayerAwardWhereUniqueInput | PlayerAwardWhereUniqueInput[]
    disconnect?: PlayerAwardWhereUniqueInput | PlayerAwardWhereUniqueInput[]
    delete?: PlayerAwardWhereUniqueInput | PlayerAwardWhereUniqueInput[]
    connect?: PlayerAwardWhereUniqueInput | PlayerAwardWhereUniqueInput[]
    update?: PlayerAwardUpdateWithWhereUniqueWithoutPlayerInput | PlayerAwardUpdateWithWhereUniqueWithoutPlayerInput[]
    updateMany?: PlayerAwardUpdateManyWithWhereWithoutPlayerInput | PlayerAwardUpdateManyWithWhereWithoutPlayerInput[]
    deleteMany?: PlayerAwardScalarWhereInput | PlayerAwardScalarWhereInput[]
  }

  export type PlayerTeamUncheckedUpdateManyWithoutPlayerNestedInput = {
    create?: XOR<PlayerTeamCreateWithoutPlayerInput, PlayerTeamUncheckedCreateWithoutPlayerInput> | PlayerTeamCreateWithoutPlayerInput[] | PlayerTeamUncheckedCreateWithoutPlayerInput[]
    connectOrCreate?: PlayerTeamCreateOrConnectWithoutPlayerInput | PlayerTeamCreateOrConnectWithoutPlayerInput[]
    upsert?: PlayerTeamUpsertWithWhereUniqueWithoutPlayerInput | PlayerTeamUpsertWithWhereUniqueWithoutPlayerInput[]
    createMany?: PlayerTeamCreateManyPlayerInputEnvelope
    set?: PlayerTeamWhereUniqueInput | PlayerTeamWhereUniqueInput[]
    disconnect?: PlayerTeamWhereUniqueInput | PlayerTeamWhereUniqueInput[]
    delete?: PlayerTeamWhereUniqueInput | PlayerTeamWhereUniqueInput[]
    connect?: PlayerTeamWhereUniqueInput | PlayerTeamWhereUniqueInput[]
    update?: PlayerTeamUpdateWithWhereUniqueWithoutPlayerInput | PlayerTeamUpdateWithWhereUniqueWithoutPlayerInput[]
    updateMany?: PlayerTeamUpdateManyWithWhereWithoutPlayerInput | PlayerTeamUpdateManyWithWhereWithoutPlayerInput[]
    deleteMany?: PlayerTeamScalarWhereInput | PlayerTeamScalarWhereInput[]
  }

  export type PlayerCreateNestedOneWithoutPlayerAwardInput = {
    create?: XOR<PlayerCreateWithoutPlayerAwardInput, PlayerUncheckedCreateWithoutPlayerAwardInput>
    connectOrCreate?: PlayerCreateOrConnectWithoutPlayerAwardInput
    connect?: PlayerWhereUniqueInput
  }

  export type PlayerUpdateOneRequiredWithoutPlayerAwardNestedInput = {
    create?: XOR<PlayerCreateWithoutPlayerAwardInput, PlayerUncheckedCreateWithoutPlayerAwardInput>
    connectOrCreate?: PlayerCreateOrConnectWithoutPlayerAwardInput
    upsert?: PlayerUpsertWithoutPlayerAwardInput
    connect?: PlayerWhereUniqueInput
    update?: XOR<XOR<PlayerUpdateToOneWithWhereWithoutPlayerAwardInput, PlayerUpdateWithoutPlayerAwardInput>, PlayerUncheckedUpdateWithoutPlayerAwardInput>
  }

  export type PlayerCreateNestedOneWithoutPlayerTeamInput = {
    create?: XOR<PlayerCreateWithoutPlayerTeamInput, PlayerUncheckedCreateWithoutPlayerTeamInput>
    connectOrCreate?: PlayerCreateOrConnectWithoutPlayerTeamInput
    connect?: PlayerWhereUniqueInput
  }

  export type TeamCreateNestedOneWithoutPlayerTeamInput = {
    create?: XOR<TeamCreateWithoutPlayerTeamInput, TeamUncheckedCreateWithoutPlayerTeamInput>
    connectOrCreate?: TeamCreateOrConnectWithoutPlayerTeamInput
    connect?: TeamWhereUniqueInput
  }

  export type PlayerUpdateOneRequiredWithoutPlayerTeamNestedInput = {
    create?: XOR<PlayerCreateWithoutPlayerTeamInput, PlayerUncheckedCreateWithoutPlayerTeamInput>
    connectOrCreate?: PlayerCreateOrConnectWithoutPlayerTeamInput
    upsert?: PlayerUpsertWithoutPlayerTeamInput
    connect?: PlayerWhereUniqueInput
    update?: XOR<XOR<PlayerUpdateToOneWithWhereWithoutPlayerTeamInput, PlayerUpdateWithoutPlayerTeamInput>, PlayerUncheckedUpdateWithoutPlayerTeamInput>
  }

  export type TeamUpdateOneRequiredWithoutPlayerTeamNestedInput = {
    create?: XOR<TeamCreateWithoutPlayerTeamInput, TeamUncheckedCreateWithoutPlayerTeamInput>
    connectOrCreate?: TeamCreateOrConnectWithoutPlayerTeamInput
    upsert?: TeamUpsertWithoutPlayerTeamInput
    connect?: TeamWhereUniqueInput
    update?: XOR<XOR<TeamUpdateToOneWithWhereWithoutPlayerTeamInput, TeamUpdateWithoutPlayerTeamInput>, TeamUncheckedUpdateWithoutPlayerTeamInput>
  }

  export type TeamCreateNestedOneWithoutPostSeasonResultInput = {
    create?: XOR<TeamCreateWithoutPostSeasonResultInput, TeamUncheckedCreateWithoutPostSeasonResultInput>
    connectOrCreate?: TeamCreateOrConnectWithoutPostSeasonResultInput
    connect?: TeamWhereUniqueInput
  }

  export type TeamUpdateOneWithoutPostSeasonResultNestedInput = {
    create?: XOR<TeamCreateWithoutPostSeasonResultInput, TeamUncheckedCreateWithoutPostSeasonResultInput>
    connectOrCreate?: TeamCreateOrConnectWithoutPostSeasonResultInput
    upsert?: TeamUpsertWithoutPostSeasonResultInput
    disconnect?: TeamWhereInput | boolean
    delete?: TeamWhereInput | boolean
    connect?: TeamWhereUniqueInput
    update?: XOR<XOR<TeamUpdateToOneWithWhereWithoutPostSeasonResultInput, TeamUpdateWithoutPostSeasonResultInput>, TeamUncheckedUpdateWithoutPostSeasonResultInput>
  }

  export type DraftPickCreateNestedManyWithoutProspect_DraftPick_prospectIdToProspectInput = {
    create?: XOR<DraftPickCreateWithoutProspect_DraftPick_prospectIdToProspectInput, DraftPickUncheckedCreateWithoutProspect_DraftPick_prospectIdToProspectInput> | DraftPickCreateWithoutProspect_DraftPick_prospectIdToProspectInput[] | DraftPickUncheckedCreateWithoutProspect_DraftPick_prospectIdToProspectInput[]
    connectOrCreate?: DraftPickCreateOrConnectWithoutProspect_DraftPick_prospectIdToProspectInput | DraftPickCreateOrConnectWithoutProspect_DraftPick_prospectIdToProspectInput[]
    createMany?: DraftPickCreateManyProspect_DraftPick_prospectIdToProspectInputEnvelope
    connect?: DraftPickWhereUniqueInput | DraftPickWhereUniqueInput[]
  }

  export type PlayerCreateNestedManyWithoutProspectInput = {
    create?: XOR<PlayerCreateWithoutProspectInput, PlayerUncheckedCreateWithoutProspectInput> | PlayerCreateWithoutProspectInput[] | PlayerUncheckedCreateWithoutProspectInput[]
    connectOrCreate?: PlayerCreateOrConnectWithoutProspectInput | PlayerCreateOrConnectWithoutProspectInput[]
    createMany?: PlayerCreateManyProspectInputEnvelope
    connect?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
  }

  export type DraftPickCreateNestedOneWithoutProspect_Prospect_draftPickIdToDraftPickInput = {
    create?: XOR<DraftPickCreateWithoutProspect_Prospect_draftPickIdToDraftPickInput, DraftPickUncheckedCreateWithoutProspect_Prospect_draftPickIdToDraftPickInput>
    connectOrCreate?: DraftPickCreateOrConnectWithoutProspect_Prospect_draftPickIdToDraftPickInput
    connect?: DraftPickWhereUniqueInput
  }

  export type TeamCreateNestedOneWithoutProspectInput = {
    create?: XOR<TeamCreateWithoutProspectInput, TeamUncheckedCreateWithoutProspectInput>
    connectOrCreate?: TeamCreateOrConnectWithoutProspectInput
    connect?: TeamWhereUniqueInput
  }

  export type DraftPickUncheckedCreateNestedManyWithoutProspect_DraftPick_prospectIdToProspectInput = {
    create?: XOR<DraftPickCreateWithoutProspect_DraftPick_prospectIdToProspectInput, DraftPickUncheckedCreateWithoutProspect_DraftPick_prospectIdToProspectInput> | DraftPickCreateWithoutProspect_DraftPick_prospectIdToProspectInput[] | DraftPickUncheckedCreateWithoutProspect_DraftPick_prospectIdToProspectInput[]
    connectOrCreate?: DraftPickCreateOrConnectWithoutProspect_DraftPick_prospectIdToProspectInput | DraftPickCreateOrConnectWithoutProspect_DraftPick_prospectIdToProspectInput[]
    createMany?: DraftPickCreateManyProspect_DraftPick_prospectIdToProspectInputEnvelope
    connect?: DraftPickWhereUniqueInput | DraftPickWhereUniqueInput[]
  }

  export type PlayerUncheckedCreateNestedManyWithoutProspectInput = {
    create?: XOR<PlayerCreateWithoutProspectInput, PlayerUncheckedCreateWithoutProspectInput> | PlayerCreateWithoutProspectInput[] | PlayerUncheckedCreateWithoutProspectInput[]
    connectOrCreate?: PlayerCreateOrConnectWithoutProspectInput | PlayerCreateOrConnectWithoutProspectInput[]
    createMany?: PlayerCreateManyProspectInputEnvelope
    connect?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DraftPickUpdateManyWithoutProspect_DraftPick_prospectIdToProspectNestedInput = {
    create?: XOR<DraftPickCreateWithoutProspect_DraftPick_prospectIdToProspectInput, DraftPickUncheckedCreateWithoutProspect_DraftPick_prospectIdToProspectInput> | DraftPickCreateWithoutProspect_DraftPick_prospectIdToProspectInput[] | DraftPickUncheckedCreateWithoutProspect_DraftPick_prospectIdToProspectInput[]
    connectOrCreate?: DraftPickCreateOrConnectWithoutProspect_DraftPick_prospectIdToProspectInput | DraftPickCreateOrConnectWithoutProspect_DraftPick_prospectIdToProspectInput[]
    upsert?: DraftPickUpsertWithWhereUniqueWithoutProspect_DraftPick_prospectIdToProspectInput | DraftPickUpsertWithWhereUniqueWithoutProspect_DraftPick_prospectIdToProspectInput[]
    createMany?: DraftPickCreateManyProspect_DraftPick_prospectIdToProspectInputEnvelope
    set?: DraftPickWhereUniqueInput | DraftPickWhereUniqueInput[]
    disconnect?: DraftPickWhereUniqueInput | DraftPickWhereUniqueInput[]
    delete?: DraftPickWhereUniqueInput | DraftPickWhereUniqueInput[]
    connect?: DraftPickWhereUniqueInput | DraftPickWhereUniqueInput[]
    update?: DraftPickUpdateWithWhereUniqueWithoutProspect_DraftPick_prospectIdToProspectInput | DraftPickUpdateWithWhereUniqueWithoutProspect_DraftPick_prospectIdToProspectInput[]
    updateMany?: DraftPickUpdateManyWithWhereWithoutProspect_DraftPick_prospectIdToProspectInput | DraftPickUpdateManyWithWhereWithoutProspect_DraftPick_prospectIdToProspectInput[]
    deleteMany?: DraftPickScalarWhereInput | DraftPickScalarWhereInput[]
  }

  export type PlayerUpdateManyWithoutProspectNestedInput = {
    create?: XOR<PlayerCreateWithoutProspectInput, PlayerUncheckedCreateWithoutProspectInput> | PlayerCreateWithoutProspectInput[] | PlayerUncheckedCreateWithoutProspectInput[]
    connectOrCreate?: PlayerCreateOrConnectWithoutProspectInput | PlayerCreateOrConnectWithoutProspectInput[]
    upsert?: PlayerUpsertWithWhereUniqueWithoutProspectInput | PlayerUpsertWithWhereUniqueWithoutProspectInput[]
    createMany?: PlayerCreateManyProspectInputEnvelope
    set?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    disconnect?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    delete?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    connect?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    update?: PlayerUpdateWithWhereUniqueWithoutProspectInput | PlayerUpdateWithWhereUniqueWithoutProspectInput[]
    updateMany?: PlayerUpdateManyWithWhereWithoutProspectInput | PlayerUpdateManyWithWhereWithoutProspectInput[]
    deleteMany?: PlayerScalarWhereInput | PlayerScalarWhereInput[]
  }

  export type DraftPickUpdateOneWithoutProspect_Prospect_draftPickIdToDraftPickNestedInput = {
    create?: XOR<DraftPickCreateWithoutProspect_Prospect_draftPickIdToDraftPickInput, DraftPickUncheckedCreateWithoutProspect_Prospect_draftPickIdToDraftPickInput>
    connectOrCreate?: DraftPickCreateOrConnectWithoutProspect_Prospect_draftPickIdToDraftPickInput
    upsert?: DraftPickUpsertWithoutProspect_Prospect_draftPickIdToDraftPickInput
    disconnect?: DraftPickWhereInput | boolean
    delete?: DraftPickWhereInput | boolean
    connect?: DraftPickWhereUniqueInput
    update?: XOR<XOR<DraftPickUpdateToOneWithWhereWithoutProspect_Prospect_draftPickIdToDraftPickInput, DraftPickUpdateWithoutProspect_Prospect_draftPickIdToDraftPickInput>, DraftPickUncheckedUpdateWithoutProspect_Prospect_draftPickIdToDraftPickInput>
  }

  export type TeamUpdateOneWithoutProspectNestedInput = {
    create?: XOR<TeamCreateWithoutProspectInput, TeamUncheckedCreateWithoutProspectInput>
    connectOrCreate?: TeamCreateOrConnectWithoutProspectInput
    upsert?: TeamUpsertWithoutProspectInput
    disconnect?: TeamWhereInput | boolean
    delete?: TeamWhereInput | boolean
    connect?: TeamWhereUniqueInput
    update?: XOR<XOR<TeamUpdateToOneWithWhereWithoutProspectInput, TeamUpdateWithoutProspectInput>, TeamUncheckedUpdateWithoutProspectInput>
  }

  export type DraftPickUncheckedUpdateManyWithoutProspect_DraftPick_prospectIdToProspectNestedInput = {
    create?: XOR<DraftPickCreateWithoutProspect_DraftPick_prospectIdToProspectInput, DraftPickUncheckedCreateWithoutProspect_DraftPick_prospectIdToProspectInput> | DraftPickCreateWithoutProspect_DraftPick_prospectIdToProspectInput[] | DraftPickUncheckedCreateWithoutProspect_DraftPick_prospectIdToProspectInput[]
    connectOrCreate?: DraftPickCreateOrConnectWithoutProspect_DraftPick_prospectIdToProspectInput | DraftPickCreateOrConnectWithoutProspect_DraftPick_prospectIdToProspectInput[]
    upsert?: DraftPickUpsertWithWhereUniqueWithoutProspect_DraftPick_prospectIdToProspectInput | DraftPickUpsertWithWhereUniqueWithoutProspect_DraftPick_prospectIdToProspectInput[]
    createMany?: DraftPickCreateManyProspect_DraftPick_prospectIdToProspectInputEnvelope
    set?: DraftPickWhereUniqueInput | DraftPickWhereUniqueInput[]
    disconnect?: DraftPickWhereUniqueInput | DraftPickWhereUniqueInput[]
    delete?: DraftPickWhereUniqueInput | DraftPickWhereUniqueInput[]
    connect?: DraftPickWhereUniqueInput | DraftPickWhereUniqueInput[]
    update?: DraftPickUpdateWithWhereUniqueWithoutProspect_DraftPick_prospectIdToProspectInput | DraftPickUpdateWithWhereUniqueWithoutProspect_DraftPick_prospectIdToProspectInput[]
    updateMany?: DraftPickUpdateManyWithWhereWithoutProspect_DraftPick_prospectIdToProspectInput | DraftPickUpdateManyWithWhereWithoutProspect_DraftPick_prospectIdToProspectInput[]
    deleteMany?: DraftPickScalarWhereInput | DraftPickScalarWhereInput[]
  }

  export type PlayerUncheckedUpdateManyWithoutProspectNestedInput = {
    create?: XOR<PlayerCreateWithoutProspectInput, PlayerUncheckedCreateWithoutProspectInput> | PlayerCreateWithoutProspectInput[] | PlayerUncheckedCreateWithoutProspectInput[]
    connectOrCreate?: PlayerCreateOrConnectWithoutProspectInput | PlayerCreateOrConnectWithoutProspectInput[]
    upsert?: PlayerUpsertWithWhereUniqueWithoutProspectInput | PlayerUpsertWithWhereUniqueWithoutProspectInput[]
    createMany?: PlayerCreateManyProspectInputEnvelope
    set?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    disconnect?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    delete?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    connect?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    update?: PlayerUpdateWithWhereUniqueWithoutProspectInput | PlayerUpdateWithWhereUniqueWithoutProspectInput[]
    updateMany?: PlayerUpdateManyWithWhereWithoutProspectInput | PlayerUpdateManyWithWhereWithoutProspectInput[]
    deleteMany?: PlayerScalarWhereInput | PlayerScalarWhereInput[]
  }

  export type TeamCreateNestedOneWithoutSchedule_Schedule_teamIdToTeamInput = {
    create?: XOR<TeamCreateWithoutSchedule_Schedule_teamIdToTeamInput, TeamUncheckedCreateWithoutSchedule_Schedule_teamIdToTeamInput>
    connectOrCreate?: TeamCreateOrConnectWithoutSchedule_Schedule_teamIdToTeamInput
    connect?: TeamWhereUniqueInput
  }

  export type TeamCreateNestedOneWithoutSchedule_Schedule_oppTeamIdToTeamInput = {
    create?: XOR<TeamCreateWithoutSchedule_Schedule_oppTeamIdToTeamInput, TeamUncheckedCreateWithoutSchedule_Schedule_oppTeamIdToTeamInput>
    connectOrCreate?: TeamCreateOrConnectWithoutSchedule_Schedule_oppTeamIdToTeamInput
    connect?: TeamWhereUniqueInput
  }

  export type TeamUpdateOneWithoutSchedule_Schedule_teamIdToTeamNestedInput = {
    create?: XOR<TeamCreateWithoutSchedule_Schedule_teamIdToTeamInput, TeamUncheckedCreateWithoutSchedule_Schedule_teamIdToTeamInput>
    connectOrCreate?: TeamCreateOrConnectWithoutSchedule_Schedule_teamIdToTeamInput
    upsert?: TeamUpsertWithoutSchedule_Schedule_teamIdToTeamInput
    disconnect?: TeamWhereInput | boolean
    delete?: TeamWhereInput | boolean
    connect?: TeamWhereUniqueInput
    update?: XOR<XOR<TeamUpdateToOneWithWhereWithoutSchedule_Schedule_teamIdToTeamInput, TeamUpdateWithoutSchedule_Schedule_teamIdToTeamInput>, TeamUncheckedUpdateWithoutSchedule_Schedule_teamIdToTeamInput>
  }

  export type TeamUpdateOneRequiredWithoutSchedule_Schedule_oppTeamIdToTeamNestedInput = {
    create?: XOR<TeamCreateWithoutSchedule_Schedule_oppTeamIdToTeamInput, TeamUncheckedCreateWithoutSchedule_Schedule_oppTeamIdToTeamInput>
    connectOrCreate?: TeamCreateOrConnectWithoutSchedule_Schedule_oppTeamIdToTeamInput
    upsert?: TeamUpsertWithoutSchedule_Schedule_oppTeamIdToTeamInput
    connect?: TeamWhereUniqueInput
    update?: XOR<XOR<TeamUpdateToOneWithWhereWithoutSchedule_Schedule_oppTeamIdToTeamInput, TeamUpdateWithoutSchedule_Schedule_oppTeamIdToTeamInput>, TeamUncheckedUpdateWithoutSchedule_Schedule_oppTeamIdToTeamInput>
  }

  export type DraftPickCreateNestedManyWithoutTeamInput = {
    create?: XOR<DraftPickCreateWithoutTeamInput, DraftPickUncheckedCreateWithoutTeamInput> | DraftPickCreateWithoutTeamInput[] | DraftPickUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: DraftPickCreateOrConnectWithoutTeamInput | DraftPickCreateOrConnectWithoutTeamInput[]
    createMany?: DraftPickCreateManyTeamInputEnvelope
    connect?: DraftPickWhereUniqueInput | DraftPickWhereUniqueInput[]
  }

  export type PlayerTeamCreateNestedManyWithoutTeamInput = {
    create?: XOR<PlayerTeamCreateWithoutTeamInput, PlayerTeamUncheckedCreateWithoutTeamInput> | PlayerTeamCreateWithoutTeamInput[] | PlayerTeamUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: PlayerTeamCreateOrConnectWithoutTeamInput | PlayerTeamCreateOrConnectWithoutTeamInput[]
    createMany?: PlayerTeamCreateManyTeamInputEnvelope
    connect?: PlayerTeamWhereUniqueInput | PlayerTeamWhereUniqueInput[]
  }

  export type PostSeasonResultCreateNestedManyWithoutTeamInput = {
    create?: XOR<PostSeasonResultCreateWithoutTeamInput, PostSeasonResultUncheckedCreateWithoutTeamInput> | PostSeasonResultCreateWithoutTeamInput[] | PostSeasonResultUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: PostSeasonResultCreateOrConnectWithoutTeamInput | PostSeasonResultCreateOrConnectWithoutTeamInput[]
    createMany?: PostSeasonResultCreateManyTeamInputEnvelope
    connect?: PostSeasonResultWhereUniqueInput | PostSeasonResultWhereUniqueInput[]
  }

  export type ProspectCreateNestedManyWithoutTeamInput = {
    create?: XOR<ProspectCreateWithoutTeamInput, ProspectUncheckedCreateWithoutTeamInput> | ProspectCreateWithoutTeamInput[] | ProspectUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: ProspectCreateOrConnectWithoutTeamInput | ProspectCreateOrConnectWithoutTeamInput[]
    createMany?: ProspectCreateManyTeamInputEnvelope
    connect?: ProspectWhereUniqueInput | ProspectWhereUniqueInput[]
  }

  export type ScheduleCreateNestedManyWithoutTeam_Schedule_teamIdToTeamInput = {
    create?: XOR<ScheduleCreateWithoutTeam_Schedule_teamIdToTeamInput, ScheduleUncheckedCreateWithoutTeam_Schedule_teamIdToTeamInput> | ScheduleCreateWithoutTeam_Schedule_teamIdToTeamInput[] | ScheduleUncheckedCreateWithoutTeam_Schedule_teamIdToTeamInput[]
    connectOrCreate?: ScheduleCreateOrConnectWithoutTeam_Schedule_teamIdToTeamInput | ScheduleCreateOrConnectWithoutTeam_Schedule_teamIdToTeamInput[]
    createMany?: ScheduleCreateManyTeam_Schedule_teamIdToTeamInputEnvelope
    connect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
  }

  export type ScheduleCreateNestedManyWithoutTeam_Schedule_oppTeamIdToTeamInput = {
    create?: XOR<ScheduleCreateWithoutTeam_Schedule_oppTeamIdToTeamInput, ScheduleUncheckedCreateWithoutTeam_Schedule_oppTeamIdToTeamInput> | ScheduleCreateWithoutTeam_Schedule_oppTeamIdToTeamInput[] | ScheduleUncheckedCreateWithoutTeam_Schedule_oppTeamIdToTeamInput[]
    connectOrCreate?: ScheduleCreateOrConnectWithoutTeam_Schedule_oppTeamIdToTeamInput | ScheduleCreateOrConnectWithoutTeam_Schedule_oppTeamIdToTeamInput[]
    createMany?: ScheduleCreateManyTeam_Schedule_oppTeamIdToTeamInputEnvelope
    connect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
  }

  export type TeamNeedCreateNestedManyWithoutTeamInput = {
    create?: XOR<TeamNeedCreateWithoutTeamInput, TeamNeedUncheckedCreateWithoutTeamInput> | TeamNeedCreateWithoutTeamInput[] | TeamNeedUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: TeamNeedCreateOrConnectWithoutTeamInput | TeamNeedCreateOrConnectWithoutTeamInput[]
    createMany?: TeamNeedCreateManyTeamInputEnvelope
    connect?: TeamNeedWhereUniqueInput | TeamNeedWhereUniqueInput[]
  }

  export type DraftPickUncheckedCreateNestedManyWithoutTeamInput = {
    create?: XOR<DraftPickCreateWithoutTeamInput, DraftPickUncheckedCreateWithoutTeamInput> | DraftPickCreateWithoutTeamInput[] | DraftPickUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: DraftPickCreateOrConnectWithoutTeamInput | DraftPickCreateOrConnectWithoutTeamInput[]
    createMany?: DraftPickCreateManyTeamInputEnvelope
    connect?: DraftPickWhereUniqueInput | DraftPickWhereUniqueInput[]
  }

  export type PlayerTeamUncheckedCreateNestedManyWithoutTeamInput = {
    create?: XOR<PlayerTeamCreateWithoutTeamInput, PlayerTeamUncheckedCreateWithoutTeamInput> | PlayerTeamCreateWithoutTeamInput[] | PlayerTeamUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: PlayerTeamCreateOrConnectWithoutTeamInput | PlayerTeamCreateOrConnectWithoutTeamInput[]
    createMany?: PlayerTeamCreateManyTeamInputEnvelope
    connect?: PlayerTeamWhereUniqueInput | PlayerTeamWhereUniqueInput[]
  }

  export type PostSeasonResultUncheckedCreateNestedManyWithoutTeamInput = {
    create?: XOR<PostSeasonResultCreateWithoutTeamInput, PostSeasonResultUncheckedCreateWithoutTeamInput> | PostSeasonResultCreateWithoutTeamInput[] | PostSeasonResultUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: PostSeasonResultCreateOrConnectWithoutTeamInput | PostSeasonResultCreateOrConnectWithoutTeamInput[]
    createMany?: PostSeasonResultCreateManyTeamInputEnvelope
    connect?: PostSeasonResultWhereUniqueInput | PostSeasonResultWhereUniqueInput[]
  }

  export type ProspectUncheckedCreateNestedManyWithoutTeamInput = {
    create?: XOR<ProspectCreateWithoutTeamInput, ProspectUncheckedCreateWithoutTeamInput> | ProspectCreateWithoutTeamInput[] | ProspectUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: ProspectCreateOrConnectWithoutTeamInput | ProspectCreateOrConnectWithoutTeamInput[]
    createMany?: ProspectCreateManyTeamInputEnvelope
    connect?: ProspectWhereUniqueInput | ProspectWhereUniqueInput[]
  }

  export type ScheduleUncheckedCreateNestedManyWithoutTeam_Schedule_teamIdToTeamInput = {
    create?: XOR<ScheduleCreateWithoutTeam_Schedule_teamIdToTeamInput, ScheduleUncheckedCreateWithoutTeam_Schedule_teamIdToTeamInput> | ScheduleCreateWithoutTeam_Schedule_teamIdToTeamInput[] | ScheduleUncheckedCreateWithoutTeam_Schedule_teamIdToTeamInput[]
    connectOrCreate?: ScheduleCreateOrConnectWithoutTeam_Schedule_teamIdToTeamInput | ScheduleCreateOrConnectWithoutTeam_Schedule_teamIdToTeamInput[]
    createMany?: ScheduleCreateManyTeam_Schedule_teamIdToTeamInputEnvelope
    connect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
  }

  export type ScheduleUncheckedCreateNestedManyWithoutTeam_Schedule_oppTeamIdToTeamInput = {
    create?: XOR<ScheduleCreateWithoutTeam_Schedule_oppTeamIdToTeamInput, ScheduleUncheckedCreateWithoutTeam_Schedule_oppTeamIdToTeamInput> | ScheduleCreateWithoutTeam_Schedule_oppTeamIdToTeamInput[] | ScheduleUncheckedCreateWithoutTeam_Schedule_oppTeamIdToTeamInput[]
    connectOrCreate?: ScheduleCreateOrConnectWithoutTeam_Schedule_oppTeamIdToTeamInput | ScheduleCreateOrConnectWithoutTeam_Schedule_oppTeamIdToTeamInput[]
    createMany?: ScheduleCreateManyTeam_Schedule_oppTeamIdToTeamInputEnvelope
    connect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
  }

  export type TeamNeedUncheckedCreateNestedManyWithoutTeamInput = {
    create?: XOR<TeamNeedCreateWithoutTeamInput, TeamNeedUncheckedCreateWithoutTeamInput> | TeamNeedCreateWithoutTeamInput[] | TeamNeedUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: TeamNeedCreateOrConnectWithoutTeamInput | TeamNeedCreateOrConnectWithoutTeamInput[]
    createMany?: TeamNeedCreateManyTeamInputEnvelope
    connect?: TeamNeedWhereUniqueInput | TeamNeedWhereUniqueInput[]
  }

  export type DraftPickUpdateManyWithoutTeamNestedInput = {
    create?: XOR<DraftPickCreateWithoutTeamInput, DraftPickUncheckedCreateWithoutTeamInput> | DraftPickCreateWithoutTeamInput[] | DraftPickUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: DraftPickCreateOrConnectWithoutTeamInput | DraftPickCreateOrConnectWithoutTeamInput[]
    upsert?: DraftPickUpsertWithWhereUniqueWithoutTeamInput | DraftPickUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: DraftPickCreateManyTeamInputEnvelope
    set?: DraftPickWhereUniqueInput | DraftPickWhereUniqueInput[]
    disconnect?: DraftPickWhereUniqueInput | DraftPickWhereUniqueInput[]
    delete?: DraftPickWhereUniqueInput | DraftPickWhereUniqueInput[]
    connect?: DraftPickWhereUniqueInput | DraftPickWhereUniqueInput[]
    update?: DraftPickUpdateWithWhereUniqueWithoutTeamInput | DraftPickUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: DraftPickUpdateManyWithWhereWithoutTeamInput | DraftPickUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: DraftPickScalarWhereInput | DraftPickScalarWhereInput[]
  }

  export type PlayerTeamUpdateManyWithoutTeamNestedInput = {
    create?: XOR<PlayerTeamCreateWithoutTeamInput, PlayerTeamUncheckedCreateWithoutTeamInput> | PlayerTeamCreateWithoutTeamInput[] | PlayerTeamUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: PlayerTeamCreateOrConnectWithoutTeamInput | PlayerTeamCreateOrConnectWithoutTeamInput[]
    upsert?: PlayerTeamUpsertWithWhereUniqueWithoutTeamInput | PlayerTeamUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: PlayerTeamCreateManyTeamInputEnvelope
    set?: PlayerTeamWhereUniqueInput | PlayerTeamWhereUniqueInput[]
    disconnect?: PlayerTeamWhereUniqueInput | PlayerTeamWhereUniqueInput[]
    delete?: PlayerTeamWhereUniqueInput | PlayerTeamWhereUniqueInput[]
    connect?: PlayerTeamWhereUniqueInput | PlayerTeamWhereUniqueInput[]
    update?: PlayerTeamUpdateWithWhereUniqueWithoutTeamInput | PlayerTeamUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: PlayerTeamUpdateManyWithWhereWithoutTeamInput | PlayerTeamUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: PlayerTeamScalarWhereInput | PlayerTeamScalarWhereInput[]
  }

  export type PostSeasonResultUpdateManyWithoutTeamNestedInput = {
    create?: XOR<PostSeasonResultCreateWithoutTeamInput, PostSeasonResultUncheckedCreateWithoutTeamInput> | PostSeasonResultCreateWithoutTeamInput[] | PostSeasonResultUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: PostSeasonResultCreateOrConnectWithoutTeamInput | PostSeasonResultCreateOrConnectWithoutTeamInput[]
    upsert?: PostSeasonResultUpsertWithWhereUniqueWithoutTeamInput | PostSeasonResultUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: PostSeasonResultCreateManyTeamInputEnvelope
    set?: PostSeasonResultWhereUniqueInput | PostSeasonResultWhereUniqueInput[]
    disconnect?: PostSeasonResultWhereUniqueInput | PostSeasonResultWhereUniqueInput[]
    delete?: PostSeasonResultWhereUniqueInput | PostSeasonResultWhereUniqueInput[]
    connect?: PostSeasonResultWhereUniqueInput | PostSeasonResultWhereUniqueInput[]
    update?: PostSeasonResultUpdateWithWhereUniqueWithoutTeamInput | PostSeasonResultUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: PostSeasonResultUpdateManyWithWhereWithoutTeamInput | PostSeasonResultUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: PostSeasonResultScalarWhereInput | PostSeasonResultScalarWhereInput[]
  }

  export type ProspectUpdateManyWithoutTeamNestedInput = {
    create?: XOR<ProspectCreateWithoutTeamInput, ProspectUncheckedCreateWithoutTeamInput> | ProspectCreateWithoutTeamInput[] | ProspectUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: ProspectCreateOrConnectWithoutTeamInput | ProspectCreateOrConnectWithoutTeamInput[]
    upsert?: ProspectUpsertWithWhereUniqueWithoutTeamInput | ProspectUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: ProspectCreateManyTeamInputEnvelope
    set?: ProspectWhereUniqueInput | ProspectWhereUniqueInput[]
    disconnect?: ProspectWhereUniqueInput | ProspectWhereUniqueInput[]
    delete?: ProspectWhereUniqueInput | ProspectWhereUniqueInput[]
    connect?: ProspectWhereUniqueInput | ProspectWhereUniqueInput[]
    update?: ProspectUpdateWithWhereUniqueWithoutTeamInput | ProspectUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: ProspectUpdateManyWithWhereWithoutTeamInput | ProspectUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: ProspectScalarWhereInput | ProspectScalarWhereInput[]
  }

  export type ScheduleUpdateManyWithoutTeam_Schedule_teamIdToTeamNestedInput = {
    create?: XOR<ScheduleCreateWithoutTeam_Schedule_teamIdToTeamInput, ScheduleUncheckedCreateWithoutTeam_Schedule_teamIdToTeamInput> | ScheduleCreateWithoutTeam_Schedule_teamIdToTeamInput[] | ScheduleUncheckedCreateWithoutTeam_Schedule_teamIdToTeamInput[]
    connectOrCreate?: ScheduleCreateOrConnectWithoutTeam_Schedule_teamIdToTeamInput | ScheduleCreateOrConnectWithoutTeam_Schedule_teamIdToTeamInput[]
    upsert?: ScheduleUpsertWithWhereUniqueWithoutTeam_Schedule_teamIdToTeamInput | ScheduleUpsertWithWhereUniqueWithoutTeam_Schedule_teamIdToTeamInput[]
    createMany?: ScheduleCreateManyTeam_Schedule_teamIdToTeamInputEnvelope
    set?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    disconnect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    delete?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    connect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    update?: ScheduleUpdateWithWhereUniqueWithoutTeam_Schedule_teamIdToTeamInput | ScheduleUpdateWithWhereUniqueWithoutTeam_Schedule_teamIdToTeamInput[]
    updateMany?: ScheduleUpdateManyWithWhereWithoutTeam_Schedule_teamIdToTeamInput | ScheduleUpdateManyWithWhereWithoutTeam_Schedule_teamIdToTeamInput[]
    deleteMany?: ScheduleScalarWhereInput | ScheduleScalarWhereInput[]
  }

  export type ScheduleUpdateManyWithoutTeam_Schedule_oppTeamIdToTeamNestedInput = {
    create?: XOR<ScheduleCreateWithoutTeam_Schedule_oppTeamIdToTeamInput, ScheduleUncheckedCreateWithoutTeam_Schedule_oppTeamIdToTeamInput> | ScheduleCreateWithoutTeam_Schedule_oppTeamIdToTeamInput[] | ScheduleUncheckedCreateWithoutTeam_Schedule_oppTeamIdToTeamInput[]
    connectOrCreate?: ScheduleCreateOrConnectWithoutTeam_Schedule_oppTeamIdToTeamInput | ScheduleCreateOrConnectWithoutTeam_Schedule_oppTeamIdToTeamInput[]
    upsert?: ScheduleUpsertWithWhereUniqueWithoutTeam_Schedule_oppTeamIdToTeamInput | ScheduleUpsertWithWhereUniqueWithoutTeam_Schedule_oppTeamIdToTeamInput[]
    createMany?: ScheduleCreateManyTeam_Schedule_oppTeamIdToTeamInputEnvelope
    set?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    disconnect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    delete?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    connect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    update?: ScheduleUpdateWithWhereUniqueWithoutTeam_Schedule_oppTeamIdToTeamInput | ScheduleUpdateWithWhereUniqueWithoutTeam_Schedule_oppTeamIdToTeamInput[]
    updateMany?: ScheduleUpdateManyWithWhereWithoutTeam_Schedule_oppTeamIdToTeamInput | ScheduleUpdateManyWithWhereWithoutTeam_Schedule_oppTeamIdToTeamInput[]
    deleteMany?: ScheduleScalarWhereInput | ScheduleScalarWhereInput[]
  }

  export type TeamNeedUpdateManyWithoutTeamNestedInput = {
    create?: XOR<TeamNeedCreateWithoutTeamInput, TeamNeedUncheckedCreateWithoutTeamInput> | TeamNeedCreateWithoutTeamInput[] | TeamNeedUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: TeamNeedCreateOrConnectWithoutTeamInput | TeamNeedCreateOrConnectWithoutTeamInput[]
    upsert?: TeamNeedUpsertWithWhereUniqueWithoutTeamInput | TeamNeedUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: TeamNeedCreateManyTeamInputEnvelope
    set?: TeamNeedWhereUniqueInput | TeamNeedWhereUniqueInput[]
    disconnect?: TeamNeedWhereUniqueInput | TeamNeedWhereUniqueInput[]
    delete?: TeamNeedWhereUniqueInput | TeamNeedWhereUniqueInput[]
    connect?: TeamNeedWhereUniqueInput | TeamNeedWhereUniqueInput[]
    update?: TeamNeedUpdateWithWhereUniqueWithoutTeamInput | TeamNeedUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: TeamNeedUpdateManyWithWhereWithoutTeamInput | TeamNeedUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: TeamNeedScalarWhereInput | TeamNeedScalarWhereInput[]
  }

  export type DraftPickUncheckedUpdateManyWithoutTeamNestedInput = {
    create?: XOR<DraftPickCreateWithoutTeamInput, DraftPickUncheckedCreateWithoutTeamInput> | DraftPickCreateWithoutTeamInput[] | DraftPickUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: DraftPickCreateOrConnectWithoutTeamInput | DraftPickCreateOrConnectWithoutTeamInput[]
    upsert?: DraftPickUpsertWithWhereUniqueWithoutTeamInput | DraftPickUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: DraftPickCreateManyTeamInputEnvelope
    set?: DraftPickWhereUniqueInput | DraftPickWhereUniqueInput[]
    disconnect?: DraftPickWhereUniqueInput | DraftPickWhereUniqueInput[]
    delete?: DraftPickWhereUniqueInput | DraftPickWhereUniqueInput[]
    connect?: DraftPickWhereUniqueInput | DraftPickWhereUniqueInput[]
    update?: DraftPickUpdateWithWhereUniqueWithoutTeamInput | DraftPickUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: DraftPickUpdateManyWithWhereWithoutTeamInput | DraftPickUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: DraftPickScalarWhereInput | DraftPickScalarWhereInput[]
  }

  export type PlayerTeamUncheckedUpdateManyWithoutTeamNestedInput = {
    create?: XOR<PlayerTeamCreateWithoutTeamInput, PlayerTeamUncheckedCreateWithoutTeamInput> | PlayerTeamCreateWithoutTeamInput[] | PlayerTeamUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: PlayerTeamCreateOrConnectWithoutTeamInput | PlayerTeamCreateOrConnectWithoutTeamInput[]
    upsert?: PlayerTeamUpsertWithWhereUniqueWithoutTeamInput | PlayerTeamUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: PlayerTeamCreateManyTeamInputEnvelope
    set?: PlayerTeamWhereUniqueInput | PlayerTeamWhereUniqueInput[]
    disconnect?: PlayerTeamWhereUniqueInput | PlayerTeamWhereUniqueInput[]
    delete?: PlayerTeamWhereUniqueInput | PlayerTeamWhereUniqueInput[]
    connect?: PlayerTeamWhereUniqueInput | PlayerTeamWhereUniqueInput[]
    update?: PlayerTeamUpdateWithWhereUniqueWithoutTeamInput | PlayerTeamUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: PlayerTeamUpdateManyWithWhereWithoutTeamInput | PlayerTeamUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: PlayerTeamScalarWhereInput | PlayerTeamScalarWhereInput[]
  }

  export type PostSeasonResultUncheckedUpdateManyWithoutTeamNestedInput = {
    create?: XOR<PostSeasonResultCreateWithoutTeamInput, PostSeasonResultUncheckedCreateWithoutTeamInput> | PostSeasonResultCreateWithoutTeamInput[] | PostSeasonResultUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: PostSeasonResultCreateOrConnectWithoutTeamInput | PostSeasonResultCreateOrConnectWithoutTeamInput[]
    upsert?: PostSeasonResultUpsertWithWhereUniqueWithoutTeamInput | PostSeasonResultUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: PostSeasonResultCreateManyTeamInputEnvelope
    set?: PostSeasonResultWhereUniqueInput | PostSeasonResultWhereUniqueInput[]
    disconnect?: PostSeasonResultWhereUniqueInput | PostSeasonResultWhereUniqueInput[]
    delete?: PostSeasonResultWhereUniqueInput | PostSeasonResultWhereUniqueInput[]
    connect?: PostSeasonResultWhereUniqueInput | PostSeasonResultWhereUniqueInput[]
    update?: PostSeasonResultUpdateWithWhereUniqueWithoutTeamInput | PostSeasonResultUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: PostSeasonResultUpdateManyWithWhereWithoutTeamInput | PostSeasonResultUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: PostSeasonResultScalarWhereInput | PostSeasonResultScalarWhereInput[]
  }

  export type ProspectUncheckedUpdateManyWithoutTeamNestedInput = {
    create?: XOR<ProspectCreateWithoutTeamInput, ProspectUncheckedCreateWithoutTeamInput> | ProspectCreateWithoutTeamInput[] | ProspectUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: ProspectCreateOrConnectWithoutTeamInput | ProspectCreateOrConnectWithoutTeamInput[]
    upsert?: ProspectUpsertWithWhereUniqueWithoutTeamInput | ProspectUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: ProspectCreateManyTeamInputEnvelope
    set?: ProspectWhereUniqueInput | ProspectWhereUniqueInput[]
    disconnect?: ProspectWhereUniqueInput | ProspectWhereUniqueInput[]
    delete?: ProspectWhereUniqueInput | ProspectWhereUniqueInput[]
    connect?: ProspectWhereUniqueInput | ProspectWhereUniqueInput[]
    update?: ProspectUpdateWithWhereUniqueWithoutTeamInput | ProspectUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: ProspectUpdateManyWithWhereWithoutTeamInput | ProspectUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: ProspectScalarWhereInput | ProspectScalarWhereInput[]
  }

  export type ScheduleUncheckedUpdateManyWithoutTeam_Schedule_teamIdToTeamNestedInput = {
    create?: XOR<ScheduleCreateWithoutTeam_Schedule_teamIdToTeamInput, ScheduleUncheckedCreateWithoutTeam_Schedule_teamIdToTeamInput> | ScheduleCreateWithoutTeam_Schedule_teamIdToTeamInput[] | ScheduleUncheckedCreateWithoutTeam_Schedule_teamIdToTeamInput[]
    connectOrCreate?: ScheduleCreateOrConnectWithoutTeam_Schedule_teamIdToTeamInput | ScheduleCreateOrConnectWithoutTeam_Schedule_teamIdToTeamInput[]
    upsert?: ScheduleUpsertWithWhereUniqueWithoutTeam_Schedule_teamIdToTeamInput | ScheduleUpsertWithWhereUniqueWithoutTeam_Schedule_teamIdToTeamInput[]
    createMany?: ScheduleCreateManyTeam_Schedule_teamIdToTeamInputEnvelope
    set?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    disconnect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    delete?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    connect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    update?: ScheduleUpdateWithWhereUniqueWithoutTeam_Schedule_teamIdToTeamInput | ScheduleUpdateWithWhereUniqueWithoutTeam_Schedule_teamIdToTeamInput[]
    updateMany?: ScheduleUpdateManyWithWhereWithoutTeam_Schedule_teamIdToTeamInput | ScheduleUpdateManyWithWhereWithoutTeam_Schedule_teamIdToTeamInput[]
    deleteMany?: ScheduleScalarWhereInput | ScheduleScalarWhereInput[]
  }

  export type ScheduleUncheckedUpdateManyWithoutTeam_Schedule_oppTeamIdToTeamNestedInput = {
    create?: XOR<ScheduleCreateWithoutTeam_Schedule_oppTeamIdToTeamInput, ScheduleUncheckedCreateWithoutTeam_Schedule_oppTeamIdToTeamInput> | ScheduleCreateWithoutTeam_Schedule_oppTeamIdToTeamInput[] | ScheduleUncheckedCreateWithoutTeam_Schedule_oppTeamIdToTeamInput[]
    connectOrCreate?: ScheduleCreateOrConnectWithoutTeam_Schedule_oppTeamIdToTeamInput | ScheduleCreateOrConnectWithoutTeam_Schedule_oppTeamIdToTeamInput[]
    upsert?: ScheduleUpsertWithWhereUniqueWithoutTeam_Schedule_oppTeamIdToTeamInput | ScheduleUpsertWithWhereUniqueWithoutTeam_Schedule_oppTeamIdToTeamInput[]
    createMany?: ScheduleCreateManyTeam_Schedule_oppTeamIdToTeamInputEnvelope
    set?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    disconnect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    delete?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    connect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    update?: ScheduleUpdateWithWhereUniqueWithoutTeam_Schedule_oppTeamIdToTeamInput | ScheduleUpdateWithWhereUniqueWithoutTeam_Schedule_oppTeamIdToTeamInput[]
    updateMany?: ScheduleUpdateManyWithWhereWithoutTeam_Schedule_oppTeamIdToTeamInput | ScheduleUpdateManyWithWhereWithoutTeam_Schedule_oppTeamIdToTeamInput[]
    deleteMany?: ScheduleScalarWhereInput | ScheduleScalarWhereInput[]
  }

  export type TeamNeedUncheckedUpdateManyWithoutTeamNestedInput = {
    create?: XOR<TeamNeedCreateWithoutTeamInput, TeamNeedUncheckedCreateWithoutTeamInput> | TeamNeedCreateWithoutTeamInput[] | TeamNeedUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: TeamNeedCreateOrConnectWithoutTeamInput | TeamNeedCreateOrConnectWithoutTeamInput[]
    upsert?: TeamNeedUpsertWithWhereUniqueWithoutTeamInput | TeamNeedUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: TeamNeedCreateManyTeamInputEnvelope
    set?: TeamNeedWhereUniqueInput | TeamNeedWhereUniqueInput[]
    disconnect?: TeamNeedWhereUniqueInput | TeamNeedWhereUniqueInput[]
    delete?: TeamNeedWhereUniqueInput | TeamNeedWhereUniqueInput[]
    connect?: TeamNeedWhereUniqueInput | TeamNeedWhereUniqueInput[]
    update?: TeamNeedUpdateWithWhereUniqueWithoutTeamInput | TeamNeedUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: TeamNeedUpdateManyWithWhereWithoutTeamInput | TeamNeedUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: TeamNeedScalarWhereInput | TeamNeedScalarWhereInput[]
  }

  export type TeamCreateNestedOneWithoutTeamNeedInput = {
    create?: XOR<TeamCreateWithoutTeamNeedInput, TeamUncheckedCreateWithoutTeamNeedInput>
    connectOrCreate?: TeamCreateOrConnectWithoutTeamNeedInput
    connect?: TeamWhereUniqueInput
  }

  export type TeamUpdateOneRequiredWithoutTeamNeedNestedInput = {
    create?: XOR<TeamCreateWithoutTeamNeedInput, TeamUncheckedCreateWithoutTeamNeedInput>
    connectOrCreate?: TeamCreateOrConnectWithoutTeamNeedInput
    upsert?: TeamUpsertWithoutTeamNeedInput
    connect?: TeamWhereUniqueInput
    update?: XOR<XOR<TeamUpdateToOneWithWhereWithoutTeamNeedInput, TeamUpdateWithoutTeamNeedInput>, TeamUncheckedUpdateWithoutTeamNeedInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type PlayerCreateWithoutCombineScoreInput = {
    firstName: string
    lastName: string
    age: number
    height?: number | null
    weight?: number | null
    handSize?: number | null
    armLength?: number | null
    homeCity?: string | null
    homeState?: string | null
    university?: string | null
    status?: string | null
    position?: string | null
    pickId?: number | null
    combineScoreId?: number | null
    yearEnteredLeague?: number | null
    DraftPick?: DraftPickCreateNestedManyWithoutPlayerInput
    Prospect?: ProspectCreateNestedOneWithoutPlayerInput
    PlayerAward?: PlayerAwardCreateNestedManyWithoutPlayerInput
    PlayerTeam?: PlayerTeamCreateNestedManyWithoutPlayerInput
  }

  export type PlayerUncheckedCreateWithoutCombineScoreInput = {
    id?: number
    firstName: string
    lastName: string
    age: number
    height?: number | null
    weight?: number | null
    handSize?: number | null
    armLength?: number | null
    homeCity?: string | null
    homeState?: string | null
    university?: string | null
    status?: string | null
    position?: string | null
    pickId?: number | null
    combineScoreId?: number | null
    prospectId?: number | null
    yearEnteredLeague?: number | null
    DraftPick?: DraftPickUncheckedCreateNestedManyWithoutPlayerInput
    PlayerAward?: PlayerAwardUncheckedCreateNestedManyWithoutPlayerInput
    PlayerTeam?: PlayerTeamUncheckedCreateNestedManyWithoutPlayerInput
  }

  export type PlayerCreateOrConnectWithoutCombineScoreInput = {
    where: PlayerWhereUniqueInput
    create: XOR<PlayerCreateWithoutCombineScoreInput, PlayerUncheckedCreateWithoutCombineScoreInput>
  }

  export type PlayerUpsertWithoutCombineScoreInput = {
    update: XOR<PlayerUpdateWithoutCombineScoreInput, PlayerUncheckedUpdateWithoutCombineScoreInput>
    create: XOR<PlayerCreateWithoutCombineScoreInput, PlayerUncheckedCreateWithoutCombineScoreInput>
    where?: PlayerWhereInput
  }

  export type PlayerUpdateToOneWithWhereWithoutCombineScoreInput = {
    where?: PlayerWhereInput
    data: XOR<PlayerUpdateWithoutCombineScoreInput, PlayerUncheckedUpdateWithoutCombineScoreInput>
  }

  export type PlayerUpdateWithoutCombineScoreInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    handSize?: NullableFloatFieldUpdateOperationsInput | number | null
    armLength?: NullableFloatFieldUpdateOperationsInput | number | null
    homeCity?: NullableStringFieldUpdateOperationsInput | string | null
    homeState?: NullableStringFieldUpdateOperationsInput | string | null
    university?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    pickId?: NullableIntFieldUpdateOperationsInput | number | null
    combineScoreId?: NullableIntFieldUpdateOperationsInput | number | null
    yearEnteredLeague?: NullableIntFieldUpdateOperationsInput | number | null
    DraftPick?: DraftPickUpdateManyWithoutPlayerNestedInput
    Prospect?: ProspectUpdateOneWithoutPlayerNestedInput
    PlayerAward?: PlayerAwardUpdateManyWithoutPlayerNestedInput
    PlayerTeam?: PlayerTeamUpdateManyWithoutPlayerNestedInput
  }

  export type PlayerUncheckedUpdateWithoutCombineScoreInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    handSize?: NullableFloatFieldUpdateOperationsInput | number | null
    armLength?: NullableFloatFieldUpdateOperationsInput | number | null
    homeCity?: NullableStringFieldUpdateOperationsInput | string | null
    homeState?: NullableStringFieldUpdateOperationsInput | string | null
    university?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    pickId?: NullableIntFieldUpdateOperationsInput | number | null
    combineScoreId?: NullableIntFieldUpdateOperationsInput | number | null
    prospectId?: NullableIntFieldUpdateOperationsInput | number | null
    yearEnteredLeague?: NullableIntFieldUpdateOperationsInput | number | null
    DraftPick?: DraftPickUncheckedUpdateManyWithoutPlayerNestedInput
    PlayerAward?: PlayerAwardUncheckedUpdateManyWithoutPlayerNestedInput
    PlayerTeam?: PlayerTeamUncheckedUpdateManyWithoutPlayerNestedInput
  }

  export type TeamCreateWithoutDraftPickInput = {
    name: string
    city?: string | null
    state?: string | null
    conference?: string | null
    division?: string | null
    stadium?: string | null
    scheduleId?: number | null
    PlayerTeam?: PlayerTeamCreateNestedManyWithoutTeamInput
    PostSeasonResult?: PostSeasonResultCreateNestedManyWithoutTeamInput
    Prospect?: ProspectCreateNestedManyWithoutTeamInput
    Schedule_Schedule_teamIdToTeam?: ScheduleCreateNestedManyWithoutTeam_Schedule_teamIdToTeamInput
    Schedule_Schedule_oppTeamIdToTeam?: ScheduleCreateNestedManyWithoutTeam_Schedule_oppTeamIdToTeamInput
    TeamNeed?: TeamNeedCreateNestedManyWithoutTeamInput
  }

  export type TeamUncheckedCreateWithoutDraftPickInput = {
    id?: number
    name: string
    city?: string | null
    state?: string | null
    conference?: string | null
    division?: string | null
    stadium?: string | null
    scheduleId?: number | null
    PlayerTeam?: PlayerTeamUncheckedCreateNestedManyWithoutTeamInput
    PostSeasonResult?: PostSeasonResultUncheckedCreateNestedManyWithoutTeamInput
    Prospect?: ProspectUncheckedCreateNestedManyWithoutTeamInput
    Schedule_Schedule_teamIdToTeam?: ScheduleUncheckedCreateNestedManyWithoutTeam_Schedule_teamIdToTeamInput
    Schedule_Schedule_oppTeamIdToTeam?: ScheduleUncheckedCreateNestedManyWithoutTeam_Schedule_oppTeamIdToTeamInput
    TeamNeed?: TeamNeedUncheckedCreateNestedManyWithoutTeamInput
  }

  export type TeamCreateOrConnectWithoutDraftPickInput = {
    where: TeamWhereUniqueInput
    create: XOR<TeamCreateWithoutDraftPickInput, TeamUncheckedCreateWithoutDraftPickInput>
  }

  export type PlayerCreateWithoutDraftPickInput = {
    firstName: string
    lastName: string
    age: number
    height?: number | null
    weight?: number | null
    handSize?: number | null
    armLength?: number | null
    homeCity?: string | null
    homeState?: string | null
    university?: string | null
    status?: string | null
    position?: string | null
    pickId?: number | null
    combineScoreId?: number | null
    yearEnteredLeague?: number | null
    CombineScore?: CombineScoreCreateNestedManyWithoutPlayerInput
    Prospect?: ProspectCreateNestedOneWithoutPlayerInput
    PlayerAward?: PlayerAwardCreateNestedManyWithoutPlayerInput
    PlayerTeam?: PlayerTeamCreateNestedManyWithoutPlayerInput
  }

  export type PlayerUncheckedCreateWithoutDraftPickInput = {
    id?: number
    firstName: string
    lastName: string
    age: number
    height?: number | null
    weight?: number | null
    handSize?: number | null
    armLength?: number | null
    homeCity?: string | null
    homeState?: string | null
    university?: string | null
    status?: string | null
    position?: string | null
    pickId?: number | null
    combineScoreId?: number | null
    prospectId?: number | null
    yearEnteredLeague?: number | null
    CombineScore?: CombineScoreUncheckedCreateNestedManyWithoutPlayerInput
    PlayerAward?: PlayerAwardUncheckedCreateNestedManyWithoutPlayerInput
    PlayerTeam?: PlayerTeamUncheckedCreateNestedManyWithoutPlayerInput
  }

  export type PlayerCreateOrConnectWithoutDraftPickInput = {
    where: PlayerWhereUniqueInput
    create: XOR<PlayerCreateWithoutDraftPickInput, PlayerUncheckedCreateWithoutDraftPickInput>
  }

  export type ProspectCreateWithoutDraftPick_DraftPick_prospectIdToProspectInput = {
    firstName: string
    lastName: string
    position: string
    college: string
    height: number
    weight: number
    handSize?: number | null
    armLength?: number | null
    homeCity?: string | null
    homeState?: string | null
    fortyTime?: number | null
    tenYardSplit?: number | null
    verticalLeap?: number | null
    broadJump?: number | null
    threeCone?: number | null
    twentyYardShuttle?: number | null
    benchPress?: number | null
    drafted?: boolean
    draftYear?: number | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    Player?: PlayerCreateNestedManyWithoutProspectInput
    DraftPick_Prospect_draftPickIdToDraftPick?: DraftPickCreateNestedOneWithoutProspect_Prospect_draftPickIdToDraftPickInput
    Team?: TeamCreateNestedOneWithoutProspectInput
  }

  export type ProspectUncheckedCreateWithoutDraftPick_DraftPick_prospectIdToProspectInput = {
    id?: number
    firstName: string
    lastName: string
    position: string
    college: string
    height: number
    weight: number
    handSize?: number | null
    armLength?: number | null
    homeCity?: string | null
    homeState?: string | null
    fortyTime?: number | null
    tenYardSplit?: number | null
    verticalLeap?: number | null
    broadJump?: number | null
    threeCone?: number | null
    twentyYardShuttle?: number | null
    benchPress?: number | null
    drafted?: boolean
    draftYear?: number | null
    teamId?: number | null
    draftPickId?: number | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    Player?: PlayerUncheckedCreateNestedManyWithoutProspectInput
  }

  export type ProspectCreateOrConnectWithoutDraftPick_DraftPick_prospectIdToProspectInput = {
    where: ProspectWhereUniqueInput
    create: XOR<ProspectCreateWithoutDraftPick_DraftPick_prospectIdToProspectInput, ProspectUncheckedCreateWithoutDraftPick_DraftPick_prospectIdToProspectInput>
  }

  export type ProspectCreateWithoutDraftPick_Prospect_draftPickIdToDraftPickInput = {
    firstName: string
    lastName: string
    position: string
    college: string
    height: number
    weight: number
    handSize?: number | null
    armLength?: number | null
    homeCity?: string | null
    homeState?: string | null
    fortyTime?: number | null
    tenYardSplit?: number | null
    verticalLeap?: number | null
    broadJump?: number | null
    threeCone?: number | null
    twentyYardShuttle?: number | null
    benchPress?: number | null
    drafted?: boolean
    draftYear?: number | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    DraftPick_DraftPick_prospectIdToProspect?: DraftPickCreateNestedManyWithoutProspect_DraftPick_prospectIdToProspectInput
    Player?: PlayerCreateNestedManyWithoutProspectInput
    Team?: TeamCreateNestedOneWithoutProspectInput
  }

  export type ProspectUncheckedCreateWithoutDraftPick_Prospect_draftPickIdToDraftPickInput = {
    id?: number
    firstName: string
    lastName: string
    position: string
    college: string
    height: number
    weight: number
    handSize?: number | null
    armLength?: number | null
    homeCity?: string | null
    homeState?: string | null
    fortyTime?: number | null
    tenYardSplit?: number | null
    verticalLeap?: number | null
    broadJump?: number | null
    threeCone?: number | null
    twentyYardShuttle?: number | null
    benchPress?: number | null
    drafted?: boolean
    draftYear?: number | null
    teamId?: number | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    DraftPick_DraftPick_prospectIdToProspect?: DraftPickUncheckedCreateNestedManyWithoutProspect_DraftPick_prospectIdToProspectInput
    Player?: PlayerUncheckedCreateNestedManyWithoutProspectInput
  }

  export type ProspectCreateOrConnectWithoutDraftPick_Prospect_draftPickIdToDraftPickInput = {
    where: ProspectWhereUniqueInput
    create: XOR<ProspectCreateWithoutDraftPick_Prospect_draftPickIdToDraftPickInput, ProspectUncheckedCreateWithoutDraftPick_Prospect_draftPickIdToDraftPickInput>
  }

  export type ProspectCreateManyDraftPick_Prospect_draftPickIdToDraftPickInputEnvelope = {
    data: ProspectCreateManyDraftPick_Prospect_draftPickIdToDraftPickInput | ProspectCreateManyDraftPick_Prospect_draftPickIdToDraftPickInput[]
    skipDuplicates?: boolean
  }

  export type TeamUpsertWithoutDraftPickInput = {
    update: XOR<TeamUpdateWithoutDraftPickInput, TeamUncheckedUpdateWithoutDraftPickInput>
    create: XOR<TeamCreateWithoutDraftPickInput, TeamUncheckedCreateWithoutDraftPickInput>
    where?: TeamWhereInput
  }

  export type TeamUpdateToOneWithWhereWithoutDraftPickInput = {
    where?: TeamWhereInput
    data: XOR<TeamUpdateWithoutDraftPickInput, TeamUncheckedUpdateWithoutDraftPickInput>
  }

  export type TeamUpdateWithoutDraftPickInput = {
    name?: StringFieldUpdateOperationsInput | string
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    conference?: NullableStringFieldUpdateOperationsInput | string | null
    division?: NullableStringFieldUpdateOperationsInput | string | null
    stadium?: NullableStringFieldUpdateOperationsInput | string | null
    scheduleId?: NullableIntFieldUpdateOperationsInput | number | null
    PlayerTeam?: PlayerTeamUpdateManyWithoutTeamNestedInput
    PostSeasonResult?: PostSeasonResultUpdateManyWithoutTeamNestedInput
    Prospect?: ProspectUpdateManyWithoutTeamNestedInput
    Schedule_Schedule_teamIdToTeam?: ScheduleUpdateManyWithoutTeam_Schedule_teamIdToTeamNestedInput
    Schedule_Schedule_oppTeamIdToTeam?: ScheduleUpdateManyWithoutTeam_Schedule_oppTeamIdToTeamNestedInput
    TeamNeed?: TeamNeedUpdateManyWithoutTeamNestedInput
  }

  export type TeamUncheckedUpdateWithoutDraftPickInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    conference?: NullableStringFieldUpdateOperationsInput | string | null
    division?: NullableStringFieldUpdateOperationsInput | string | null
    stadium?: NullableStringFieldUpdateOperationsInput | string | null
    scheduleId?: NullableIntFieldUpdateOperationsInput | number | null
    PlayerTeam?: PlayerTeamUncheckedUpdateManyWithoutTeamNestedInput
    PostSeasonResult?: PostSeasonResultUncheckedUpdateManyWithoutTeamNestedInput
    Prospect?: ProspectUncheckedUpdateManyWithoutTeamNestedInput
    Schedule_Schedule_teamIdToTeam?: ScheduleUncheckedUpdateManyWithoutTeam_Schedule_teamIdToTeamNestedInput
    Schedule_Schedule_oppTeamIdToTeam?: ScheduleUncheckedUpdateManyWithoutTeam_Schedule_oppTeamIdToTeamNestedInput
    TeamNeed?: TeamNeedUncheckedUpdateManyWithoutTeamNestedInput
  }

  export type PlayerUpsertWithoutDraftPickInput = {
    update: XOR<PlayerUpdateWithoutDraftPickInput, PlayerUncheckedUpdateWithoutDraftPickInput>
    create: XOR<PlayerCreateWithoutDraftPickInput, PlayerUncheckedCreateWithoutDraftPickInput>
    where?: PlayerWhereInput
  }

  export type PlayerUpdateToOneWithWhereWithoutDraftPickInput = {
    where?: PlayerWhereInput
    data: XOR<PlayerUpdateWithoutDraftPickInput, PlayerUncheckedUpdateWithoutDraftPickInput>
  }

  export type PlayerUpdateWithoutDraftPickInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    handSize?: NullableFloatFieldUpdateOperationsInput | number | null
    armLength?: NullableFloatFieldUpdateOperationsInput | number | null
    homeCity?: NullableStringFieldUpdateOperationsInput | string | null
    homeState?: NullableStringFieldUpdateOperationsInput | string | null
    university?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    pickId?: NullableIntFieldUpdateOperationsInput | number | null
    combineScoreId?: NullableIntFieldUpdateOperationsInput | number | null
    yearEnteredLeague?: NullableIntFieldUpdateOperationsInput | number | null
    CombineScore?: CombineScoreUpdateManyWithoutPlayerNestedInput
    Prospect?: ProspectUpdateOneWithoutPlayerNestedInput
    PlayerAward?: PlayerAwardUpdateManyWithoutPlayerNestedInput
    PlayerTeam?: PlayerTeamUpdateManyWithoutPlayerNestedInput
  }

  export type PlayerUncheckedUpdateWithoutDraftPickInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    handSize?: NullableFloatFieldUpdateOperationsInput | number | null
    armLength?: NullableFloatFieldUpdateOperationsInput | number | null
    homeCity?: NullableStringFieldUpdateOperationsInput | string | null
    homeState?: NullableStringFieldUpdateOperationsInput | string | null
    university?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    pickId?: NullableIntFieldUpdateOperationsInput | number | null
    combineScoreId?: NullableIntFieldUpdateOperationsInput | number | null
    prospectId?: NullableIntFieldUpdateOperationsInput | number | null
    yearEnteredLeague?: NullableIntFieldUpdateOperationsInput | number | null
    CombineScore?: CombineScoreUncheckedUpdateManyWithoutPlayerNestedInput
    PlayerAward?: PlayerAwardUncheckedUpdateManyWithoutPlayerNestedInput
    PlayerTeam?: PlayerTeamUncheckedUpdateManyWithoutPlayerNestedInput
  }

  export type ProspectUpsertWithoutDraftPick_DraftPick_prospectIdToProspectInput = {
    update: XOR<ProspectUpdateWithoutDraftPick_DraftPick_prospectIdToProspectInput, ProspectUncheckedUpdateWithoutDraftPick_DraftPick_prospectIdToProspectInput>
    create: XOR<ProspectCreateWithoutDraftPick_DraftPick_prospectIdToProspectInput, ProspectUncheckedCreateWithoutDraftPick_DraftPick_prospectIdToProspectInput>
    where?: ProspectWhereInput
  }

  export type ProspectUpdateToOneWithWhereWithoutDraftPick_DraftPick_prospectIdToProspectInput = {
    where?: ProspectWhereInput
    data: XOR<ProspectUpdateWithoutDraftPick_DraftPick_prospectIdToProspectInput, ProspectUncheckedUpdateWithoutDraftPick_DraftPick_prospectIdToProspectInput>
  }

  export type ProspectUpdateWithoutDraftPick_DraftPick_prospectIdToProspectInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    college?: StringFieldUpdateOperationsInput | string
    height?: FloatFieldUpdateOperationsInput | number
    weight?: FloatFieldUpdateOperationsInput | number
    handSize?: NullableFloatFieldUpdateOperationsInput | number | null
    armLength?: NullableFloatFieldUpdateOperationsInput | number | null
    homeCity?: NullableStringFieldUpdateOperationsInput | string | null
    homeState?: NullableStringFieldUpdateOperationsInput | string | null
    fortyTime?: NullableFloatFieldUpdateOperationsInput | number | null
    tenYardSplit?: NullableFloatFieldUpdateOperationsInput | number | null
    verticalLeap?: NullableFloatFieldUpdateOperationsInput | number | null
    broadJump?: NullableFloatFieldUpdateOperationsInput | number | null
    threeCone?: NullableFloatFieldUpdateOperationsInput | number | null
    twentyYardShuttle?: NullableFloatFieldUpdateOperationsInput | number | null
    benchPress?: NullableIntFieldUpdateOperationsInput | number | null
    drafted?: BoolFieldUpdateOperationsInput | boolean
    draftYear?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Player?: PlayerUpdateManyWithoutProspectNestedInput
    DraftPick_Prospect_draftPickIdToDraftPick?: DraftPickUpdateOneWithoutProspect_Prospect_draftPickIdToDraftPickNestedInput
    Team?: TeamUpdateOneWithoutProspectNestedInput
  }

  export type ProspectUncheckedUpdateWithoutDraftPick_DraftPick_prospectIdToProspectInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    college?: StringFieldUpdateOperationsInput | string
    height?: FloatFieldUpdateOperationsInput | number
    weight?: FloatFieldUpdateOperationsInput | number
    handSize?: NullableFloatFieldUpdateOperationsInput | number | null
    armLength?: NullableFloatFieldUpdateOperationsInput | number | null
    homeCity?: NullableStringFieldUpdateOperationsInput | string | null
    homeState?: NullableStringFieldUpdateOperationsInput | string | null
    fortyTime?: NullableFloatFieldUpdateOperationsInput | number | null
    tenYardSplit?: NullableFloatFieldUpdateOperationsInput | number | null
    verticalLeap?: NullableFloatFieldUpdateOperationsInput | number | null
    broadJump?: NullableFloatFieldUpdateOperationsInput | number | null
    threeCone?: NullableFloatFieldUpdateOperationsInput | number | null
    twentyYardShuttle?: NullableFloatFieldUpdateOperationsInput | number | null
    benchPress?: NullableIntFieldUpdateOperationsInput | number | null
    drafted?: BoolFieldUpdateOperationsInput | boolean
    draftYear?: NullableIntFieldUpdateOperationsInput | number | null
    teamId?: NullableIntFieldUpdateOperationsInput | number | null
    draftPickId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Player?: PlayerUncheckedUpdateManyWithoutProspectNestedInput
  }

  export type ProspectUpsertWithWhereUniqueWithoutDraftPick_Prospect_draftPickIdToDraftPickInput = {
    where: ProspectWhereUniqueInput
    update: XOR<ProspectUpdateWithoutDraftPick_Prospect_draftPickIdToDraftPickInput, ProspectUncheckedUpdateWithoutDraftPick_Prospect_draftPickIdToDraftPickInput>
    create: XOR<ProspectCreateWithoutDraftPick_Prospect_draftPickIdToDraftPickInput, ProspectUncheckedCreateWithoutDraftPick_Prospect_draftPickIdToDraftPickInput>
  }

  export type ProspectUpdateWithWhereUniqueWithoutDraftPick_Prospect_draftPickIdToDraftPickInput = {
    where: ProspectWhereUniqueInput
    data: XOR<ProspectUpdateWithoutDraftPick_Prospect_draftPickIdToDraftPickInput, ProspectUncheckedUpdateWithoutDraftPick_Prospect_draftPickIdToDraftPickInput>
  }

  export type ProspectUpdateManyWithWhereWithoutDraftPick_Prospect_draftPickIdToDraftPickInput = {
    where: ProspectScalarWhereInput
    data: XOR<ProspectUpdateManyMutationInput, ProspectUncheckedUpdateManyWithoutDraftPick_Prospect_draftPickIdToDraftPickInput>
  }

  export type ProspectScalarWhereInput = {
    AND?: ProspectScalarWhereInput | ProspectScalarWhereInput[]
    OR?: ProspectScalarWhereInput[]
    NOT?: ProspectScalarWhereInput | ProspectScalarWhereInput[]
    id?: IntFilter<"Prospect"> | number
    firstName?: StringFilter<"Prospect"> | string
    lastName?: StringFilter<"Prospect"> | string
    position?: StringFilter<"Prospect"> | string
    college?: StringFilter<"Prospect"> | string
    height?: FloatFilter<"Prospect"> | number
    weight?: FloatFilter<"Prospect"> | number
    handSize?: FloatNullableFilter<"Prospect"> | number | null
    armLength?: FloatNullableFilter<"Prospect"> | number | null
    homeCity?: StringNullableFilter<"Prospect"> | string | null
    homeState?: StringNullableFilter<"Prospect"> | string | null
    fortyTime?: FloatNullableFilter<"Prospect"> | number | null
    tenYardSplit?: FloatNullableFilter<"Prospect"> | number | null
    verticalLeap?: FloatNullableFilter<"Prospect"> | number | null
    broadJump?: FloatNullableFilter<"Prospect"> | number | null
    threeCone?: FloatNullableFilter<"Prospect"> | number | null
    twentyYardShuttle?: FloatNullableFilter<"Prospect"> | number | null
    benchPress?: IntNullableFilter<"Prospect"> | number | null
    drafted?: BoolFilter<"Prospect"> | boolean
    draftYear?: IntNullableFilter<"Prospect"> | number | null
    teamId?: IntNullableFilter<"Prospect"> | number | null
    draftPickId?: IntNullableFilter<"Prospect"> | number | null
    createdAt?: DateTimeNullableFilter<"Prospect"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"Prospect"> | Date | string | null
  }

  export type CombineScoreCreateWithoutPlayerInput = {
    fortyTime?: number | null
    tenYardSplit?: number | null
    twentyYardShuttle?: number | null
    threeCone?: number | null
    verticalLeap?: number | null
    broadJump?: number | null
  }

  export type CombineScoreUncheckedCreateWithoutPlayerInput = {
    id?: number
    fortyTime?: number | null
    tenYardSplit?: number | null
    twentyYardShuttle?: number | null
    threeCone?: number | null
    verticalLeap?: number | null
    broadJump?: number | null
  }

  export type CombineScoreCreateOrConnectWithoutPlayerInput = {
    where: CombineScoreWhereUniqueInput
    create: XOR<CombineScoreCreateWithoutPlayerInput, CombineScoreUncheckedCreateWithoutPlayerInput>
  }

  export type CombineScoreCreateManyPlayerInputEnvelope = {
    data: CombineScoreCreateManyPlayerInput | CombineScoreCreateManyPlayerInput[]
    skipDuplicates?: boolean
  }

  export type DraftPickCreateWithoutPlayerInput = {
    round: number
    pickNumber: number
    draftYear: number
    used?: boolean
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    originalTeam?: number | null
    Team: TeamCreateNestedOneWithoutDraftPickInput
    Prospect_DraftPick_prospectIdToProspect?: ProspectCreateNestedOneWithoutDraftPick_DraftPick_prospectIdToProspectInput
    Prospect_Prospect_draftPickIdToDraftPick?: ProspectCreateNestedManyWithoutDraftPick_Prospect_draftPickIdToDraftPickInput
  }

  export type DraftPickUncheckedCreateWithoutPlayerInput = {
    id?: number
    round: number
    pickNumber: number
    draftYear: number
    currentTeamId: number
    prospectId?: number | null
    used?: boolean
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    originalTeam?: number | null
    Prospect_Prospect_draftPickIdToDraftPick?: ProspectUncheckedCreateNestedManyWithoutDraftPick_Prospect_draftPickIdToDraftPickInput
  }

  export type DraftPickCreateOrConnectWithoutPlayerInput = {
    where: DraftPickWhereUniqueInput
    create: XOR<DraftPickCreateWithoutPlayerInput, DraftPickUncheckedCreateWithoutPlayerInput>
  }

  export type DraftPickCreateManyPlayerInputEnvelope = {
    data: DraftPickCreateManyPlayerInput | DraftPickCreateManyPlayerInput[]
    skipDuplicates?: boolean
  }

  export type ProspectCreateWithoutPlayerInput = {
    firstName: string
    lastName: string
    position: string
    college: string
    height: number
    weight: number
    handSize?: number | null
    armLength?: number | null
    homeCity?: string | null
    homeState?: string | null
    fortyTime?: number | null
    tenYardSplit?: number | null
    verticalLeap?: number | null
    broadJump?: number | null
    threeCone?: number | null
    twentyYardShuttle?: number | null
    benchPress?: number | null
    drafted?: boolean
    draftYear?: number | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    DraftPick_DraftPick_prospectIdToProspect?: DraftPickCreateNestedManyWithoutProspect_DraftPick_prospectIdToProspectInput
    DraftPick_Prospect_draftPickIdToDraftPick?: DraftPickCreateNestedOneWithoutProspect_Prospect_draftPickIdToDraftPickInput
    Team?: TeamCreateNestedOneWithoutProspectInput
  }

  export type ProspectUncheckedCreateWithoutPlayerInput = {
    id?: number
    firstName: string
    lastName: string
    position: string
    college: string
    height: number
    weight: number
    handSize?: number | null
    armLength?: number | null
    homeCity?: string | null
    homeState?: string | null
    fortyTime?: number | null
    tenYardSplit?: number | null
    verticalLeap?: number | null
    broadJump?: number | null
    threeCone?: number | null
    twentyYardShuttle?: number | null
    benchPress?: number | null
    drafted?: boolean
    draftYear?: number | null
    teamId?: number | null
    draftPickId?: number | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    DraftPick_DraftPick_prospectIdToProspect?: DraftPickUncheckedCreateNestedManyWithoutProspect_DraftPick_prospectIdToProspectInput
  }

  export type ProspectCreateOrConnectWithoutPlayerInput = {
    where: ProspectWhereUniqueInput
    create: XOR<ProspectCreateWithoutPlayerInput, ProspectUncheckedCreateWithoutPlayerInput>
  }

  export type PlayerAwardCreateWithoutPlayerInput = {
    awardName?: string | null
    yearAwarded?: number | null
  }

  export type PlayerAwardUncheckedCreateWithoutPlayerInput = {
    id?: number
    awardName?: string | null
    yearAwarded?: number | null
  }

  export type PlayerAwardCreateOrConnectWithoutPlayerInput = {
    where: PlayerAwardWhereUniqueInput
    create: XOR<PlayerAwardCreateWithoutPlayerInput, PlayerAwardUncheckedCreateWithoutPlayerInput>
  }

  export type PlayerAwardCreateManyPlayerInputEnvelope = {
    data: PlayerAwardCreateManyPlayerInput | PlayerAwardCreateManyPlayerInput[]
    skipDuplicates?: boolean
  }

  export type PlayerTeamCreateWithoutPlayerInput = {
    currentTeam?: boolean
    startDate?: Date | string | null
    endDate?: Date | string | null
    jerseyNumber?: number | null
    contractValue?: number | null
    contractLength?: number | null
    Team: TeamCreateNestedOneWithoutPlayerTeamInput
  }

  export type PlayerTeamUncheckedCreateWithoutPlayerInput = {
    id?: number
    teamId: number
    currentTeam?: boolean
    startDate?: Date | string | null
    endDate?: Date | string | null
    jerseyNumber?: number | null
    contractValue?: number | null
    contractLength?: number | null
  }

  export type PlayerTeamCreateOrConnectWithoutPlayerInput = {
    where: PlayerTeamWhereUniqueInput
    create: XOR<PlayerTeamCreateWithoutPlayerInput, PlayerTeamUncheckedCreateWithoutPlayerInput>
  }

  export type PlayerTeamCreateManyPlayerInputEnvelope = {
    data: PlayerTeamCreateManyPlayerInput | PlayerTeamCreateManyPlayerInput[]
    skipDuplicates?: boolean
  }

  export type CombineScoreUpsertWithWhereUniqueWithoutPlayerInput = {
    where: CombineScoreWhereUniqueInput
    update: XOR<CombineScoreUpdateWithoutPlayerInput, CombineScoreUncheckedUpdateWithoutPlayerInput>
    create: XOR<CombineScoreCreateWithoutPlayerInput, CombineScoreUncheckedCreateWithoutPlayerInput>
  }

  export type CombineScoreUpdateWithWhereUniqueWithoutPlayerInput = {
    where: CombineScoreWhereUniqueInput
    data: XOR<CombineScoreUpdateWithoutPlayerInput, CombineScoreUncheckedUpdateWithoutPlayerInput>
  }

  export type CombineScoreUpdateManyWithWhereWithoutPlayerInput = {
    where: CombineScoreScalarWhereInput
    data: XOR<CombineScoreUpdateManyMutationInput, CombineScoreUncheckedUpdateManyWithoutPlayerInput>
  }

  export type CombineScoreScalarWhereInput = {
    AND?: CombineScoreScalarWhereInput | CombineScoreScalarWhereInput[]
    OR?: CombineScoreScalarWhereInput[]
    NOT?: CombineScoreScalarWhereInput | CombineScoreScalarWhereInput[]
    id?: IntFilter<"CombineScore"> | number
    fortyTime?: FloatNullableFilter<"CombineScore"> | number | null
    tenYardSplit?: FloatNullableFilter<"CombineScore"> | number | null
    twentyYardShuttle?: FloatNullableFilter<"CombineScore"> | number | null
    threeCone?: FloatNullableFilter<"CombineScore"> | number | null
    verticalLeap?: FloatNullableFilter<"CombineScore"> | number | null
    playerId?: IntNullableFilter<"CombineScore"> | number | null
    broadJump?: FloatNullableFilter<"CombineScore"> | number | null
  }

  export type DraftPickUpsertWithWhereUniqueWithoutPlayerInput = {
    where: DraftPickWhereUniqueInput
    update: XOR<DraftPickUpdateWithoutPlayerInput, DraftPickUncheckedUpdateWithoutPlayerInput>
    create: XOR<DraftPickCreateWithoutPlayerInput, DraftPickUncheckedCreateWithoutPlayerInput>
  }

  export type DraftPickUpdateWithWhereUniqueWithoutPlayerInput = {
    where: DraftPickWhereUniqueInput
    data: XOR<DraftPickUpdateWithoutPlayerInput, DraftPickUncheckedUpdateWithoutPlayerInput>
  }

  export type DraftPickUpdateManyWithWhereWithoutPlayerInput = {
    where: DraftPickScalarWhereInput
    data: XOR<DraftPickUpdateManyMutationInput, DraftPickUncheckedUpdateManyWithoutPlayerInput>
  }

  export type DraftPickScalarWhereInput = {
    AND?: DraftPickScalarWhereInput | DraftPickScalarWhereInput[]
    OR?: DraftPickScalarWhereInput[]
    NOT?: DraftPickScalarWhereInput | DraftPickScalarWhereInput[]
    id?: IntFilter<"DraftPick"> | number
    round?: IntFilter<"DraftPick"> | number
    pickNumber?: IntFilter<"DraftPick"> | number
    draftYear?: IntFilter<"DraftPick"> | number
    currentTeamId?: IntFilter<"DraftPick"> | number
    prospectId?: IntNullableFilter<"DraftPick"> | number | null
    playerId?: IntNullableFilter<"DraftPick"> | number | null
    used?: BoolFilter<"DraftPick"> | boolean
    createdAt?: DateTimeNullableFilter<"DraftPick"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"DraftPick"> | Date | string | null
    originalTeam?: IntNullableFilter<"DraftPick"> | number | null
  }

  export type ProspectUpsertWithoutPlayerInput = {
    update: XOR<ProspectUpdateWithoutPlayerInput, ProspectUncheckedUpdateWithoutPlayerInput>
    create: XOR<ProspectCreateWithoutPlayerInput, ProspectUncheckedCreateWithoutPlayerInput>
    where?: ProspectWhereInput
  }

  export type ProspectUpdateToOneWithWhereWithoutPlayerInput = {
    where?: ProspectWhereInput
    data: XOR<ProspectUpdateWithoutPlayerInput, ProspectUncheckedUpdateWithoutPlayerInput>
  }

  export type ProspectUpdateWithoutPlayerInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    college?: StringFieldUpdateOperationsInput | string
    height?: FloatFieldUpdateOperationsInput | number
    weight?: FloatFieldUpdateOperationsInput | number
    handSize?: NullableFloatFieldUpdateOperationsInput | number | null
    armLength?: NullableFloatFieldUpdateOperationsInput | number | null
    homeCity?: NullableStringFieldUpdateOperationsInput | string | null
    homeState?: NullableStringFieldUpdateOperationsInput | string | null
    fortyTime?: NullableFloatFieldUpdateOperationsInput | number | null
    tenYardSplit?: NullableFloatFieldUpdateOperationsInput | number | null
    verticalLeap?: NullableFloatFieldUpdateOperationsInput | number | null
    broadJump?: NullableFloatFieldUpdateOperationsInput | number | null
    threeCone?: NullableFloatFieldUpdateOperationsInput | number | null
    twentyYardShuttle?: NullableFloatFieldUpdateOperationsInput | number | null
    benchPress?: NullableIntFieldUpdateOperationsInput | number | null
    drafted?: BoolFieldUpdateOperationsInput | boolean
    draftYear?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    DraftPick_DraftPick_prospectIdToProspect?: DraftPickUpdateManyWithoutProspect_DraftPick_prospectIdToProspectNestedInput
    DraftPick_Prospect_draftPickIdToDraftPick?: DraftPickUpdateOneWithoutProspect_Prospect_draftPickIdToDraftPickNestedInput
    Team?: TeamUpdateOneWithoutProspectNestedInput
  }

  export type ProspectUncheckedUpdateWithoutPlayerInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    college?: StringFieldUpdateOperationsInput | string
    height?: FloatFieldUpdateOperationsInput | number
    weight?: FloatFieldUpdateOperationsInput | number
    handSize?: NullableFloatFieldUpdateOperationsInput | number | null
    armLength?: NullableFloatFieldUpdateOperationsInput | number | null
    homeCity?: NullableStringFieldUpdateOperationsInput | string | null
    homeState?: NullableStringFieldUpdateOperationsInput | string | null
    fortyTime?: NullableFloatFieldUpdateOperationsInput | number | null
    tenYardSplit?: NullableFloatFieldUpdateOperationsInput | number | null
    verticalLeap?: NullableFloatFieldUpdateOperationsInput | number | null
    broadJump?: NullableFloatFieldUpdateOperationsInput | number | null
    threeCone?: NullableFloatFieldUpdateOperationsInput | number | null
    twentyYardShuttle?: NullableFloatFieldUpdateOperationsInput | number | null
    benchPress?: NullableIntFieldUpdateOperationsInput | number | null
    drafted?: BoolFieldUpdateOperationsInput | boolean
    draftYear?: NullableIntFieldUpdateOperationsInput | number | null
    teamId?: NullableIntFieldUpdateOperationsInput | number | null
    draftPickId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    DraftPick_DraftPick_prospectIdToProspect?: DraftPickUncheckedUpdateManyWithoutProspect_DraftPick_prospectIdToProspectNestedInput
  }

  export type PlayerAwardUpsertWithWhereUniqueWithoutPlayerInput = {
    where: PlayerAwardWhereUniqueInput
    update: XOR<PlayerAwardUpdateWithoutPlayerInput, PlayerAwardUncheckedUpdateWithoutPlayerInput>
    create: XOR<PlayerAwardCreateWithoutPlayerInput, PlayerAwardUncheckedCreateWithoutPlayerInput>
  }

  export type PlayerAwardUpdateWithWhereUniqueWithoutPlayerInput = {
    where: PlayerAwardWhereUniqueInput
    data: XOR<PlayerAwardUpdateWithoutPlayerInput, PlayerAwardUncheckedUpdateWithoutPlayerInput>
  }

  export type PlayerAwardUpdateManyWithWhereWithoutPlayerInput = {
    where: PlayerAwardScalarWhereInput
    data: XOR<PlayerAwardUpdateManyMutationInput, PlayerAwardUncheckedUpdateManyWithoutPlayerInput>
  }

  export type PlayerAwardScalarWhereInput = {
    AND?: PlayerAwardScalarWhereInput | PlayerAwardScalarWhereInput[]
    OR?: PlayerAwardScalarWhereInput[]
    NOT?: PlayerAwardScalarWhereInput | PlayerAwardScalarWhereInput[]
    id?: IntFilter<"PlayerAward"> | number
    playerId?: IntFilter<"PlayerAward"> | number
    awardName?: StringNullableFilter<"PlayerAward"> | string | null
    yearAwarded?: IntNullableFilter<"PlayerAward"> | number | null
  }

  export type PlayerTeamUpsertWithWhereUniqueWithoutPlayerInput = {
    where: PlayerTeamWhereUniqueInput
    update: XOR<PlayerTeamUpdateWithoutPlayerInput, PlayerTeamUncheckedUpdateWithoutPlayerInput>
    create: XOR<PlayerTeamCreateWithoutPlayerInput, PlayerTeamUncheckedCreateWithoutPlayerInput>
  }

  export type PlayerTeamUpdateWithWhereUniqueWithoutPlayerInput = {
    where: PlayerTeamWhereUniqueInput
    data: XOR<PlayerTeamUpdateWithoutPlayerInput, PlayerTeamUncheckedUpdateWithoutPlayerInput>
  }

  export type PlayerTeamUpdateManyWithWhereWithoutPlayerInput = {
    where: PlayerTeamScalarWhereInput
    data: XOR<PlayerTeamUpdateManyMutationInput, PlayerTeamUncheckedUpdateManyWithoutPlayerInput>
  }

  export type PlayerTeamScalarWhereInput = {
    AND?: PlayerTeamScalarWhereInput | PlayerTeamScalarWhereInput[]
    OR?: PlayerTeamScalarWhereInput[]
    NOT?: PlayerTeamScalarWhereInput | PlayerTeamScalarWhereInput[]
    id?: IntFilter<"PlayerTeam"> | number
    playerId?: IntFilter<"PlayerTeam"> | number
    teamId?: IntFilter<"PlayerTeam"> | number
    currentTeam?: BoolFilter<"PlayerTeam"> | boolean
    startDate?: DateTimeNullableFilter<"PlayerTeam"> | Date | string | null
    endDate?: DateTimeNullableFilter<"PlayerTeam"> | Date | string | null
    jerseyNumber?: IntNullableFilter<"PlayerTeam"> | number | null
    contractValue?: IntNullableFilter<"PlayerTeam"> | number | null
    contractLength?: IntNullableFilter<"PlayerTeam"> | number | null
  }

  export type PlayerCreateWithoutPlayerAwardInput = {
    firstName: string
    lastName: string
    age: number
    height?: number | null
    weight?: number | null
    handSize?: number | null
    armLength?: number | null
    homeCity?: string | null
    homeState?: string | null
    university?: string | null
    status?: string | null
    position?: string | null
    pickId?: number | null
    combineScoreId?: number | null
    yearEnteredLeague?: number | null
    CombineScore?: CombineScoreCreateNestedManyWithoutPlayerInput
    DraftPick?: DraftPickCreateNestedManyWithoutPlayerInput
    Prospect?: ProspectCreateNestedOneWithoutPlayerInput
    PlayerTeam?: PlayerTeamCreateNestedManyWithoutPlayerInput
  }

  export type PlayerUncheckedCreateWithoutPlayerAwardInput = {
    id?: number
    firstName: string
    lastName: string
    age: number
    height?: number | null
    weight?: number | null
    handSize?: number | null
    armLength?: number | null
    homeCity?: string | null
    homeState?: string | null
    university?: string | null
    status?: string | null
    position?: string | null
    pickId?: number | null
    combineScoreId?: number | null
    prospectId?: number | null
    yearEnteredLeague?: number | null
    CombineScore?: CombineScoreUncheckedCreateNestedManyWithoutPlayerInput
    DraftPick?: DraftPickUncheckedCreateNestedManyWithoutPlayerInput
    PlayerTeam?: PlayerTeamUncheckedCreateNestedManyWithoutPlayerInput
  }

  export type PlayerCreateOrConnectWithoutPlayerAwardInput = {
    where: PlayerWhereUniqueInput
    create: XOR<PlayerCreateWithoutPlayerAwardInput, PlayerUncheckedCreateWithoutPlayerAwardInput>
  }

  export type PlayerUpsertWithoutPlayerAwardInput = {
    update: XOR<PlayerUpdateWithoutPlayerAwardInput, PlayerUncheckedUpdateWithoutPlayerAwardInput>
    create: XOR<PlayerCreateWithoutPlayerAwardInput, PlayerUncheckedCreateWithoutPlayerAwardInput>
    where?: PlayerWhereInput
  }

  export type PlayerUpdateToOneWithWhereWithoutPlayerAwardInput = {
    where?: PlayerWhereInput
    data: XOR<PlayerUpdateWithoutPlayerAwardInput, PlayerUncheckedUpdateWithoutPlayerAwardInput>
  }

  export type PlayerUpdateWithoutPlayerAwardInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    handSize?: NullableFloatFieldUpdateOperationsInput | number | null
    armLength?: NullableFloatFieldUpdateOperationsInput | number | null
    homeCity?: NullableStringFieldUpdateOperationsInput | string | null
    homeState?: NullableStringFieldUpdateOperationsInput | string | null
    university?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    pickId?: NullableIntFieldUpdateOperationsInput | number | null
    combineScoreId?: NullableIntFieldUpdateOperationsInput | number | null
    yearEnteredLeague?: NullableIntFieldUpdateOperationsInput | number | null
    CombineScore?: CombineScoreUpdateManyWithoutPlayerNestedInput
    DraftPick?: DraftPickUpdateManyWithoutPlayerNestedInput
    Prospect?: ProspectUpdateOneWithoutPlayerNestedInput
    PlayerTeam?: PlayerTeamUpdateManyWithoutPlayerNestedInput
  }

  export type PlayerUncheckedUpdateWithoutPlayerAwardInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    handSize?: NullableFloatFieldUpdateOperationsInput | number | null
    armLength?: NullableFloatFieldUpdateOperationsInput | number | null
    homeCity?: NullableStringFieldUpdateOperationsInput | string | null
    homeState?: NullableStringFieldUpdateOperationsInput | string | null
    university?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    pickId?: NullableIntFieldUpdateOperationsInput | number | null
    combineScoreId?: NullableIntFieldUpdateOperationsInput | number | null
    prospectId?: NullableIntFieldUpdateOperationsInput | number | null
    yearEnteredLeague?: NullableIntFieldUpdateOperationsInput | number | null
    CombineScore?: CombineScoreUncheckedUpdateManyWithoutPlayerNestedInput
    DraftPick?: DraftPickUncheckedUpdateManyWithoutPlayerNestedInput
    PlayerTeam?: PlayerTeamUncheckedUpdateManyWithoutPlayerNestedInput
  }

  export type PlayerCreateWithoutPlayerTeamInput = {
    firstName: string
    lastName: string
    age: number
    height?: number | null
    weight?: number | null
    handSize?: number | null
    armLength?: number | null
    homeCity?: string | null
    homeState?: string | null
    university?: string | null
    status?: string | null
    position?: string | null
    pickId?: number | null
    combineScoreId?: number | null
    yearEnteredLeague?: number | null
    CombineScore?: CombineScoreCreateNestedManyWithoutPlayerInput
    DraftPick?: DraftPickCreateNestedManyWithoutPlayerInput
    Prospect?: ProspectCreateNestedOneWithoutPlayerInput
    PlayerAward?: PlayerAwardCreateNestedManyWithoutPlayerInput
  }

  export type PlayerUncheckedCreateWithoutPlayerTeamInput = {
    id?: number
    firstName: string
    lastName: string
    age: number
    height?: number | null
    weight?: number | null
    handSize?: number | null
    armLength?: number | null
    homeCity?: string | null
    homeState?: string | null
    university?: string | null
    status?: string | null
    position?: string | null
    pickId?: number | null
    combineScoreId?: number | null
    prospectId?: number | null
    yearEnteredLeague?: number | null
    CombineScore?: CombineScoreUncheckedCreateNestedManyWithoutPlayerInput
    DraftPick?: DraftPickUncheckedCreateNestedManyWithoutPlayerInput
    PlayerAward?: PlayerAwardUncheckedCreateNestedManyWithoutPlayerInput
  }

  export type PlayerCreateOrConnectWithoutPlayerTeamInput = {
    where: PlayerWhereUniqueInput
    create: XOR<PlayerCreateWithoutPlayerTeamInput, PlayerUncheckedCreateWithoutPlayerTeamInput>
  }

  export type TeamCreateWithoutPlayerTeamInput = {
    name: string
    city?: string | null
    state?: string | null
    conference?: string | null
    division?: string | null
    stadium?: string | null
    scheduleId?: number | null
    DraftPick?: DraftPickCreateNestedManyWithoutTeamInput
    PostSeasonResult?: PostSeasonResultCreateNestedManyWithoutTeamInput
    Prospect?: ProspectCreateNestedManyWithoutTeamInput
    Schedule_Schedule_teamIdToTeam?: ScheduleCreateNestedManyWithoutTeam_Schedule_teamIdToTeamInput
    Schedule_Schedule_oppTeamIdToTeam?: ScheduleCreateNestedManyWithoutTeam_Schedule_oppTeamIdToTeamInput
    TeamNeed?: TeamNeedCreateNestedManyWithoutTeamInput
  }

  export type TeamUncheckedCreateWithoutPlayerTeamInput = {
    id?: number
    name: string
    city?: string | null
    state?: string | null
    conference?: string | null
    division?: string | null
    stadium?: string | null
    scheduleId?: number | null
    DraftPick?: DraftPickUncheckedCreateNestedManyWithoutTeamInput
    PostSeasonResult?: PostSeasonResultUncheckedCreateNestedManyWithoutTeamInput
    Prospect?: ProspectUncheckedCreateNestedManyWithoutTeamInput
    Schedule_Schedule_teamIdToTeam?: ScheduleUncheckedCreateNestedManyWithoutTeam_Schedule_teamIdToTeamInput
    Schedule_Schedule_oppTeamIdToTeam?: ScheduleUncheckedCreateNestedManyWithoutTeam_Schedule_oppTeamIdToTeamInput
    TeamNeed?: TeamNeedUncheckedCreateNestedManyWithoutTeamInput
  }

  export type TeamCreateOrConnectWithoutPlayerTeamInput = {
    where: TeamWhereUniqueInput
    create: XOR<TeamCreateWithoutPlayerTeamInput, TeamUncheckedCreateWithoutPlayerTeamInput>
  }

  export type PlayerUpsertWithoutPlayerTeamInput = {
    update: XOR<PlayerUpdateWithoutPlayerTeamInput, PlayerUncheckedUpdateWithoutPlayerTeamInput>
    create: XOR<PlayerCreateWithoutPlayerTeamInput, PlayerUncheckedCreateWithoutPlayerTeamInput>
    where?: PlayerWhereInput
  }

  export type PlayerUpdateToOneWithWhereWithoutPlayerTeamInput = {
    where?: PlayerWhereInput
    data: XOR<PlayerUpdateWithoutPlayerTeamInput, PlayerUncheckedUpdateWithoutPlayerTeamInput>
  }

  export type PlayerUpdateWithoutPlayerTeamInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    handSize?: NullableFloatFieldUpdateOperationsInput | number | null
    armLength?: NullableFloatFieldUpdateOperationsInput | number | null
    homeCity?: NullableStringFieldUpdateOperationsInput | string | null
    homeState?: NullableStringFieldUpdateOperationsInput | string | null
    university?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    pickId?: NullableIntFieldUpdateOperationsInput | number | null
    combineScoreId?: NullableIntFieldUpdateOperationsInput | number | null
    yearEnteredLeague?: NullableIntFieldUpdateOperationsInput | number | null
    CombineScore?: CombineScoreUpdateManyWithoutPlayerNestedInput
    DraftPick?: DraftPickUpdateManyWithoutPlayerNestedInput
    Prospect?: ProspectUpdateOneWithoutPlayerNestedInput
    PlayerAward?: PlayerAwardUpdateManyWithoutPlayerNestedInput
  }

  export type PlayerUncheckedUpdateWithoutPlayerTeamInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    handSize?: NullableFloatFieldUpdateOperationsInput | number | null
    armLength?: NullableFloatFieldUpdateOperationsInput | number | null
    homeCity?: NullableStringFieldUpdateOperationsInput | string | null
    homeState?: NullableStringFieldUpdateOperationsInput | string | null
    university?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    pickId?: NullableIntFieldUpdateOperationsInput | number | null
    combineScoreId?: NullableIntFieldUpdateOperationsInput | number | null
    prospectId?: NullableIntFieldUpdateOperationsInput | number | null
    yearEnteredLeague?: NullableIntFieldUpdateOperationsInput | number | null
    CombineScore?: CombineScoreUncheckedUpdateManyWithoutPlayerNestedInput
    DraftPick?: DraftPickUncheckedUpdateManyWithoutPlayerNestedInput
    PlayerAward?: PlayerAwardUncheckedUpdateManyWithoutPlayerNestedInput
  }

  export type TeamUpsertWithoutPlayerTeamInput = {
    update: XOR<TeamUpdateWithoutPlayerTeamInput, TeamUncheckedUpdateWithoutPlayerTeamInput>
    create: XOR<TeamCreateWithoutPlayerTeamInput, TeamUncheckedCreateWithoutPlayerTeamInput>
    where?: TeamWhereInput
  }

  export type TeamUpdateToOneWithWhereWithoutPlayerTeamInput = {
    where?: TeamWhereInput
    data: XOR<TeamUpdateWithoutPlayerTeamInput, TeamUncheckedUpdateWithoutPlayerTeamInput>
  }

  export type TeamUpdateWithoutPlayerTeamInput = {
    name?: StringFieldUpdateOperationsInput | string
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    conference?: NullableStringFieldUpdateOperationsInput | string | null
    division?: NullableStringFieldUpdateOperationsInput | string | null
    stadium?: NullableStringFieldUpdateOperationsInput | string | null
    scheduleId?: NullableIntFieldUpdateOperationsInput | number | null
    DraftPick?: DraftPickUpdateManyWithoutTeamNestedInput
    PostSeasonResult?: PostSeasonResultUpdateManyWithoutTeamNestedInput
    Prospect?: ProspectUpdateManyWithoutTeamNestedInput
    Schedule_Schedule_teamIdToTeam?: ScheduleUpdateManyWithoutTeam_Schedule_teamIdToTeamNestedInput
    Schedule_Schedule_oppTeamIdToTeam?: ScheduleUpdateManyWithoutTeam_Schedule_oppTeamIdToTeamNestedInput
    TeamNeed?: TeamNeedUpdateManyWithoutTeamNestedInput
  }

  export type TeamUncheckedUpdateWithoutPlayerTeamInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    conference?: NullableStringFieldUpdateOperationsInput | string | null
    division?: NullableStringFieldUpdateOperationsInput | string | null
    stadium?: NullableStringFieldUpdateOperationsInput | string | null
    scheduleId?: NullableIntFieldUpdateOperationsInput | number | null
    DraftPick?: DraftPickUncheckedUpdateManyWithoutTeamNestedInput
    PostSeasonResult?: PostSeasonResultUncheckedUpdateManyWithoutTeamNestedInput
    Prospect?: ProspectUncheckedUpdateManyWithoutTeamNestedInput
    Schedule_Schedule_teamIdToTeam?: ScheduleUncheckedUpdateManyWithoutTeam_Schedule_teamIdToTeamNestedInput
    Schedule_Schedule_oppTeamIdToTeam?: ScheduleUncheckedUpdateManyWithoutTeam_Schedule_oppTeamIdToTeamNestedInput
    TeamNeed?: TeamNeedUncheckedUpdateManyWithoutTeamNestedInput
  }

  export type TeamCreateWithoutPostSeasonResultInput = {
    name: string
    city?: string | null
    state?: string | null
    conference?: string | null
    division?: string | null
    stadium?: string | null
    scheduleId?: number | null
    DraftPick?: DraftPickCreateNestedManyWithoutTeamInput
    PlayerTeam?: PlayerTeamCreateNestedManyWithoutTeamInput
    Prospect?: ProspectCreateNestedManyWithoutTeamInput
    Schedule_Schedule_teamIdToTeam?: ScheduleCreateNestedManyWithoutTeam_Schedule_teamIdToTeamInput
    Schedule_Schedule_oppTeamIdToTeam?: ScheduleCreateNestedManyWithoutTeam_Schedule_oppTeamIdToTeamInput
    TeamNeed?: TeamNeedCreateNestedManyWithoutTeamInput
  }

  export type TeamUncheckedCreateWithoutPostSeasonResultInput = {
    id?: number
    name: string
    city?: string | null
    state?: string | null
    conference?: string | null
    division?: string | null
    stadium?: string | null
    scheduleId?: number | null
    DraftPick?: DraftPickUncheckedCreateNestedManyWithoutTeamInput
    PlayerTeam?: PlayerTeamUncheckedCreateNestedManyWithoutTeamInput
    Prospect?: ProspectUncheckedCreateNestedManyWithoutTeamInput
    Schedule_Schedule_teamIdToTeam?: ScheduleUncheckedCreateNestedManyWithoutTeam_Schedule_teamIdToTeamInput
    Schedule_Schedule_oppTeamIdToTeam?: ScheduleUncheckedCreateNestedManyWithoutTeam_Schedule_oppTeamIdToTeamInput
    TeamNeed?: TeamNeedUncheckedCreateNestedManyWithoutTeamInput
  }

  export type TeamCreateOrConnectWithoutPostSeasonResultInput = {
    where: TeamWhereUniqueInput
    create: XOR<TeamCreateWithoutPostSeasonResultInput, TeamUncheckedCreateWithoutPostSeasonResultInput>
  }

  export type TeamUpsertWithoutPostSeasonResultInput = {
    update: XOR<TeamUpdateWithoutPostSeasonResultInput, TeamUncheckedUpdateWithoutPostSeasonResultInput>
    create: XOR<TeamCreateWithoutPostSeasonResultInput, TeamUncheckedCreateWithoutPostSeasonResultInput>
    where?: TeamWhereInput
  }

  export type TeamUpdateToOneWithWhereWithoutPostSeasonResultInput = {
    where?: TeamWhereInput
    data: XOR<TeamUpdateWithoutPostSeasonResultInput, TeamUncheckedUpdateWithoutPostSeasonResultInput>
  }

  export type TeamUpdateWithoutPostSeasonResultInput = {
    name?: StringFieldUpdateOperationsInput | string
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    conference?: NullableStringFieldUpdateOperationsInput | string | null
    division?: NullableStringFieldUpdateOperationsInput | string | null
    stadium?: NullableStringFieldUpdateOperationsInput | string | null
    scheduleId?: NullableIntFieldUpdateOperationsInput | number | null
    DraftPick?: DraftPickUpdateManyWithoutTeamNestedInput
    PlayerTeam?: PlayerTeamUpdateManyWithoutTeamNestedInput
    Prospect?: ProspectUpdateManyWithoutTeamNestedInput
    Schedule_Schedule_teamIdToTeam?: ScheduleUpdateManyWithoutTeam_Schedule_teamIdToTeamNestedInput
    Schedule_Schedule_oppTeamIdToTeam?: ScheduleUpdateManyWithoutTeam_Schedule_oppTeamIdToTeamNestedInput
    TeamNeed?: TeamNeedUpdateManyWithoutTeamNestedInput
  }

  export type TeamUncheckedUpdateWithoutPostSeasonResultInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    conference?: NullableStringFieldUpdateOperationsInput | string | null
    division?: NullableStringFieldUpdateOperationsInput | string | null
    stadium?: NullableStringFieldUpdateOperationsInput | string | null
    scheduleId?: NullableIntFieldUpdateOperationsInput | number | null
    DraftPick?: DraftPickUncheckedUpdateManyWithoutTeamNestedInput
    PlayerTeam?: PlayerTeamUncheckedUpdateManyWithoutTeamNestedInput
    Prospect?: ProspectUncheckedUpdateManyWithoutTeamNestedInput
    Schedule_Schedule_teamIdToTeam?: ScheduleUncheckedUpdateManyWithoutTeam_Schedule_teamIdToTeamNestedInput
    Schedule_Schedule_oppTeamIdToTeam?: ScheduleUncheckedUpdateManyWithoutTeam_Schedule_oppTeamIdToTeamNestedInput
    TeamNeed?: TeamNeedUncheckedUpdateManyWithoutTeamNestedInput
  }

  export type DraftPickCreateWithoutProspect_DraftPick_prospectIdToProspectInput = {
    round: number
    pickNumber: number
    draftYear: number
    used?: boolean
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    originalTeam?: number | null
    Team: TeamCreateNestedOneWithoutDraftPickInput
    Player?: PlayerCreateNestedOneWithoutDraftPickInput
    Prospect_Prospect_draftPickIdToDraftPick?: ProspectCreateNestedManyWithoutDraftPick_Prospect_draftPickIdToDraftPickInput
  }

  export type DraftPickUncheckedCreateWithoutProspect_DraftPick_prospectIdToProspectInput = {
    id?: number
    round: number
    pickNumber: number
    draftYear: number
    currentTeamId: number
    playerId?: number | null
    used?: boolean
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    originalTeam?: number | null
    Prospect_Prospect_draftPickIdToDraftPick?: ProspectUncheckedCreateNestedManyWithoutDraftPick_Prospect_draftPickIdToDraftPickInput
  }

  export type DraftPickCreateOrConnectWithoutProspect_DraftPick_prospectIdToProspectInput = {
    where: DraftPickWhereUniqueInput
    create: XOR<DraftPickCreateWithoutProspect_DraftPick_prospectIdToProspectInput, DraftPickUncheckedCreateWithoutProspect_DraftPick_prospectIdToProspectInput>
  }

  export type DraftPickCreateManyProspect_DraftPick_prospectIdToProspectInputEnvelope = {
    data: DraftPickCreateManyProspect_DraftPick_prospectIdToProspectInput | DraftPickCreateManyProspect_DraftPick_prospectIdToProspectInput[]
    skipDuplicates?: boolean
  }

  export type PlayerCreateWithoutProspectInput = {
    firstName: string
    lastName: string
    age: number
    height?: number | null
    weight?: number | null
    handSize?: number | null
    armLength?: number | null
    homeCity?: string | null
    homeState?: string | null
    university?: string | null
    status?: string | null
    position?: string | null
    pickId?: number | null
    combineScoreId?: number | null
    yearEnteredLeague?: number | null
    CombineScore?: CombineScoreCreateNestedManyWithoutPlayerInput
    DraftPick?: DraftPickCreateNestedManyWithoutPlayerInput
    PlayerAward?: PlayerAwardCreateNestedManyWithoutPlayerInput
    PlayerTeam?: PlayerTeamCreateNestedManyWithoutPlayerInput
  }

  export type PlayerUncheckedCreateWithoutProspectInput = {
    id?: number
    firstName: string
    lastName: string
    age: number
    height?: number | null
    weight?: number | null
    handSize?: number | null
    armLength?: number | null
    homeCity?: string | null
    homeState?: string | null
    university?: string | null
    status?: string | null
    position?: string | null
    pickId?: number | null
    combineScoreId?: number | null
    yearEnteredLeague?: number | null
    CombineScore?: CombineScoreUncheckedCreateNestedManyWithoutPlayerInput
    DraftPick?: DraftPickUncheckedCreateNestedManyWithoutPlayerInput
    PlayerAward?: PlayerAwardUncheckedCreateNestedManyWithoutPlayerInput
    PlayerTeam?: PlayerTeamUncheckedCreateNestedManyWithoutPlayerInput
  }

  export type PlayerCreateOrConnectWithoutProspectInput = {
    where: PlayerWhereUniqueInput
    create: XOR<PlayerCreateWithoutProspectInput, PlayerUncheckedCreateWithoutProspectInput>
  }

  export type PlayerCreateManyProspectInputEnvelope = {
    data: PlayerCreateManyProspectInput | PlayerCreateManyProspectInput[]
    skipDuplicates?: boolean
  }

  export type DraftPickCreateWithoutProspect_Prospect_draftPickIdToDraftPickInput = {
    round: number
    pickNumber: number
    draftYear: number
    used?: boolean
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    originalTeam?: number | null
    Team: TeamCreateNestedOneWithoutDraftPickInput
    Player?: PlayerCreateNestedOneWithoutDraftPickInput
    Prospect_DraftPick_prospectIdToProspect?: ProspectCreateNestedOneWithoutDraftPick_DraftPick_prospectIdToProspectInput
  }

  export type DraftPickUncheckedCreateWithoutProspect_Prospect_draftPickIdToDraftPickInput = {
    id?: number
    round: number
    pickNumber: number
    draftYear: number
    currentTeamId: number
    prospectId?: number | null
    playerId?: number | null
    used?: boolean
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    originalTeam?: number | null
  }

  export type DraftPickCreateOrConnectWithoutProspect_Prospect_draftPickIdToDraftPickInput = {
    where: DraftPickWhereUniqueInput
    create: XOR<DraftPickCreateWithoutProspect_Prospect_draftPickIdToDraftPickInput, DraftPickUncheckedCreateWithoutProspect_Prospect_draftPickIdToDraftPickInput>
  }

  export type TeamCreateWithoutProspectInput = {
    name: string
    city?: string | null
    state?: string | null
    conference?: string | null
    division?: string | null
    stadium?: string | null
    scheduleId?: number | null
    DraftPick?: DraftPickCreateNestedManyWithoutTeamInput
    PlayerTeam?: PlayerTeamCreateNestedManyWithoutTeamInput
    PostSeasonResult?: PostSeasonResultCreateNestedManyWithoutTeamInput
    Schedule_Schedule_teamIdToTeam?: ScheduleCreateNestedManyWithoutTeam_Schedule_teamIdToTeamInput
    Schedule_Schedule_oppTeamIdToTeam?: ScheduleCreateNestedManyWithoutTeam_Schedule_oppTeamIdToTeamInput
    TeamNeed?: TeamNeedCreateNestedManyWithoutTeamInput
  }

  export type TeamUncheckedCreateWithoutProspectInput = {
    id?: number
    name: string
    city?: string | null
    state?: string | null
    conference?: string | null
    division?: string | null
    stadium?: string | null
    scheduleId?: number | null
    DraftPick?: DraftPickUncheckedCreateNestedManyWithoutTeamInput
    PlayerTeam?: PlayerTeamUncheckedCreateNestedManyWithoutTeamInput
    PostSeasonResult?: PostSeasonResultUncheckedCreateNestedManyWithoutTeamInput
    Schedule_Schedule_teamIdToTeam?: ScheduleUncheckedCreateNestedManyWithoutTeam_Schedule_teamIdToTeamInput
    Schedule_Schedule_oppTeamIdToTeam?: ScheduleUncheckedCreateNestedManyWithoutTeam_Schedule_oppTeamIdToTeamInput
    TeamNeed?: TeamNeedUncheckedCreateNestedManyWithoutTeamInput
  }

  export type TeamCreateOrConnectWithoutProspectInput = {
    where: TeamWhereUniqueInput
    create: XOR<TeamCreateWithoutProspectInput, TeamUncheckedCreateWithoutProspectInput>
  }

  export type DraftPickUpsertWithWhereUniqueWithoutProspect_DraftPick_prospectIdToProspectInput = {
    where: DraftPickWhereUniqueInput
    update: XOR<DraftPickUpdateWithoutProspect_DraftPick_prospectIdToProspectInput, DraftPickUncheckedUpdateWithoutProspect_DraftPick_prospectIdToProspectInput>
    create: XOR<DraftPickCreateWithoutProspect_DraftPick_prospectIdToProspectInput, DraftPickUncheckedCreateWithoutProspect_DraftPick_prospectIdToProspectInput>
  }

  export type DraftPickUpdateWithWhereUniqueWithoutProspect_DraftPick_prospectIdToProspectInput = {
    where: DraftPickWhereUniqueInput
    data: XOR<DraftPickUpdateWithoutProspect_DraftPick_prospectIdToProspectInput, DraftPickUncheckedUpdateWithoutProspect_DraftPick_prospectIdToProspectInput>
  }

  export type DraftPickUpdateManyWithWhereWithoutProspect_DraftPick_prospectIdToProspectInput = {
    where: DraftPickScalarWhereInput
    data: XOR<DraftPickUpdateManyMutationInput, DraftPickUncheckedUpdateManyWithoutProspect_DraftPick_prospectIdToProspectInput>
  }

  export type PlayerUpsertWithWhereUniqueWithoutProspectInput = {
    where: PlayerWhereUniqueInput
    update: XOR<PlayerUpdateWithoutProspectInput, PlayerUncheckedUpdateWithoutProspectInput>
    create: XOR<PlayerCreateWithoutProspectInput, PlayerUncheckedCreateWithoutProspectInput>
  }

  export type PlayerUpdateWithWhereUniqueWithoutProspectInput = {
    where: PlayerWhereUniqueInput
    data: XOR<PlayerUpdateWithoutProspectInput, PlayerUncheckedUpdateWithoutProspectInput>
  }

  export type PlayerUpdateManyWithWhereWithoutProspectInput = {
    where: PlayerScalarWhereInput
    data: XOR<PlayerUpdateManyMutationInput, PlayerUncheckedUpdateManyWithoutProspectInput>
  }

  export type PlayerScalarWhereInput = {
    AND?: PlayerScalarWhereInput | PlayerScalarWhereInput[]
    OR?: PlayerScalarWhereInput[]
    NOT?: PlayerScalarWhereInput | PlayerScalarWhereInput[]
    id?: IntFilter<"Player"> | number
    firstName?: StringFilter<"Player"> | string
    lastName?: StringFilter<"Player"> | string
    age?: IntFilter<"Player"> | number
    height?: FloatNullableFilter<"Player"> | number | null
    weight?: FloatNullableFilter<"Player"> | number | null
    handSize?: FloatNullableFilter<"Player"> | number | null
    armLength?: FloatNullableFilter<"Player"> | number | null
    homeCity?: StringNullableFilter<"Player"> | string | null
    homeState?: StringNullableFilter<"Player"> | string | null
    university?: StringNullableFilter<"Player"> | string | null
    status?: StringNullableFilter<"Player"> | string | null
    position?: StringNullableFilter<"Player"> | string | null
    pickId?: IntNullableFilter<"Player"> | number | null
    combineScoreId?: IntNullableFilter<"Player"> | number | null
    prospectId?: IntNullableFilter<"Player"> | number | null
    yearEnteredLeague?: IntNullableFilter<"Player"> | number | null
  }

  export type DraftPickUpsertWithoutProspect_Prospect_draftPickIdToDraftPickInput = {
    update: XOR<DraftPickUpdateWithoutProspect_Prospect_draftPickIdToDraftPickInput, DraftPickUncheckedUpdateWithoutProspect_Prospect_draftPickIdToDraftPickInput>
    create: XOR<DraftPickCreateWithoutProspect_Prospect_draftPickIdToDraftPickInput, DraftPickUncheckedCreateWithoutProspect_Prospect_draftPickIdToDraftPickInput>
    where?: DraftPickWhereInput
  }

  export type DraftPickUpdateToOneWithWhereWithoutProspect_Prospect_draftPickIdToDraftPickInput = {
    where?: DraftPickWhereInput
    data: XOR<DraftPickUpdateWithoutProspect_Prospect_draftPickIdToDraftPickInput, DraftPickUncheckedUpdateWithoutProspect_Prospect_draftPickIdToDraftPickInput>
  }

  export type DraftPickUpdateWithoutProspect_Prospect_draftPickIdToDraftPickInput = {
    round?: IntFieldUpdateOperationsInput | number
    pickNumber?: IntFieldUpdateOperationsInput | number
    draftYear?: IntFieldUpdateOperationsInput | number
    used?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    originalTeam?: NullableIntFieldUpdateOperationsInput | number | null
    Team?: TeamUpdateOneRequiredWithoutDraftPickNestedInput
    Player?: PlayerUpdateOneWithoutDraftPickNestedInput
    Prospect_DraftPick_prospectIdToProspect?: ProspectUpdateOneWithoutDraftPick_DraftPick_prospectIdToProspectNestedInput
  }

  export type DraftPickUncheckedUpdateWithoutProspect_Prospect_draftPickIdToDraftPickInput = {
    id?: IntFieldUpdateOperationsInput | number
    round?: IntFieldUpdateOperationsInput | number
    pickNumber?: IntFieldUpdateOperationsInput | number
    draftYear?: IntFieldUpdateOperationsInput | number
    currentTeamId?: IntFieldUpdateOperationsInput | number
    prospectId?: NullableIntFieldUpdateOperationsInput | number | null
    playerId?: NullableIntFieldUpdateOperationsInput | number | null
    used?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    originalTeam?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type TeamUpsertWithoutProspectInput = {
    update: XOR<TeamUpdateWithoutProspectInput, TeamUncheckedUpdateWithoutProspectInput>
    create: XOR<TeamCreateWithoutProspectInput, TeamUncheckedCreateWithoutProspectInput>
    where?: TeamWhereInput
  }

  export type TeamUpdateToOneWithWhereWithoutProspectInput = {
    where?: TeamWhereInput
    data: XOR<TeamUpdateWithoutProspectInput, TeamUncheckedUpdateWithoutProspectInput>
  }

  export type TeamUpdateWithoutProspectInput = {
    name?: StringFieldUpdateOperationsInput | string
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    conference?: NullableStringFieldUpdateOperationsInput | string | null
    division?: NullableStringFieldUpdateOperationsInput | string | null
    stadium?: NullableStringFieldUpdateOperationsInput | string | null
    scheduleId?: NullableIntFieldUpdateOperationsInput | number | null
    DraftPick?: DraftPickUpdateManyWithoutTeamNestedInput
    PlayerTeam?: PlayerTeamUpdateManyWithoutTeamNestedInput
    PostSeasonResult?: PostSeasonResultUpdateManyWithoutTeamNestedInput
    Schedule_Schedule_teamIdToTeam?: ScheduleUpdateManyWithoutTeam_Schedule_teamIdToTeamNestedInput
    Schedule_Schedule_oppTeamIdToTeam?: ScheduleUpdateManyWithoutTeam_Schedule_oppTeamIdToTeamNestedInput
    TeamNeed?: TeamNeedUpdateManyWithoutTeamNestedInput
  }

  export type TeamUncheckedUpdateWithoutProspectInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    conference?: NullableStringFieldUpdateOperationsInput | string | null
    division?: NullableStringFieldUpdateOperationsInput | string | null
    stadium?: NullableStringFieldUpdateOperationsInput | string | null
    scheduleId?: NullableIntFieldUpdateOperationsInput | number | null
    DraftPick?: DraftPickUncheckedUpdateManyWithoutTeamNestedInput
    PlayerTeam?: PlayerTeamUncheckedUpdateManyWithoutTeamNestedInput
    PostSeasonResult?: PostSeasonResultUncheckedUpdateManyWithoutTeamNestedInput
    Schedule_Schedule_teamIdToTeam?: ScheduleUncheckedUpdateManyWithoutTeam_Schedule_teamIdToTeamNestedInput
    Schedule_Schedule_oppTeamIdToTeam?: ScheduleUncheckedUpdateManyWithoutTeam_Schedule_oppTeamIdToTeamNestedInput
    TeamNeed?: TeamNeedUncheckedUpdateManyWithoutTeamNestedInput
  }

  export type TeamCreateWithoutSchedule_Schedule_teamIdToTeamInput = {
    name: string
    city?: string | null
    state?: string | null
    conference?: string | null
    division?: string | null
    stadium?: string | null
    scheduleId?: number | null
    DraftPick?: DraftPickCreateNestedManyWithoutTeamInput
    PlayerTeam?: PlayerTeamCreateNestedManyWithoutTeamInput
    PostSeasonResult?: PostSeasonResultCreateNestedManyWithoutTeamInput
    Prospect?: ProspectCreateNestedManyWithoutTeamInput
    Schedule_Schedule_oppTeamIdToTeam?: ScheduleCreateNestedManyWithoutTeam_Schedule_oppTeamIdToTeamInput
    TeamNeed?: TeamNeedCreateNestedManyWithoutTeamInput
  }

  export type TeamUncheckedCreateWithoutSchedule_Schedule_teamIdToTeamInput = {
    id?: number
    name: string
    city?: string | null
    state?: string | null
    conference?: string | null
    division?: string | null
    stadium?: string | null
    scheduleId?: number | null
    DraftPick?: DraftPickUncheckedCreateNestedManyWithoutTeamInput
    PlayerTeam?: PlayerTeamUncheckedCreateNestedManyWithoutTeamInput
    PostSeasonResult?: PostSeasonResultUncheckedCreateNestedManyWithoutTeamInput
    Prospect?: ProspectUncheckedCreateNestedManyWithoutTeamInput
    Schedule_Schedule_oppTeamIdToTeam?: ScheduleUncheckedCreateNestedManyWithoutTeam_Schedule_oppTeamIdToTeamInput
    TeamNeed?: TeamNeedUncheckedCreateNestedManyWithoutTeamInput
  }

  export type TeamCreateOrConnectWithoutSchedule_Schedule_teamIdToTeamInput = {
    where: TeamWhereUniqueInput
    create: XOR<TeamCreateWithoutSchedule_Schedule_teamIdToTeamInput, TeamUncheckedCreateWithoutSchedule_Schedule_teamIdToTeamInput>
  }

  export type TeamCreateWithoutSchedule_Schedule_oppTeamIdToTeamInput = {
    name: string
    city?: string | null
    state?: string | null
    conference?: string | null
    division?: string | null
    stadium?: string | null
    scheduleId?: number | null
    DraftPick?: DraftPickCreateNestedManyWithoutTeamInput
    PlayerTeam?: PlayerTeamCreateNestedManyWithoutTeamInput
    PostSeasonResult?: PostSeasonResultCreateNestedManyWithoutTeamInput
    Prospect?: ProspectCreateNestedManyWithoutTeamInput
    Schedule_Schedule_teamIdToTeam?: ScheduleCreateNestedManyWithoutTeam_Schedule_teamIdToTeamInput
    TeamNeed?: TeamNeedCreateNestedManyWithoutTeamInput
  }

  export type TeamUncheckedCreateWithoutSchedule_Schedule_oppTeamIdToTeamInput = {
    id?: number
    name: string
    city?: string | null
    state?: string | null
    conference?: string | null
    division?: string | null
    stadium?: string | null
    scheduleId?: number | null
    DraftPick?: DraftPickUncheckedCreateNestedManyWithoutTeamInput
    PlayerTeam?: PlayerTeamUncheckedCreateNestedManyWithoutTeamInput
    PostSeasonResult?: PostSeasonResultUncheckedCreateNestedManyWithoutTeamInput
    Prospect?: ProspectUncheckedCreateNestedManyWithoutTeamInput
    Schedule_Schedule_teamIdToTeam?: ScheduleUncheckedCreateNestedManyWithoutTeam_Schedule_teamIdToTeamInput
    TeamNeed?: TeamNeedUncheckedCreateNestedManyWithoutTeamInput
  }

  export type TeamCreateOrConnectWithoutSchedule_Schedule_oppTeamIdToTeamInput = {
    where: TeamWhereUniqueInput
    create: XOR<TeamCreateWithoutSchedule_Schedule_oppTeamIdToTeamInput, TeamUncheckedCreateWithoutSchedule_Schedule_oppTeamIdToTeamInput>
  }

  export type TeamUpsertWithoutSchedule_Schedule_teamIdToTeamInput = {
    update: XOR<TeamUpdateWithoutSchedule_Schedule_teamIdToTeamInput, TeamUncheckedUpdateWithoutSchedule_Schedule_teamIdToTeamInput>
    create: XOR<TeamCreateWithoutSchedule_Schedule_teamIdToTeamInput, TeamUncheckedCreateWithoutSchedule_Schedule_teamIdToTeamInput>
    where?: TeamWhereInput
  }

  export type TeamUpdateToOneWithWhereWithoutSchedule_Schedule_teamIdToTeamInput = {
    where?: TeamWhereInput
    data: XOR<TeamUpdateWithoutSchedule_Schedule_teamIdToTeamInput, TeamUncheckedUpdateWithoutSchedule_Schedule_teamIdToTeamInput>
  }

  export type TeamUpdateWithoutSchedule_Schedule_teamIdToTeamInput = {
    name?: StringFieldUpdateOperationsInput | string
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    conference?: NullableStringFieldUpdateOperationsInput | string | null
    division?: NullableStringFieldUpdateOperationsInput | string | null
    stadium?: NullableStringFieldUpdateOperationsInput | string | null
    scheduleId?: NullableIntFieldUpdateOperationsInput | number | null
    DraftPick?: DraftPickUpdateManyWithoutTeamNestedInput
    PlayerTeam?: PlayerTeamUpdateManyWithoutTeamNestedInput
    PostSeasonResult?: PostSeasonResultUpdateManyWithoutTeamNestedInput
    Prospect?: ProspectUpdateManyWithoutTeamNestedInput
    Schedule_Schedule_oppTeamIdToTeam?: ScheduleUpdateManyWithoutTeam_Schedule_oppTeamIdToTeamNestedInput
    TeamNeed?: TeamNeedUpdateManyWithoutTeamNestedInput
  }

  export type TeamUncheckedUpdateWithoutSchedule_Schedule_teamIdToTeamInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    conference?: NullableStringFieldUpdateOperationsInput | string | null
    division?: NullableStringFieldUpdateOperationsInput | string | null
    stadium?: NullableStringFieldUpdateOperationsInput | string | null
    scheduleId?: NullableIntFieldUpdateOperationsInput | number | null
    DraftPick?: DraftPickUncheckedUpdateManyWithoutTeamNestedInput
    PlayerTeam?: PlayerTeamUncheckedUpdateManyWithoutTeamNestedInput
    PostSeasonResult?: PostSeasonResultUncheckedUpdateManyWithoutTeamNestedInput
    Prospect?: ProspectUncheckedUpdateManyWithoutTeamNestedInput
    Schedule_Schedule_oppTeamIdToTeam?: ScheduleUncheckedUpdateManyWithoutTeam_Schedule_oppTeamIdToTeamNestedInput
    TeamNeed?: TeamNeedUncheckedUpdateManyWithoutTeamNestedInput
  }

  export type TeamUpsertWithoutSchedule_Schedule_oppTeamIdToTeamInput = {
    update: XOR<TeamUpdateWithoutSchedule_Schedule_oppTeamIdToTeamInput, TeamUncheckedUpdateWithoutSchedule_Schedule_oppTeamIdToTeamInput>
    create: XOR<TeamCreateWithoutSchedule_Schedule_oppTeamIdToTeamInput, TeamUncheckedCreateWithoutSchedule_Schedule_oppTeamIdToTeamInput>
    where?: TeamWhereInput
  }

  export type TeamUpdateToOneWithWhereWithoutSchedule_Schedule_oppTeamIdToTeamInput = {
    where?: TeamWhereInput
    data: XOR<TeamUpdateWithoutSchedule_Schedule_oppTeamIdToTeamInput, TeamUncheckedUpdateWithoutSchedule_Schedule_oppTeamIdToTeamInput>
  }

  export type TeamUpdateWithoutSchedule_Schedule_oppTeamIdToTeamInput = {
    name?: StringFieldUpdateOperationsInput | string
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    conference?: NullableStringFieldUpdateOperationsInput | string | null
    division?: NullableStringFieldUpdateOperationsInput | string | null
    stadium?: NullableStringFieldUpdateOperationsInput | string | null
    scheduleId?: NullableIntFieldUpdateOperationsInput | number | null
    DraftPick?: DraftPickUpdateManyWithoutTeamNestedInput
    PlayerTeam?: PlayerTeamUpdateManyWithoutTeamNestedInput
    PostSeasonResult?: PostSeasonResultUpdateManyWithoutTeamNestedInput
    Prospect?: ProspectUpdateManyWithoutTeamNestedInput
    Schedule_Schedule_teamIdToTeam?: ScheduleUpdateManyWithoutTeam_Schedule_teamIdToTeamNestedInput
    TeamNeed?: TeamNeedUpdateManyWithoutTeamNestedInput
  }

  export type TeamUncheckedUpdateWithoutSchedule_Schedule_oppTeamIdToTeamInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    conference?: NullableStringFieldUpdateOperationsInput | string | null
    division?: NullableStringFieldUpdateOperationsInput | string | null
    stadium?: NullableStringFieldUpdateOperationsInput | string | null
    scheduleId?: NullableIntFieldUpdateOperationsInput | number | null
    DraftPick?: DraftPickUncheckedUpdateManyWithoutTeamNestedInput
    PlayerTeam?: PlayerTeamUncheckedUpdateManyWithoutTeamNestedInput
    PostSeasonResult?: PostSeasonResultUncheckedUpdateManyWithoutTeamNestedInput
    Prospect?: ProspectUncheckedUpdateManyWithoutTeamNestedInput
    Schedule_Schedule_teamIdToTeam?: ScheduleUncheckedUpdateManyWithoutTeam_Schedule_teamIdToTeamNestedInput
    TeamNeed?: TeamNeedUncheckedUpdateManyWithoutTeamNestedInput
  }

  export type DraftPickCreateWithoutTeamInput = {
    round: number
    pickNumber: number
    draftYear: number
    used?: boolean
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    originalTeam?: number | null
    Player?: PlayerCreateNestedOneWithoutDraftPickInput
    Prospect_DraftPick_prospectIdToProspect?: ProspectCreateNestedOneWithoutDraftPick_DraftPick_prospectIdToProspectInput
    Prospect_Prospect_draftPickIdToDraftPick?: ProspectCreateNestedManyWithoutDraftPick_Prospect_draftPickIdToDraftPickInput
  }

  export type DraftPickUncheckedCreateWithoutTeamInput = {
    id?: number
    round: number
    pickNumber: number
    draftYear: number
    prospectId?: number | null
    playerId?: number | null
    used?: boolean
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    originalTeam?: number | null
    Prospect_Prospect_draftPickIdToDraftPick?: ProspectUncheckedCreateNestedManyWithoutDraftPick_Prospect_draftPickIdToDraftPickInput
  }

  export type DraftPickCreateOrConnectWithoutTeamInput = {
    where: DraftPickWhereUniqueInput
    create: XOR<DraftPickCreateWithoutTeamInput, DraftPickUncheckedCreateWithoutTeamInput>
  }

  export type DraftPickCreateManyTeamInputEnvelope = {
    data: DraftPickCreateManyTeamInput | DraftPickCreateManyTeamInput[]
    skipDuplicates?: boolean
  }

  export type PlayerTeamCreateWithoutTeamInput = {
    currentTeam?: boolean
    startDate?: Date | string | null
    endDate?: Date | string | null
    jerseyNumber?: number | null
    contractValue?: number | null
    contractLength?: number | null
    Player: PlayerCreateNestedOneWithoutPlayerTeamInput
  }

  export type PlayerTeamUncheckedCreateWithoutTeamInput = {
    id?: number
    playerId: number
    currentTeam?: boolean
    startDate?: Date | string | null
    endDate?: Date | string | null
    jerseyNumber?: number | null
    contractValue?: number | null
    contractLength?: number | null
  }

  export type PlayerTeamCreateOrConnectWithoutTeamInput = {
    where: PlayerTeamWhereUniqueInput
    create: XOR<PlayerTeamCreateWithoutTeamInput, PlayerTeamUncheckedCreateWithoutTeamInput>
  }

  export type PlayerTeamCreateManyTeamInputEnvelope = {
    data: PlayerTeamCreateManyTeamInput | PlayerTeamCreateManyTeamInput[]
    skipDuplicates?: boolean
  }

  export type PostSeasonResultCreateWithoutTeamInput = {
    playoffYear?: number | null
    lastRoundReached?: string | null
    winLose?: string | null
    opponentScore?: number | null
    teamScore?: number | null
  }

  export type PostSeasonResultUncheckedCreateWithoutTeamInput = {
    id?: number
    playoffYear?: number | null
    lastRoundReached?: string | null
    winLose?: string | null
    opponentScore?: number | null
    teamScore?: number | null
  }

  export type PostSeasonResultCreateOrConnectWithoutTeamInput = {
    where: PostSeasonResultWhereUniqueInput
    create: XOR<PostSeasonResultCreateWithoutTeamInput, PostSeasonResultUncheckedCreateWithoutTeamInput>
  }

  export type PostSeasonResultCreateManyTeamInputEnvelope = {
    data: PostSeasonResultCreateManyTeamInput | PostSeasonResultCreateManyTeamInput[]
    skipDuplicates?: boolean
  }

  export type ProspectCreateWithoutTeamInput = {
    firstName: string
    lastName: string
    position: string
    college: string
    height: number
    weight: number
    handSize?: number | null
    armLength?: number | null
    homeCity?: string | null
    homeState?: string | null
    fortyTime?: number | null
    tenYardSplit?: number | null
    verticalLeap?: number | null
    broadJump?: number | null
    threeCone?: number | null
    twentyYardShuttle?: number | null
    benchPress?: number | null
    drafted?: boolean
    draftYear?: number | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    DraftPick_DraftPick_prospectIdToProspect?: DraftPickCreateNestedManyWithoutProspect_DraftPick_prospectIdToProspectInput
    Player?: PlayerCreateNestedManyWithoutProspectInput
    DraftPick_Prospect_draftPickIdToDraftPick?: DraftPickCreateNestedOneWithoutProspect_Prospect_draftPickIdToDraftPickInput
  }

  export type ProspectUncheckedCreateWithoutTeamInput = {
    id?: number
    firstName: string
    lastName: string
    position: string
    college: string
    height: number
    weight: number
    handSize?: number | null
    armLength?: number | null
    homeCity?: string | null
    homeState?: string | null
    fortyTime?: number | null
    tenYardSplit?: number | null
    verticalLeap?: number | null
    broadJump?: number | null
    threeCone?: number | null
    twentyYardShuttle?: number | null
    benchPress?: number | null
    drafted?: boolean
    draftYear?: number | null
    draftPickId?: number | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    DraftPick_DraftPick_prospectIdToProspect?: DraftPickUncheckedCreateNestedManyWithoutProspect_DraftPick_prospectIdToProspectInput
    Player?: PlayerUncheckedCreateNestedManyWithoutProspectInput
  }

  export type ProspectCreateOrConnectWithoutTeamInput = {
    where: ProspectWhereUniqueInput
    create: XOR<ProspectCreateWithoutTeamInput, ProspectUncheckedCreateWithoutTeamInput>
  }

  export type ProspectCreateManyTeamInputEnvelope = {
    data: ProspectCreateManyTeamInput | ProspectCreateManyTeamInput[]
    skipDuplicates?: boolean
  }

  export type ScheduleCreateWithoutTeam_Schedule_teamIdToTeamInput = {
    seasonYear?: number | null
    oppTeamConference?: string | null
    oppTeamDivision?: string | null
    scheduleWeek?: number | null
    gameDate?: Date | string | null
    gameCity?: string | null
    gameStateProvince?: string | null
    gameCountry?: string | null
    gameLocation?: string | null
    wonLostFlag?: string | null
    homeOrAway?: string | null
    oppTeamScore?: number | null
    teamScore?: number | null
    Team_Schedule_oppTeamIdToTeam: TeamCreateNestedOneWithoutSchedule_Schedule_oppTeamIdToTeamInput
  }

  export type ScheduleUncheckedCreateWithoutTeam_Schedule_teamIdToTeamInput = {
    id?: number
    seasonYear?: number | null
    oppTeamId: number
    oppTeamConference?: string | null
    oppTeamDivision?: string | null
    scheduleWeek?: number | null
    gameDate?: Date | string | null
    gameCity?: string | null
    gameStateProvince?: string | null
    gameCountry?: string | null
    gameLocation?: string | null
    wonLostFlag?: string | null
    homeOrAway?: string | null
    oppTeamScore?: number | null
    teamScore?: number | null
  }

  export type ScheduleCreateOrConnectWithoutTeam_Schedule_teamIdToTeamInput = {
    where: ScheduleWhereUniqueInput
    create: XOR<ScheduleCreateWithoutTeam_Schedule_teamIdToTeamInput, ScheduleUncheckedCreateWithoutTeam_Schedule_teamIdToTeamInput>
  }

  export type ScheduleCreateManyTeam_Schedule_teamIdToTeamInputEnvelope = {
    data: ScheduleCreateManyTeam_Schedule_teamIdToTeamInput | ScheduleCreateManyTeam_Schedule_teamIdToTeamInput[]
    skipDuplicates?: boolean
  }

  export type ScheduleCreateWithoutTeam_Schedule_oppTeamIdToTeamInput = {
    seasonYear?: number | null
    oppTeamConference?: string | null
    oppTeamDivision?: string | null
    scheduleWeek?: number | null
    gameDate?: Date | string | null
    gameCity?: string | null
    gameStateProvince?: string | null
    gameCountry?: string | null
    gameLocation?: string | null
    wonLostFlag?: string | null
    homeOrAway?: string | null
    oppTeamScore?: number | null
    teamScore?: number | null
    Team_Schedule_teamIdToTeam?: TeamCreateNestedOneWithoutSchedule_Schedule_teamIdToTeamInput
  }

  export type ScheduleUncheckedCreateWithoutTeam_Schedule_oppTeamIdToTeamInput = {
    id?: number
    teamId?: number | null
    seasonYear?: number | null
    oppTeamConference?: string | null
    oppTeamDivision?: string | null
    scheduleWeek?: number | null
    gameDate?: Date | string | null
    gameCity?: string | null
    gameStateProvince?: string | null
    gameCountry?: string | null
    gameLocation?: string | null
    wonLostFlag?: string | null
    homeOrAway?: string | null
    oppTeamScore?: number | null
    teamScore?: number | null
  }

  export type ScheduleCreateOrConnectWithoutTeam_Schedule_oppTeamIdToTeamInput = {
    where: ScheduleWhereUniqueInput
    create: XOR<ScheduleCreateWithoutTeam_Schedule_oppTeamIdToTeamInput, ScheduleUncheckedCreateWithoutTeam_Schedule_oppTeamIdToTeamInput>
  }

  export type ScheduleCreateManyTeam_Schedule_oppTeamIdToTeamInputEnvelope = {
    data: ScheduleCreateManyTeam_Schedule_oppTeamIdToTeamInput | ScheduleCreateManyTeam_Schedule_oppTeamIdToTeamInput[]
    skipDuplicates?: boolean
  }

  export type TeamNeedCreateWithoutTeamInput = {
    position: string
    priority?: number
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    draftYear?: number | null
  }

  export type TeamNeedUncheckedCreateWithoutTeamInput = {
    id?: number
    position: string
    priority?: number
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    draftYear?: number | null
  }

  export type TeamNeedCreateOrConnectWithoutTeamInput = {
    where: TeamNeedWhereUniqueInput
    create: XOR<TeamNeedCreateWithoutTeamInput, TeamNeedUncheckedCreateWithoutTeamInput>
  }

  export type TeamNeedCreateManyTeamInputEnvelope = {
    data: TeamNeedCreateManyTeamInput | TeamNeedCreateManyTeamInput[]
    skipDuplicates?: boolean
  }

  export type DraftPickUpsertWithWhereUniqueWithoutTeamInput = {
    where: DraftPickWhereUniqueInput
    update: XOR<DraftPickUpdateWithoutTeamInput, DraftPickUncheckedUpdateWithoutTeamInput>
    create: XOR<DraftPickCreateWithoutTeamInput, DraftPickUncheckedCreateWithoutTeamInput>
  }

  export type DraftPickUpdateWithWhereUniqueWithoutTeamInput = {
    where: DraftPickWhereUniqueInput
    data: XOR<DraftPickUpdateWithoutTeamInput, DraftPickUncheckedUpdateWithoutTeamInput>
  }

  export type DraftPickUpdateManyWithWhereWithoutTeamInput = {
    where: DraftPickScalarWhereInput
    data: XOR<DraftPickUpdateManyMutationInput, DraftPickUncheckedUpdateManyWithoutTeamInput>
  }

  export type PlayerTeamUpsertWithWhereUniqueWithoutTeamInput = {
    where: PlayerTeamWhereUniqueInput
    update: XOR<PlayerTeamUpdateWithoutTeamInput, PlayerTeamUncheckedUpdateWithoutTeamInput>
    create: XOR<PlayerTeamCreateWithoutTeamInput, PlayerTeamUncheckedCreateWithoutTeamInput>
  }

  export type PlayerTeamUpdateWithWhereUniqueWithoutTeamInput = {
    where: PlayerTeamWhereUniqueInput
    data: XOR<PlayerTeamUpdateWithoutTeamInput, PlayerTeamUncheckedUpdateWithoutTeamInput>
  }

  export type PlayerTeamUpdateManyWithWhereWithoutTeamInput = {
    where: PlayerTeamScalarWhereInput
    data: XOR<PlayerTeamUpdateManyMutationInput, PlayerTeamUncheckedUpdateManyWithoutTeamInput>
  }

  export type PostSeasonResultUpsertWithWhereUniqueWithoutTeamInput = {
    where: PostSeasonResultWhereUniqueInput
    update: XOR<PostSeasonResultUpdateWithoutTeamInput, PostSeasonResultUncheckedUpdateWithoutTeamInput>
    create: XOR<PostSeasonResultCreateWithoutTeamInput, PostSeasonResultUncheckedCreateWithoutTeamInput>
  }

  export type PostSeasonResultUpdateWithWhereUniqueWithoutTeamInput = {
    where: PostSeasonResultWhereUniqueInput
    data: XOR<PostSeasonResultUpdateWithoutTeamInput, PostSeasonResultUncheckedUpdateWithoutTeamInput>
  }

  export type PostSeasonResultUpdateManyWithWhereWithoutTeamInput = {
    where: PostSeasonResultScalarWhereInput
    data: XOR<PostSeasonResultUpdateManyMutationInput, PostSeasonResultUncheckedUpdateManyWithoutTeamInput>
  }

  export type PostSeasonResultScalarWhereInput = {
    AND?: PostSeasonResultScalarWhereInput | PostSeasonResultScalarWhereInput[]
    OR?: PostSeasonResultScalarWhereInput[]
    NOT?: PostSeasonResultScalarWhereInput | PostSeasonResultScalarWhereInput[]
    id?: IntFilter<"PostSeasonResult"> | number
    playoffYear?: IntNullableFilter<"PostSeasonResult"> | number | null
    lastRoundReached?: StringNullableFilter<"PostSeasonResult"> | string | null
    winLose?: StringNullableFilter<"PostSeasonResult"> | string | null
    opponentScore?: IntNullableFilter<"PostSeasonResult"> | number | null
    teamScore?: IntNullableFilter<"PostSeasonResult"> | number | null
    teamId?: IntNullableFilter<"PostSeasonResult"> | number | null
  }

  export type ProspectUpsertWithWhereUniqueWithoutTeamInput = {
    where: ProspectWhereUniqueInput
    update: XOR<ProspectUpdateWithoutTeamInput, ProspectUncheckedUpdateWithoutTeamInput>
    create: XOR<ProspectCreateWithoutTeamInput, ProspectUncheckedCreateWithoutTeamInput>
  }

  export type ProspectUpdateWithWhereUniqueWithoutTeamInput = {
    where: ProspectWhereUniqueInput
    data: XOR<ProspectUpdateWithoutTeamInput, ProspectUncheckedUpdateWithoutTeamInput>
  }

  export type ProspectUpdateManyWithWhereWithoutTeamInput = {
    where: ProspectScalarWhereInput
    data: XOR<ProspectUpdateManyMutationInput, ProspectUncheckedUpdateManyWithoutTeamInput>
  }

  export type ScheduleUpsertWithWhereUniqueWithoutTeam_Schedule_teamIdToTeamInput = {
    where: ScheduleWhereUniqueInput
    update: XOR<ScheduleUpdateWithoutTeam_Schedule_teamIdToTeamInput, ScheduleUncheckedUpdateWithoutTeam_Schedule_teamIdToTeamInput>
    create: XOR<ScheduleCreateWithoutTeam_Schedule_teamIdToTeamInput, ScheduleUncheckedCreateWithoutTeam_Schedule_teamIdToTeamInput>
  }

  export type ScheduleUpdateWithWhereUniqueWithoutTeam_Schedule_teamIdToTeamInput = {
    where: ScheduleWhereUniqueInput
    data: XOR<ScheduleUpdateWithoutTeam_Schedule_teamIdToTeamInput, ScheduleUncheckedUpdateWithoutTeam_Schedule_teamIdToTeamInput>
  }

  export type ScheduleUpdateManyWithWhereWithoutTeam_Schedule_teamIdToTeamInput = {
    where: ScheduleScalarWhereInput
    data: XOR<ScheduleUpdateManyMutationInput, ScheduleUncheckedUpdateManyWithoutTeam_Schedule_teamIdToTeamInput>
  }

  export type ScheduleScalarWhereInput = {
    AND?: ScheduleScalarWhereInput | ScheduleScalarWhereInput[]
    OR?: ScheduleScalarWhereInput[]
    NOT?: ScheduleScalarWhereInput | ScheduleScalarWhereInput[]
    id?: IntFilter<"Schedule"> | number
    teamId?: IntNullableFilter<"Schedule"> | number | null
    seasonYear?: IntNullableFilter<"Schedule"> | number | null
    oppTeamId?: IntFilter<"Schedule"> | number
    oppTeamConference?: StringNullableFilter<"Schedule"> | string | null
    oppTeamDivision?: StringNullableFilter<"Schedule"> | string | null
    scheduleWeek?: IntNullableFilter<"Schedule"> | number | null
    gameDate?: DateTimeNullableFilter<"Schedule"> | Date | string | null
    gameCity?: StringNullableFilter<"Schedule"> | string | null
    gameStateProvince?: StringNullableFilter<"Schedule"> | string | null
    gameCountry?: StringNullableFilter<"Schedule"> | string | null
    gameLocation?: StringNullableFilter<"Schedule"> | string | null
    wonLostFlag?: StringNullableFilter<"Schedule"> | string | null
    homeOrAway?: StringNullableFilter<"Schedule"> | string | null
    oppTeamScore?: IntNullableFilter<"Schedule"> | number | null
    teamScore?: IntNullableFilter<"Schedule"> | number | null
  }

  export type ScheduleUpsertWithWhereUniqueWithoutTeam_Schedule_oppTeamIdToTeamInput = {
    where: ScheduleWhereUniqueInput
    update: XOR<ScheduleUpdateWithoutTeam_Schedule_oppTeamIdToTeamInput, ScheduleUncheckedUpdateWithoutTeam_Schedule_oppTeamIdToTeamInput>
    create: XOR<ScheduleCreateWithoutTeam_Schedule_oppTeamIdToTeamInput, ScheduleUncheckedCreateWithoutTeam_Schedule_oppTeamIdToTeamInput>
  }

  export type ScheduleUpdateWithWhereUniqueWithoutTeam_Schedule_oppTeamIdToTeamInput = {
    where: ScheduleWhereUniqueInput
    data: XOR<ScheduleUpdateWithoutTeam_Schedule_oppTeamIdToTeamInput, ScheduleUncheckedUpdateWithoutTeam_Schedule_oppTeamIdToTeamInput>
  }

  export type ScheduleUpdateManyWithWhereWithoutTeam_Schedule_oppTeamIdToTeamInput = {
    where: ScheduleScalarWhereInput
    data: XOR<ScheduleUpdateManyMutationInput, ScheduleUncheckedUpdateManyWithoutTeam_Schedule_oppTeamIdToTeamInput>
  }

  export type TeamNeedUpsertWithWhereUniqueWithoutTeamInput = {
    where: TeamNeedWhereUniqueInput
    update: XOR<TeamNeedUpdateWithoutTeamInput, TeamNeedUncheckedUpdateWithoutTeamInput>
    create: XOR<TeamNeedCreateWithoutTeamInput, TeamNeedUncheckedCreateWithoutTeamInput>
  }

  export type TeamNeedUpdateWithWhereUniqueWithoutTeamInput = {
    where: TeamNeedWhereUniqueInput
    data: XOR<TeamNeedUpdateWithoutTeamInput, TeamNeedUncheckedUpdateWithoutTeamInput>
  }

  export type TeamNeedUpdateManyWithWhereWithoutTeamInput = {
    where: TeamNeedScalarWhereInput
    data: XOR<TeamNeedUpdateManyMutationInput, TeamNeedUncheckedUpdateManyWithoutTeamInput>
  }

  export type TeamNeedScalarWhereInput = {
    AND?: TeamNeedScalarWhereInput | TeamNeedScalarWhereInput[]
    OR?: TeamNeedScalarWhereInput[]
    NOT?: TeamNeedScalarWhereInput | TeamNeedScalarWhereInput[]
    id?: IntFilter<"TeamNeed"> | number
    teamId?: IntFilter<"TeamNeed"> | number
    position?: StringFilter<"TeamNeed"> | string
    priority?: IntFilter<"TeamNeed"> | number
    createdAt?: DateTimeNullableFilter<"TeamNeed"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"TeamNeed"> | Date | string | null
    draftYear?: IntNullableFilter<"TeamNeed"> | number | null
  }

  export type TeamCreateWithoutTeamNeedInput = {
    name: string
    city?: string | null
    state?: string | null
    conference?: string | null
    division?: string | null
    stadium?: string | null
    scheduleId?: number | null
    DraftPick?: DraftPickCreateNestedManyWithoutTeamInput
    PlayerTeam?: PlayerTeamCreateNestedManyWithoutTeamInput
    PostSeasonResult?: PostSeasonResultCreateNestedManyWithoutTeamInput
    Prospect?: ProspectCreateNestedManyWithoutTeamInput
    Schedule_Schedule_teamIdToTeam?: ScheduleCreateNestedManyWithoutTeam_Schedule_teamIdToTeamInput
    Schedule_Schedule_oppTeamIdToTeam?: ScheduleCreateNestedManyWithoutTeam_Schedule_oppTeamIdToTeamInput
  }

  export type TeamUncheckedCreateWithoutTeamNeedInput = {
    id?: number
    name: string
    city?: string | null
    state?: string | null
    conference?: string | null
    division?: string | null
    stadium?: string | null
    scheduleId?: number | null
    DraftPick?: DraftPickUncheckedCreateNestedManyWithoutTeamInput
    PlayerTeam?: PlayerTeamUncheckedCreateNestedManyWithoutTeamInput
    PostSeasonResult?: PostSeasonResultUncheckedCreateNestedManyWithoutTeamInput
    Prospect?: ProspectUncheckedCreateNestedManyWithoutTeamInput
    Schedule_Schedule_teamIdToTeam?: ScheduleUncheckedCreateNestedManyWithoutTeam_Schedule_teamIdToTeamInput
    Schedule_Schedule_oppTeamIdToTeam?: ScheduleUncheckedCreateNestedManyWithoutTeam_Schedule_oppTeamIdToTeamInput
  }

  export type TeamCreateOrConnectWithoutTeamNeedInput = {
    where: TeamWhereUniqueInput
    create: XOR<TeamCreateWithoutTeamNeedInput, TeamUncheckedCreateWithoutTeamNeedInput>
  }

  export type TeamUpsertWithoutTeamNeedInput = {
    update: XOR<TeamUpdateWithoutTeamNeedInput, TeamUncheckedUpdateWithoutTeamNeedInput>
    create: XOR<TeamCreateWithoutTeamNeedInput, TeamUncheckedCreateWithoutTeamNeedInput>
    where?: TeamWhereInput
  }

  export type TeamUpdateToOneWithWhereWithoutTeamNeedInput = {
    where?: TeamWhereInput
    data: XOR<TeamUpdateWithoutTeamNeedInput, TeamUncheckedUpdateWithoutTeamNeedInput>
  }

  export type TeamUpdateWithoutTeamNeedInput = {
    name?: StringFieldUpdateOperationsInput | string
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    conference?: NullableStringFieldUpdateOperationsInput | string | null
    division?: NullableStringFieldUpdateOperationsInput | string | null
    stadium?: NullableStringFieldUpdateOperationsInput | string | null
    scheduleId?: NullableIntFieldUpdateOperationsInput | number | null
    DraftPick?: DraftPickUpdateManyWithoutTeamNestedInput
    PlayerTeam?: PlayerTeamUpdateManyWithoutTeamNestedInput
    PostSeasonResult?: PostSeasonResultUpdateManyWithoutTeamNestedInput
    Prospect?: ProspectUpdateManyWithoutTeamNestedInput
    Schedule_Schedule_teamIdToTeam?: ScheduleUpdateManyWithoutTeam_Schedule_teamIdToTeamNestedInput
    Schedule_Schedule_oppTeamIdToTeam?: ScheduleUpdateManyWithoutTeam_Schedule_oppTeamIdToTeamNestedInput
  }

  export type TeamUncheckedUpdateWithoutTeamNeedInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    conference?: NullableStringFieldUpdateOperationsInput | string | null
    division?: NullableStringFieldUpdateOperationsInput | string | null
    stadium?: NullableStringFieldUpdateOperationsInput | string | null
    scheduleId?: NullableIntFieldUpdateOperationsInput | number | null
    DraftPick?: DraftPickUncheckedUpdateManyWithoutTeamNestedInput
    PlayerTeam?: PlayerTeamUncheckedUpdateManyWithoutTeamNestedInput
    PostSeasonResult?: PostSeasonResultUncheckedUpdateManyWithoutTeamNestedInput
    Prospect?: ProspectUncheckedUpdateManyWithoutTeamNestedInput
    Schedule_Schedule_teamIdToTeam?: ScheduleUncheckedUpdateManyWithoutTeam_Schedule_teamIdToTeamNestedInput
    Schedule_Schedule_oppTeamIdToTeam?: ScheduleUncheckedUpdateManyWithoutTeam_Schedule_oppTeamIdToTeamNestedInput
  }

  export type ProspectCreateManyDraftPick_Prospect_draftPickIdToDraftPickInput = {
    id?: number
    firstName: string
    lastName: string
    position: string
    college: string
    height: number
    weight: number
    handSize?: number | null
    armLength?: number | null
    homeCity?: string | null
    homeState?: string | null
    fortyTime?: number | null
    tenYardSplit?: number | null
    verticalLeap?: number | null
    broadJump?: number | null
    threeCone?: number | null
    twentyYardShuttle?: number | null
    benchPress?: number | null
    drafted?: boolean
    draftYear?: number | null
    teamId?: number | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type ProspectUpdateWithoutDraftPick_Prospect_draftPickIdToDraftPickInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    college?: StringFieldUpdateOperationsInput | string
    height?: FloatFieldUpdateOperationsInput | number
    weight?: FloatFieldUpdateOperationsInput | number
    handSize?: NullableFloatFieldUpdateOperationsInput | number | null
    armLength?: NullableFloatFieldUpdateOperationsInput | number | null
    homeCity?: NullableStringFieldUpdateOperationsInput | string | null
    homeState?: NullableStringFieldUpdateOperationsInput | string | null
    fortyTime?: NullableFloatFieldUpdateOperationsInput | number | null
    tenYardSplit?: NullableFloatFieldUpdateOperationsInput | number | null
    verticalLeap?: NullableFloatFieldUpdateOperationsInput | number | null
    broadJump?: NullableFloatFieldUpdateOperationsInput | number | null
    threeCone?: NullableFloatFieldUpdateOperationsInput | number | null
    twentyYardShuttle?: NullableFloatFieldUpdateOperationsInput | number | null
    benchPress?: NullableIntFieldUpdateOperationsInput | number | null
    drafted?: BoolFieldUpdateOperationsInput | boolean
    draftYear?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    DraftPick_DraftPick_prospectIdToProspect?: DraftPickUpdateManyWithoutProspect_DraftPick_prospectIdToProspectNestedInput
    Player?: PlayerUpdateManyWithoutProspectNestedInput
    Team?: TeamUpdateOneWithoutProspectNestedInput
  }

  export type ProspectUncheckedUpdateWithoutDraftPick_Prospect_draftPickIdToDraftPickInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    college?: StringFieldUpdateOperationsInput | string
    height?: FloatFieldUpdateOperationsInput | number
    weight?: FloatFieldUpdateOperationsInput | number
    handSize?: NullableFloatFieldUpdateOperationsInput | number | null
    armLength?: NullableFloatFieldUpdateOperationsInput | number | null
    homeCity?: NullableStringFieldUpdateOperationsInput | string | null
    homeState?: NullableStringFieldUpdateOperationsInput | string | null
    fortyTime?: NullableFloatFieldUpdateOperationsInput | number | null
    tenYardSplit?: NullableFloatFieldUpdateOperationsInput | number | null
    verticalLeap?: NullableFloatFieldUpdateOperationsInput | number | null
    broadJump?: NullableFloatFieldUpdateOperationsInput | number | null
    threeCone?: NullableFloatFieldUpdateOperationsInput | number | null
    twentyYardShuttle?: NullableFloatFieldUpdateOperationsInput | number | null
    benchPress?: NullableIntFieldUpdateOperationsInput | number | null
    drafted?: BoolFieldUpdateOperationsInput | boolean
    draftYear?: NullableIntFieldUpdateOperationsInput | number | null
    teamId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    DraftPick_DraftPick_prospectIdToProspect?: DraftPickUncheckedUpdateManyWithoutProspect_DraftPick_prospectIdToProspectNestedInput
    Player?: PlayerUncheckedUpdateManyWithoutProspectNestedInput
  }

  export type ProspectUncheckedUpdateManyWithoutDraftPick_Prospect_draftPickIdToDraftPickInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    college?: StringFieldUpdateOperationsInput | string
    height?: FloatFieldUpdateOperationsInput | number
    weight?: FloatFieldUpdateOperationsInput | number
    handSize?: NullableFloatFieldUpdateOperationsInput | number | null
    armLength?: NullableFloatFieldUpdateOperationsInput | number | null
    homeCity?: NullableStringFieldUpdateOperationsInput | string | null
    homeState?: NullableStringFieldUpdateOperationsInput | string | null
    fortyTime?: NullableFloatFieldUpdateOperationsInput | number | null
    tenYardSplit?: NullableFloatFieldUpdateOperationsInput | number | null
    verticalLeap?: NullableFloatFieldUpdateOperationsInput | number | null
    broadJump?: NullableFloatFieldUpdateOperationsInput | number | null
    threeCone?: NullableFloatFieldUpdateOperationsInput | number | null
    twentyYardShuttle?: NullableFloatFieldUpdateOperationsInput | number | null
    benchPress?: NullableIntFieldUpdateOperationsInput | number | null
    drafted?: BoolFieldUpdateOperationsInput | boolean
    draftYear?: NullableIntFieldUpdateOperationsInput | number | null
    teamId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CombineScoreCreateManyPlayerInput = {
    id?: number
    fortyTime?: number | null
    tenYardSplit?: number | null
    twentyYardShuttle?: number | null
    threeCone?: number | null
    verticalLeap?: number | null
    broadJump?: number | null
  }

  export type DraftPickCreateManyPlayerInput = {
    id?: number
    round: number
    pickNumber: number
    draftYear: number
    currentTeamId: number
    prospectId?: number | null
    used?: boolean
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    originalTeam?: number | null
  }

  export type PlayerAwardCreateManyPlayerInput = {
    id?: number
    awardName?: string | null
    yearAwarded?: number | null
  }

  export type PlayerTeamCreateManyPlayerInput = {
    id?: number
    teamId: number
    currentTeam?: boolean
    startDate?: Date | string | null
    endDate?: Date | string | null
    jerseyNumber?: number | null
    contractValue?: number | null
    contractLength?: number | null
  }

  export type CombineScoreUpdateWithoutPlayerInput = {
    fortyTime?: NullableFloatFieldUpdateOperationsInput | number | null
    tenYardSplit?: NullableFloatFieldUpdateOperationsInput | number | null
    twentyYardShuttle?: NullableFloatFieldUpdateOperationsInput | number | null
    threeCone?: NullableFloatFieldUpdateOperationsInput | number | null
    verticalLeap?: NullableFloatFieldUpdateOperationsInput | number | null
    broadJump?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type CombineScoreUncheckedUpdateWithoutPlayerInput = {
    id?: IntFieldUpdateOperationsInput | number
    fortyTime?: NullableFloatFieldUpdateOperationsInput | number | null
    tenYardSplit?: NullableFloatFieldUpdateOperationsInput | number | null
    twentyYardShuttle?: NullableFloatFieldUpdateOperationsInput | number | null
    threeCone?: NullableFloatFieldUpdateOperationsInput | number | null
    verticalLeap?: NullableFloatFieldUpdateOperationsInput | number | null
    broadJump?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type CombineScoreUncheckedUpdateManyWithoutPlayerInput = {
    id?: IntFieldUpdateOperationsInput | number
    fortyTime?: NullableFloatFieldUpdateOperationsInput | number | null
    tenYardSplit?: NullableFloatFieldUpdateOperationsInput | number | null
    twentyYardShuttle?: NullableFloatFieldUpdateOperationsInput | number | null
    threeCone?: NullableFloatFieldUpdateOperationsInput | number | null
    verticalLeap?: NullableFloatFieldUpdateOperationsInput | number | null
    broadJump?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type DraftPickUpdateWithoutPlayerInput = {
    round?: IntFieldUpdateOperationsInput | number
    pickNumber?: IntFieldUpdateOperationsInput | number
    draftYear?: IntFieldUpdateOperationsInput | number
    used?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    originalTeam?: NullableIntFieldUpdateOperationsInput | number | null
    Team?: TeamUpdateOneRequiredWithoutDraftPickNestedInput
    Prospect_DraftPick_prospectIdToProspect?: ProspectUpdateOneWithoutDraftPick_DraftPick_prospectIdToProspectNestedInput
    Prospect_Prospect_draftPickIdToDraftPick?: ProspectUpdateManyWithoutDraftPick_Prospect_draftPickIdToDraftPickNestedInput
  }

  export type DraftPickUncheckedUpdateWithoutPlayerInput = {
    id?: IntFieldUpdateOperationsInput | number
    round?: IntFieldUpdateOperationsInput | number
    pickNumber?: IntFieldUpdateOperationsInput | number
    draftYear?: IntFieldUpdateOperationsInput | number
    currentTeamId?: IntFieldUpdateOperationsInput | number
    prospectId?: NullableIntFieldUpdateOperationsInput | number | null
    used?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    originalTeam?: NullableIntFieldUpdateOperationsInput | number | null
    Prospect_Prospect_draftPickIdToDraftPick?: ProspectUncheckedUpdateManyWithoutDraftPick_Prospect_draftPickIdToDraftPickNestedInput
  }

  export type DraftPickUncheckedUpdateManyWithoutPlayerInput = {
    id?: IntFieldUpdateOperationsInput | number
    round?: IntFieldUpdateOperationsInput | number
    pickNumber?: IntFieldUpdateOperationsInput | number
    draftYear?: IntFieldUpdateOperationsInput | number
    currentTeamId?: IntFieldUpdateOperationsInput | number
    prospectId?: NullableIntFieldUpdateOperationsInput | number | null
    used?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    originalTeam?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PlayerAwardUpdateWithoutPlayerInput = {
    awardName?: NullableStringFieldUpdateOperationsInput | string | null
    yearAwarded?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PlayerAwardUncheckedUpdateWithoutPlayerInput = {
    id?: IntFieldUpdateOperationsInput | number
    awardName?: NullableStringFieldUpdateOperationsInput | string | null
    yearAwarded?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PlayerAwardUncheckedUpdateManyWithoutPlayerInput = {
    id?: IntFieldUpdateOperationsInput | number
    awardName?: NullableStringFieldUpdateOperationsInput | string | null
    yearAwarded?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PlayerTeamUpdateWithoutPlayerInput = {
    currentTeam?: BoolFieldUpdateOperationsInput | boolean
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    jerseyNumber?: NullableIntFieldUpdateOperationsInput | number | null
    contractValue?: NullableIntFieldUpdateOperationsInput | number | null
    contractLength?: NullableIntFieldUpdateOperationsInput | number | null
    Team?: TeamUpdateOneRequiredWithoutPlayerTeamNestedInput
  }

  export type PlayerTeamUncheckedUpdateWithoutPlayerInput = {
    id?: IntFieldUpdateOperationsInput | number
    teamId?: IntFieldUpdateOperationsInput | number
    currentTeam?: BoolFieldUpdateOperationsInput | boolean
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    jerseyNumber?: NullableIntFieldUpdateOperationsInput | number | null
    contractValue?: NullableIntFieldUpdateOperationsInput | number | null
    contractLength?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PlayerTeamUncheckedUpdateManyWithoutPlayerInput = {
    id?: IntFieldUpdateOperationsInput | number
    teamId?: IntFieldUpdateOperationsInput | number
    currentTeam?: BoolFieldUpdateOperationsInput | boolean
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    jerseyNumber?: NullableIntFieldUpdateOperationsInput | number | null
    contractValue?: NullableIntFieldUpdateOperationsInput | number | null
    contractLength?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type DraftPickCreateManyProspect_DraftPick_prospectIdToProspectInput = {
    id?: number
    round: number
    pickNumber: number
    draftYear: number
    currentTeamId: number
    playerId?: number | null
    used?: boolean
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    originalTeam?: number | null
  }

  export type PlayerCreateManyProspectInput = {
    id?: number
    firstName: string
    lastName: string
    age: number
    height?: number | null
    weight?: number | null
    handSize?: number | null
    armLength?: number | null
    homeCity?: string | null
    homeState?: string | null
    university?: string | null
    status?: string | null
    position?: string | null
    pickId?: number | null
    combineScoreId?: number | null
    yearEnteredLeague?: number | null
  }

  export type DraftPickUpdateWithoutProspect_DraftPick_prospectIdToProspectInput = {
    round?: IntFieldUpdateOperationsInput | number
    pickNumber?: IntFieldUpdateOperationsInput | number
    draftYear?: IntFieldUpdateOperationsInput | number
    used?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    originalTeam?: NullableIntFieldUpdateOperationsInput | number | null
    Team?: TeamUpdateOneRequiredWithoutDraftPickNestedInput
    Player?: PlayerUpdateOneWithoutDraftPickNestedInput
    Prospect_Prospect_draftPickIdToDraftPick?: ProspectUpdateManyWithoutDraftPick_Prospect_draftPickIdToDraftPickNestedInput
  }

  export type DraftPickUncheckedUpdateWithoutProspect_DraftPick_prospectIdToProspectInput = {
    id?: IntFieldUpdateOperationsInput | number
    round?: IntFieldUpdateOperationsInput | number
    pickNumber?: IntFieldUpdateOperationsInput | number
    draftYear?: IntFieldUpdateOperationsInput | number
    currentTeamId?: IntFieldUpdateOperationsInput | number
    playerId?: NullableIntFieldUpdateOperationsInput | number | null
    used?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    originalTeam?: NullableIntFieldUpdateOperationsInput | number | null
    Prospect_Prospect_draftPickIdToDraftPick?: ProspectUncheckedUpdateManyWithoutDraftPick_Prospect_draftPickIdToDraftPickNestedInput
  }

  export type DraftPickUncheckedUpdateManyWithoutProspect_DraftPick_prospectIdToProspectInput = {
    id?: IntFieldUpdateOperationsInput | number
    round?: IntFieldUpdateOperationsInput | number
    pickNumber?: IntFieldUpdateOperationsInput | number
    draftYear?: IntFieldUpdateOperationsInput | number
    currentTeamId?: IntFieldUpdateOperationsInput | number
    playerId?: NullableIntFieldUpdateOperationsInput | number | null
    used?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    originalTeam?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PlayerUpdateWithoutProspectInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    handSize?: NullableFloatFieldUpdateOperationsInput | number | null
    armLength?: NullableFloatFieldUpdateOperationsInput | number | null
    homeCity?: NullableStringFieldUpdateOperationsInput | string | null
    homeState?: NullableStringFieldUpdateOperationsInput | string | null
    university?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    pickId?: NullableIntFieldUpdateOperationsInput | number | null
    combineScoreId?: NullableIntFieldUpdateOperationsInput | number | null
    yearEnteredLeague?: NullableIntFieldUpdateOperationsInput | number | null
    CombineScore?: CombineScoreUpdateManyWithoutPlayerNestedInput
    DraftPick?: DraftPickUpdateManyWithoutPlayerNestedInput
    PlayerAward?: PlayerAwardUpdateManyWithoutPlayerNestedInput
    PlayerTeam?: PlayerTeamUpdateManyWithoutPlayerNestedInput
  }

  export type PlayerUncheckedUpdateWithoutProspectInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    handSize?: NullableFloatFieldUpdateOperationsInput | number | null
    armLength?: NullableFloatFieldUpdateOperationsInput | number | null
    homeCity?: NullableStringFieldUpdateOperationsInput | string | null
    homeState?: NullableStringFieldUpdateOperationsInput | string | null
    university?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    pickId?: NullableIntFieldUpdateOperationsInput | number | null
    combineScoreId?: NullableIntFieldUpdateOperationsInput | number | null
    yearEnteredLeague?: NullableIntFieldUpdateOperationsInput | number | null
    CombineScore?: CombineScoreUncheckedUpdateManyWithoutPlayerNestedInput
    DraftPick?: DraftPickUncheckedUpdateManyWithoutPlayerNestedInput
    PlayerAward?: PlayerAwardUncheckedUpdateManyWithoutPlayerNestedInput
    PlayerTeam?: PlayerTeamUncheckedUpdateManyWithoutPlayerNestedInput
  }

  export type PlayerUncheckedUpdateManyWithoutProspectInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    handSize?: NullableFloatFieldUpdateOperationsInput | number | null
    armLength?: NullableFloatFieldUpdateOperationsInput | number | null
    homeCity?: NullableStringFieldUpdateOperationsInput | string | null
    homeState?: NullableStringFieldUpdateOperationsInput | string | null
    university?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    pickId?: NullableIntFieldUpdateOperationsInput | number | null
    combineScoreId?: NullableIntFieldUpdateOperationsInput | number | null
    yearEnteredLeague?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type DraftPickCreateManyTeamInput = {
    id?: number
    round: number
    pickNumber: number
    draftYear: number
    prospectId?: number | null
    playerId?: number | null
    used?: boolean
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    originalTeam?: number | null
  }

  export type PlayerTeamCreateManyTeamInput = {
    id?: number
    playerId: number
    currentTeam?: boolean
    startDate?: Date | string | null
    endDate?: Date | string | null
    jerseyNumber?: number | null
    contractValue?: number | null
    contractLength?: number | null
  }

  export type PostSeasonResultCreateManyTeamInput = {
    id?: number
    playoffYear?: number | null
    lastRoundReached?: string | null
    winLose?: string | null
    opponentScore?: number | null
    teamScore?: number | null
  }

  export type ProspectCreateManyTeamInput = {
    id?: number
    firstName: string
    lastName: string
    position: string
    college: string
    height: number
    weight: number
    handSize?: number | null
    armLength?: number | null
    homeCity?: string | null
    homeState?: string | null
    fortyTime?: number | null
    tenYardSplit?: number | null
    verticalLeap?: number | null
    broadJump?: number | null
    threeCone?: number | null
    twentyYardShuttle?: number | null
    benchPress?: number | null
    drafted?: boolean
    draftYear?: number | null
    draftPickId?: number | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type ScheduleCreateManyTeam_Schedule_teamIdToTeamInput = {
    id?: number
    seasonYear?: number | null
    oppTeamId: number
    oppTeamConference?: string | null
    oppTeamDivision?: string | null
    scheduleWeek?: number | null
    gameDate?: Date | string | null
    gameCity?: string | null
    gameStateProvince?: string | null
    gameCountry?: string | null
    gameLocation?: string | null
    wonLostFlag?: string | null
    homeOrAway?: string | null
    oppTeamScore?: number | null
    teamScore?: number | null
  }

  export type ScheduleCreateManyTeam_Schedule_oppTeamIdToTeamInput = {
    id?: number
    teamId?: number | null
    seasonYear?: number | null
    oppTeamConference?: string | null
    oppTeamDivision?: string | null
    scheduleWeek?: number | null
    gameDate?: Date | string | null
    gameCity?: string | null
    gameStateProvince?: string | null
    gameCountry?: string | null
    gameLocation?: string | null
    wonLostFlag?: string | null
    homeOrAway?: string | null
    oppTeamScore?: number | null
    teamScore?: number | null
  }

  export type TeamNeedCreateManyTeamInput = {
    id?: number
    position: string
    priority?: number
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    draftYear?: number | null
  }

  export type DraftPickUpdateWithoutTeamInput = {
    round?: IntFieldUpdateOperationsInput | number
    pickNumber?: IntFieldUpdateOperationsInput | number
    draftYear?: IntFieldUpdateOperationsInput | number
    used?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    originalTeam?: NullableIntFieldUpdateOperationsInput | number | null
    Player?: PlayerUpdateOneWithoutDraftPickNestedInput
    Prospect_DraftPick_prospectIdToProspect?: ProspectUpdateOneWithoutDraftPick_DraftPick_prospectIdToProspectNestedInput
    Prospect_Prospect_draftPickIdToDraftPick?: ProspectUpdateManyWithoutDraftPick_Prospect_draftPickIdToDraftPickNestedInput
  }

  export type DraftPickUncheckedUpdateWithoutTeamInput = {
    id?: IntFieldUpdateOperationsInput | number
    round?: IntFieldUpdateOperationsInput | number
    pickNumber?: IntFieldUpdateOperationsInput | number
    draftYear?: IntFieldUpdateOperationsInput | number
    prospectId?: NullableIntFieldUpdateOperationsInput | number | null
    playerId?: NullableIntFieldUpdateOperationsInput | number | null
    used?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    originalTeam?: NullableIntFieldUpdateOperationsInput | number | null
    Prospect_Prospect_draftPickIdToDraftPick?: ProspectUncheckedUpdateManyWithoutDraftPick_Prospect_draftPickIdToDraftPickNestedInput
  }

  export type DraftPickUncheckedUpdateManyWithoutTeamInput = {
    id?: IntFieldUpdateOperationsInput | number
    round?: IntFieldUpdateOperationsInput | number
    pickNumber?: IntFieldUpdateOperationsInput | number
    draftYear?: IntFieldUpdateOperationsInput | number
    prospectId?: NullableIntFieldUpdateOperationsInput | number | null
    playerId?: NullableIntFieldUpdateOperationsInput | number | null
    used?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    originalTeam?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PlayerTeamUpdateWithoutTeamInput = {
    currentTeam?: BoolFieldUpdateOperationsInput | boolean
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    jerseyNumber?: NullableIntFieldUpdateOperationsInput | number | null
    contractValue?: NullableIntFieldUpdateOperationsInput | number | null
    contractLength?: NullableIntFieldUpdateOperationsInput | number | null
    Player?: PlayerUpdateOneRequiredWithoutPlayerTeamNestedInput
  }

  export type PlayerTeamUncheckedUpdateWithoutTeamInput = {
    id?: IntFieldUpdateOperationsInput | number
    playerId?: IntFieldUpdateOperationsInput | number
    currentTeam?: BoolFieldUpdateOperationsInput | boolean
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    jerseyNumber?: NullableIntFieldUpdateOperationsInput | number | null
    contractValue?: NullableIntFieldUpdateOperationsInput | number | null
    contractLength?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PlayerTeamUncheckedUpdateManyWithoutTeamInput = {
    id?: IntFieldUpdateOperationsInput | number
    playerId?: IntFieldUpdateOperationsInput | number
    currentTeam?: BoolFieldUpdateOperationsInput | boolean
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    jerseyNumber?: NullableIntFieldUpdateOperationsInput | number | null
    contractValue?: NullableIntFieldUpdateOperationsInput | number | null
    contractLength?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PostSeasonResultUpdateWithoutTeamInput = {
    playoffYear?: NullableIntFieldUpdateOperationsInput | number | null
    lastRoundReached?: NullableStringFieldUpdateOperationsInput | string | null
    winLose?: NullableStringFieldUpdateOperationsInput | string | null
    opponentScore?: NullableIntFieldUpdateOperationsInput | number | null
    teamScore?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PostSeasonResultUncheckedUpdateWithoutTeamInput = {
    id?: IntFieldUpdateOperationsInput | number
    playoffYear?: NullableIntFieldUpdateOperationsInput | number | null
    lastRoundReached?: NullableStringFieldUpdateOperationsInput | string | null
    winLose?: NullableStringFieldUpdateOperationsInput | string | null
    opponentScore?: NullableIntFieldUpdateOperationsInput | number | null
    teamScore?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PostSeasonResultUncheckedUpdateManyWithoutTeamInput = {
    id?: IntFieldUpdateOperationsInput | number
    playoffYear?: NullableIntFieldUpdateOperationsInput | number | null
    lastRoundReached?: NullableStringFieldUpdateOperationsInput | string | null
    winLose?: NullableStringFieldUpdateOperationsInput | string | null
    opponentScore?: NullableIntFieldUpdateOperationsInput | number | null
    teamScore?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ProspectUpdateWithoutTeamInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    college?: StringFieldUpdateOperationsInput | string
    height?: FloatFieldUpdateOperationsInput | number
    weight?: FloatFieldUpdateOperationsInput | number
    handSize?: NullableFloatFieldUpdateOperationsInput | number | null
    armLength?: NullableFloatFieldUpdateOperationsInput | number | null
    homeCity?: NullableStringFieldUpdateOperationsInput | string | null
    homeState?: NullableStringFieldUpdateOperationsInput | string | null
    fortyTime?: NullableFloatFieldUpdateOperationsInput | number | null
    tenYardSplit?: NullableFloatFieldUpdateOperationsInput | number | null
    verticalLeap?: NullableFloatFieldUpdateOperationsInput | number | null
    broadJump?: NullableFloatFieldUpdateOperationsInput | number | null
    threeCone?: NullableFloatFieldUpdateOperationsInput | number | null
    twentyYardShuttle?: NullableFloatFieldUpdateOperationsInput | number | null
    benchPress?: NullableIntFieldUpdateOperationsInput | number | null
    drafted?: BoolFieldUpdateOperationsInput | boolean
    draftYear?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    DraftPick_DraftPick_prospectIdToProspect?: DraftPickUpdateManyWithoutProspect_DraftPick_prospectIdToProspectNestedInput
    Player?: PlayerUpdateManyWithoutProspectNestedInput
    DraftPick_Prospect_draftPickIdToDraftPick?: DraftPickUpdateOneWithoutProspect_Prospect_draftPickIdToDraftPickNestedInput
  }

  export type ProspectUncheckedUpdateWithoutTeamInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    college?: StringFieldUpdateOperationsInput | string
    height?: FloatFieldUpdateOperationsInput | number
    weight?: FloatFieldUpdateOperationsInput | number
    handSize?: NullableFloatFieldUpdateOperationsInput | number | null
    armLength?: NullableFloatFieldUpdateOperationsInput | number | null
    homeCity?: NullableStringFieldUpdateOperationsInput | string | null
    homeState?: NullableStringFieldUpdateOperationsInput | string | null
    fortyTime?: NullableFloatFieldUpdateOperationsInput | number | null
    tenYardSplit?: NullableFloatFieldUpdateOperationsInput | number | null
    verticalLeap?: NullableFloatFieldUpdateOperationsInput | number | null
    broadJump?: NullableFloatFieldUpdateOperationsInput | number | null
    threeCone?: NullableFloatFieldUpdateOperationsInput | number | null
    twentyYardShuttle?: NullableFloatFieldUpdateOperationsInput | number | null
    benchPress?: NullableIntFieldUpdateOperationsInput | number | null
    drafted?: BoolFieldUpdateOperationsInput | boolean
    draftYear?: NullableIntFieldUpdateOperationsInput | number | null
    draftPickId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    DraftPick_DraftPick_prospectIdToProspect?: DraftPickUncheckedUpdateManyWithoutProspect_DraftPick_prospectIdToProspectNestedInput
    Player?: PlayerUncheckedUpdateManyWithoutProspectNestedInput
  }

  export type ProspectUncheckedUpdateManyWithoutTeamInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    college?: StringFieldUpdateOperationsInput | string
    height?: FloatFieldUpdateOperationsInput | number
    weight?: FloatFieldUpdateOperationsInput | number
    handSize?: NullableFloatFieldUpdateOperationsInput | number | null
    armLength?: NullableFloatFieldUpdateOperationsInput | number | null
    homeCity?: NullableStringFieldUpdateOperationsInput | string | null
    homeState?: NullableStringFieldUpdateOperationsInput | string | null
    fortyTime?: NullableFloatFieldUpdateOperationsInput | number | null
    tenYardSplit?: NullableFloatFieldUpdateOperationsInput | number | null
    verticalLeap?: NullableFloatFieldUpdateOperationsInput | number | null
    broadJump?: NullableFloatFieldUpdateOperationsInput | number | null
    threeCone?: NullableFloatFieldUpdateOperationsInput | number | null
    twentyYardShuttle?: NullableFloatFieldUpdateOperationsInput | number | null
    benchPress?: NullableIntFieldUpdateOperationsInput | number | null
    drafted?: BoolFieldUpdateOperationsInput | boolean
    draftYear?: NullableIntFieldUpdateOperationsInput | number | null
    draftPickId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ScheduleUpdateWithoutTeam_Schedule_teamIdToTeamInput = {
    seasonYear?: NullableIntFieldUpdateOperationsInput | number | null
    oppTeamConference?: NullableStringFieldUpdateOperationsInput | string | null
    oppTeamDivision?: NullableStringFieldUpdateOperationsInput | string | null
    scheduleWeek?: NullableIntFieldUpdateOperationsInput | number | null
    gameDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gameCity?: NullableStringFieldUpdateOperationsInput | string | null
    gameStateProvince?: NullableStringFieldUpdateOperationsInput | string | null
    gameCountry?: NullableStringFieldUpdateOperationsInput | string | null
    gameLocation?: NullableStringFieldUpdateOperationsInput | string | null
    wonLostFlag?: NullableStringFieldUpdateOperationsInput | string | null
    homeOrAway?: NullableStringFieldUpdateOperationsInput | string | null
    oppTeamScore?: NullableIntFieldUpdateOperationsInput | number | null
    teamScore?: NullableIntFieldUpdateOperationsInput | number | null
    Team_Schedule_oppTeamIdToTeam?: TeamUpdateOneRequiredWithoutSchedule_Schedule_oppTeamIdToTeamNestedInput
  }

  export type ScheduleUncheckedUpdateWithoutTeam_Schedule_teamIdToTeamInput = {
    id?: IntFieldUpdateOperationsInput | number
    seasonYear?: NullableIntFieldUpdateOperationsInput | number | null
    oppTeamId?: IntFieldUpdateOperationsInput | number
    oppTeamConference?: NullableStringFieldUpdateOperationsInput | string | null
    oppTeamDivision?: NullableStringFieldUpdateOperationsInput | string | null
    scheduleWeek?: NullableIntFieldUpdateOperationsInput | number | null
    gameDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gameCity?: NullableStringFieldUpdateOperationsInput | string | null
    gameStateProvince?: NullableStringFieldUpdateOperationsInput | string | null
    gameCountry?: NullableStringFieldUpdateOperationsInput | string | null
    gameLocation?: NullableStringFieldUpdateOperationsInput | string | null
    wonLostFlag?: NullableStringFieldUpdateOperationsInput | string | null
    homeOrAway?: NullableStringFieldUpdateOperationsInput | string | null
    oppTeamScore?: NullableIntFieldUpdateOperationsInput | number | null
    teamScore?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ScheduleUncheckedUpdateManyWithoutTeam_Schedule_teamIdToTeamInput = {
    id?: IntFieldUpdateOperationsInput | number
    seasonYear?: NullableIntFieldUpdateOperationsInput | number | null
    oppTeamId?: IntFieldUpdateOperationsInput | number
    oppTeamConference?: NullableStringFieldUpdateOperationsInput | string | null
    oppTeamDivision?: NullableStringFieldUpdateOperationsInput | string | null
    scheduleWeek?: NullableIntFieldUpdateOperationsInput | number | null
    gameDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gameCity?: NullableStringFieldUpdateOperationsInput | string | null
    gameStateProvince?: NullableStringFieldUpdateOperationsInput | string | null
    gameCountry?: NullableStringFieldUpdateOperationsInput | string | null
    gameLocation?: NullableStringFieldUpdateOperationsInput | string | null
    wonLostFlag?: NullableStringFieldUpdateOperationsInput | string | null
    homeOrAway?: NullableStringFieldUpdateOperationsInput | string | null
    oppTeamScore?: NullableIntFieldUpdateOperationsInput | number | null
    teamScore?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ScheduleUpdateWithoutTeam_Schedule_oppTeamIdToTeamInput = {
    seasonYear?: NullableIntFieldUpdateOperationsInput | number | null
    oppTeamConference?: NullableStringFieldUpdateOperationsInput | string | null
    oppTeamDivision?: NullableStringFieldUpdateOperationsInput | string | null
    scheduleWeek?: NullableIntFieldUpdateOperationsInput | number | null
    gameDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gameCity?: NullableStringFieldUpdateOperationsInput | string | null
    gameStateProvince?: NullableStringFieldUpdateOperationsInput | string | null
    gameCountry?: NullableStringFieldUpdateOperationsInput | string | null
    gameLocation?: NullableStringFieldUpdateOperationsInput | string | null
    wonLostFlag?: NullableStringFieldUpdateOperationsInput | string | null
    homeOrAway?: NullableStringFieldUpdateOperationsInput | string | null
    oppTeamScore?: NullableIntFieldUpdateOperationsInput | number | null
    teamScore?: NullableIntFieldUpdateOperationsInput | number | null
    Team_Schedule_teamIdToTeam?: TeamUpdateOneWithoutSchedule_Schedule_teamIdToTeamNestedInput
  }

  export type ScheduleUncheckedUpdateWithoutTeam_Schedule_oppTeamIdToTeamInput = {
    id?: IntFieldUpdateOperationsInput | number
    teamId?: NullableIntFieldUpdateOperationsInput | number | null
    seasonYear?: NullableIntFieldUpdateOperationsInput | number | null
    oppTeamConference?: NullableStringFieldUpdateOperationsInput | string | null
    oppTeamDivision?: NullableStringFieldUpdateOperationsInput | string | null
    scheduleWeek?: NullableIntFieldUpdateOperationsInput | number | null
    gameDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gameCity?: NullableStringFieldUpdateOperationsInput | string | null
    gameStateProvince?: NullableStringFieldUpdateOperationsInput | string | null
    gameCountry?: NullableStringFieldUpdateOperationsInput | string | null
    gameLocation?: NullableStringFieldUpdateOperationsInput | string | null
    wonLostFlag?: NullableStringFieldUpdateOperationsInput | string | null
    homeOrAway?: NullableStringFieldUpdateOperationsInput | string | null
    oppTeamScore?: NullableIntFieldUpdateOperationsInput | number | null
    teamScore?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ScheduleUncheckedUpdateManyWithoutTeam_Schedule_oppTeamIdToTeamInput = {
    id?: IntFieldUpdateOperationsInput | number
    teamId?: NullableIntFieldUpdateOperationsInput | number | null
    seasonYear?: NullableIntFieldUpdateOperationsInput | number | null
    oppTeamConference?: NullableStringFieldUpdateOperationsInput | string | null
    oppTeamDivision?: NullableStringFieldUpdateOperationsInput | string | null
    scheduleWeek?: NullableIntFieldUpdateOperationsInput | number | null
    gameDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gameCity?: NullableStringFieldUpdateOperationsInput | string | null
    gameStateProvince?: NullableStringFieldUpdateOperationsInput | string | null
    gameCountry?: NullableStringFieldUpdateOperationsInput | string | null
    gameLocation?: NullableStringFieldUpdateOperationsInput | string | null
    wonLostFlag?: NullableStringFieldUpdateOperationsInput | string | null
    homeOrAway?: NullableStringFieldUpdateOperationsInput | string | null
    oppTeamScore?: NullableIntFieldUpdateOperationsInput | number | null
    teamScore?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type TeamNeedUpdateWithoutTeamInput = {
    position?: StringFieldUpdateOperationsInput | string
    priority?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    draftYear?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type TeamNeedUncheckedUpdateWithoutTeamInput = {
    id?: IntFieldUpdateOperationsInput | number
    position?: StringFieldUpdateOperationsInput | string
    priority?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    draftYear?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type TeamNeedUncheckedUpdateManyWithoutTeamInput = {
    id?: IntFieldUpdateOperationsInput | number
    position?: StringFieldUpdateOperationsInput | string
    priority?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    draftYear?: NullableIntFieldUpdateOperationsInput | number | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use DraftPickCountOutputTypeDefaultArgs instead
     */
    export type DraftPickCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DraftPickCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PlayerCountOutputTypeDefaultArgs instead
     */
    export type PlayerCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PlayerCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProspectCountOutputTypeDefaultArgs instead
     */
    export type ProspectCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProspectCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TeamCountOutputTypeDefaultArgs instead
     */
    export type TeamCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TeamCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CombineScoreDefaultArgs instead
     */
    export type CombineScoreArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CombineScoreDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DraftPickDefaultArgs instead
     */
    export type DraftPickArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DraftPickDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PersonDefaultArgs instead
     */
    export type PersonArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PersonDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PlayerDefaultArgs instead
     */
    export type PlayerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PlayerDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PlayerAwardDefaultArgs instead
     */
    export type PlayerAwardArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PlayerAwardDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PlayerTeamDefaultArgs instead
     */
    export type PlayerTeamArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PlayerTeamDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PostSeasonResultDefaultArgs instead
     */
    export type PostSeasonResultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PostSeasonResultDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProspectDefaultArgs instead
     */
    export type ProspectArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProspectDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ScheduleDefaultArgs instead
     */
    export type ScheduleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ScheduleDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TeamDefaultArgs instead
     */
    export type TeamArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TeamDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TeamNeedDefaultArgs instead
     */
    export type TeamNeedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TeamNeedDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}