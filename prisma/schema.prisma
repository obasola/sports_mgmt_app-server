// This is your Prisma schema file for MyNFL database

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model CombineScore {
  id                Int     @id @default(autoincrement())
  fortyTime         Float?
  tenYardSplit      Float?
  twentyYardShuttle Float?
  threeCone         Float?
  verticalLeap      Float?
  playerId          Int?
  broadJump         Float?
  player            Player? @relation(fields: [playerId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_Combine_Score_1")

  @@index([playerId], map: "fk_Combine_Score_1_idx")
}

model DraftPick {
  id                              Int        @id @default(autoincrement())
  round                           Int
  pickNumber                      Int
  draftYear                       Int
  currentTeamId                   Int
  prospectId                      Int?
  playerId                        Int?
  used                            Boolean    @default(false)
  createdAt                       DateTime?  @default(now())
  updatedAt                       DateTime?  @default(now())
  originalTeam                    Int?
  team                            Team       @relation(fields: [currentTeamId], references: [id], map: "fk_DraftPick_CurrentTeam")
  player                          Player?    @relation(fields: [playerId], references: [id], map: "fk_DraftPick_Player")
  prospect_DraftPickToProspect    Prospect?  @relation("DraftPick_prospectIdToProspect", fields: [prospectId], references: [id], map: "fk_DraftPick_Prospect")
  prospect_ProspectToDraftPick    Prospect[] @relation("Prospect_draftPickIdToDraftPick")

  @@unique([draftYear, round, pickNumber], map: "unique_draft_pick")
  @@index([playerId], map: "fk_DraftPick_Player_idx")
  @@index([prospectId], map: "fk_DraftPick_Prospect_idx")
  @@index([currentTeamId, draftYear], map: "idx_draftpick_currentteam")
  @@index([draftYear], map: "idx_draftpick_originalteam")
  @@index([used], map: "idx_draftpick_used")
}

model Person {
  pid          Int    @id @default(autoincrement())
  userName     String @db.VarChar(25)
  emailAddress String @db.VarChar(75)
  password     String @db.VarChar(25)
  firstName    String @db.VarChar(25)
  lastName     String @db.VarChar(35)
}

model Player {
  id                Int            @id @default(autoincrement())
  firstName         String         @db.VarChar(45)
  lastName          String         @db.VarChar(45)
  age               Int
  height            Float?
  weight            Float?
  handSize          Float?
  armLength         Float?
  homeCity          String?        @db.VarChar(45)
  homeState         String?        @db.VarChar(45)
  university        String?        @db.VarChar(75)
  status            String?        @db.VarChar(45)
  position          String?        @db.VarChar(75)
  pickId            Int?
  combineScoreId    Int?
  prospectId        Int?
  yearEnteredLeague DateTime?      @db.Date
  combineScores     CombineScore[]
  draftPicks        DraftPick[]
  prospect          Prospect?      @relation(fields: [prospectId], references: [id], map: "fk_Player_Prospect")
  playerAwards      PlayerAward[]
  playerTeams       PlayerTeam[]

  @@index([prospectId], map: "fk_Player_Prospect")
}

model PlayerAward {
  id          Int     @id @default(autoincrement())
  playerId    Int
  awardName   String? @db.VarChar(45)
  yearAwarded Int?
  player      Player  @relation(fields: [playerId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_Player_Awards")

  @@index([playerId], map: "FK_Player_Awards_idx")
}


model PostSeasonResult {
  id               Int     @id @default(autoincrement())
  playoffYear      Int
  lastRoundReached String? @db.VarChar(45)
  winLose          String? @db.VarChar(1)
  opponentScore    Int?
  teamScore        Int?
  teamId           Int?
  team             Team?   @relation(fields: [teamId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "fk_Team")

  @@index([teamId], map: "fk_Team_idx")
}



model Schedule {
  id                Int       @id @default(autoincrement())
  teamId            Int?
  seasonYear        String    @db.VarChar(4)
  oppTeamId         Int
  oppTeamConference String?   @db.VarChar(45)
  oppTeamDivision   String?   @db.VarChar(45)
  scheduleWeek      Int?
  gameDate          DateTime? @db.Date
  gameCity          String?   @db.VarChar(45)
  gameStateProvince String?   @db.VarChar(45)
  gameCountry       String?   @db.VarChar(45)
  gameLocation      String?   @db.VarChar(75)
  wonLostFlag       String?   @db.VarChar(1)
  homeOrAway        String?   @db.VarChar(1)
  oppTeamScore      Int?
  teamScore         Int?
  team              Team?     @relation("Schedule_teamIdToTeam", fields: [teamId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_Schedule_Team")
  oppTeam           Team      @relation("Schedule_oppTeamIdToTeam", fields: [oppTeamId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_Schedule_Visitor")

  @@index([oppTeamId], map: "fk_Schedule_1_idx")
  @@index([teamId], map: "fk_Schedule_Team_idx")
}

model TeamNeed {
  id        Int       @id @default(autoincrement())
  teamId    Int
  position  String    @db.VarChar(10)
  priority  Int       @default(1)
  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now())
  draftYear DateTime? @db.Date
  team      Team      @relation(fields: [teamId], references: [id], onDelete: Cascade, map: "fk_TeamNeed_Team")

  @@unique([teamId, position], map: "unique_team_position")
  @@index([teamId], map: "fk_TeamNeed_Team_idx")
}