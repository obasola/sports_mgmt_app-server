generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model CombineScore {
  id                Int     @id @default(autoincrement())
  fortyTime         Float?  @db.Float
  tenYardSplit      Float?  @db.Float
  twentyYardShuttle Float?  @db.Float
  threeCone         Float?  @db.Float
  verticalLeap      Float?  @db.Float
  playerId          Int?
  broadJump         Float?  @db.Float
  Player            Player? @relation(fields: [playerId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_Combine_Score_1")

  @@index([playerId], map: "fk_Combine_Score_1_idx")
}

model DraftPick {
  id                                       Int        @id @default(autoincrement())
  round                                    Int
  pickNumber                               Int
  draftYear                                Int
  currentTeamId                            Int
  prospectId                               Int?
  playerId                                 Int?
  used                                     Boolean    @default(false)
  createdAt                                DateTime?  @default(now()) @db.Timestamp(0)
  updatedAt                                DateTime?  @default(now()) @db.Timestamp(0)
  originalTeam                             Int?
  Team                                     Team       @relation(fields: [currentTeamId], references: [id], map: "fk_DraftPick_CurrentTeam")
  Player                                   Player?    @relation(fields: [playerId], references: [id], map: "fk_DraftPick_Player")
  Prospect_DraftPick_prospectIdToProspect  Prospect?  @relation("DraftPick_prospectIdToProspect", fields: [prospectId], references: [id], map: "fk_DraftPick_Prospect")
  Prospect_Prospect_draftPickIdToDraftPick Prospect[] @relation("Prospect_draftPickIdToDraftPick")

  @@unique([draftYear, round, pickNumber], map: "unique_draft_pick")
  @@index([playerId], map: "fk_DraftPick_Player_idx")
  @@index([prospectId], map: "fk_DraftPick_Prospect_idx")
  @@index([currentTeamId, draftYear], map: "idx_draftpick_currentteam")
  @@index([draftYear], map: "idx_draftpick_originalteam")
  @@index([used], map: "idx_draftpick_used")
}

model Game {
  id                         Int              @id @default(autoincrement())
  seasonYear                 String           @db.VarChar(4)
  gameWeek                   Int?             @db.TinyInt
  preseason                  Int?             @db.TinyInt
  gameDate                   DateTime?        @db.DateTime(0)
  homeTeamId                 Int
  awayTeamId                 Int
  gameLocation               String?          @db.VarChar(255)
  gameCity                   String?          @db.VarChar(100)
  gameStateProvince          String?          @db.VarChar(100)
  gameCountry                String?          @default("USA") @db.VarChar(50)
  homeScore                  Int?             @default(0)
  awayScore                  Int?             @default(0)
  gameStatus                 Game_gameStatus? @default(scheduled)
  createdAt                  DateTime?        @default(now()) @db.Timestamp(0)
  updatedAt                  DateTime?        @default(now()) @db.Timestamp(0)
  homeTeam Team             @relation("Game_homeTeamIdToTeam", fields: [homeTeamId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "Game_ibfk_1")
  awayTeam Team             @relation("Game_awayTeamIdToTeam", fields: [awayTeamId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "Game_ibfk_2")

  @@unique([seasonYear, gameDate, homeTeamId, awayTeamId], map: "unique_game")
  @@index([awayTeamId], map: "awayTeamId")
  @@index([homeTeamId], map: "homeTeamId")
}

model Person {
  pid          Int    @id @default(autoincrement())
  userName     String @db.VarChar(25)
  emailAddress String @db.VarChar(75)
  password     String @db.VarChar(25)
  firstName    String @db.VarChar(25)
  lastName     String @db.VarChar(35)
}

model Player {
  id                Int            @id @default(autoincrement())
  firstName         String         @db.VarChar(45)
  lastName          String         @db.VarChar(45)
  age               Int
  height            Int?           @db.UnsignedTinyInt
  weight            Float?         @db.Float
  handSize          Int?           @db.UnsignedInt
  armLength         Float?         @db.Float
  homeCity          String?        @db.VarChar(45)
  homeState         String?        @db.VarChar(45)
  university        String?        @db.VarChar(75)
  status            String?        @db.VarChar(45)
  position          String?        @db.VarChar(75)
  pickId            Int?
  combineScoreId    Int?
  prospectId        Int?
  yearEnteredLeague Int?           @db.Year
  CombineScore      CombineScore[]
  DraftPick         DraftPick[]
  Prospect          Prospect?      @relation(fields: [prospectId], references: [id], map: "fk_Player_Prospect")
  PlayerAward       PlayerAward[]
  PlayerTeam        PlayerTeam[]

  @@index([prospectId], map: "fk_Player_Prospect")
}

model PlayerAward {
  id          Int     @id @default(autoincrement())
  playerId    Int
  awardName   String? @db.VarChar(45)
  yearAwarded Int?
  Player      Player  @relation(fields: [playerId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_Player_Awards")

  @@index([playerId], map: "FK_Player_Awards_idx")
}

model PlayerTeam {
  id             Int       @id @default(autoincrement())
  playerId       Int
  teamId         Int
  currentTeam    Boolean   @default(false)
  startDate      DateTime? @db.Date
  endDate        DateTime? @db.Date
  jerseyNumber   Int?
  contractValue  Int?
  contractLength Int?
  Player         Player    @relation(fields: [playerId], references: [id], onDelete: Cascade, map: "fk_PlayerTeam_Player")
  Team           Team      @relation(fields: [teamId], references: [id], onDelete: Cascade, map: "fk_PlayerTeam_Team")

  @@index([playerId], map: "fk_PlayerTeam_Player_idx")
  @@index([teamId], map: "fk_PlayerTeam_Team_idx")
}

model PostSeasonResult {
  id               Int     @id @default(autoincrement())
  playoffYear      Int?    @db.Year
  lastRoundReached String? @db.VarChar(45)
  winLose          String? @db.VarChar(1)
  opponentScore    Int?
  teamScore        Int?
  teamId           Int?
  Team             Team?   @relation(fields: [teamId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "fk_Team")

  @@index([teamId], map: "fk_Team_idx")
}

model Prospect {
  id                                        Int         @id @default(autoincrement())
  firstName                                 String      @db.VarChar(45)
  lastName                                  String      @db.VarChar(45)
  position                                  String      @db.VarChar(10)
  college                                   String      @db.VarChar(75)
  height                                    Float?      @db.Float
  weight                                    Float?      @db.Float
  handSize                                  Float?      @db.Float
  armLength                                 Float?      @db.Float
  homeCity                                  String?     @db.VarChar(45)
  homeState                                 String?     @db.VarChar(45)
  fortyTime                                 Float?      @db.Float
  tenYardSplit                              Float?      @db.Float
  verticalLeap                              Float?      @db.Float
  broadJump                                 Float?      @db.Float
  threeCone                                 Float?      @db.Float
  twentyYardShuttle                         Float?      @db.Float
  benchPress                                Int?
  drafted                                   Boolean     @default(false)
  draftYear                                 Int?        @db.Year
  teamId                                    Int?
  draftPickId                               Int?
  createdAt                                 DateTime?   @default(now()) @db.Timestamp(0)
  updatedAt                                 DateTime?   @default(now()) @db.Timestamp(0)
  DraftPick_DraftPick_prospectIdToProspect  DraftPick[] @relation("DraftPick_prospectIdToProspect")
  Player                                    Player[]
  DraftPick_Prospect_draftPickIdToDraftPick DraftPick?  @relation("Prospect_draftPickIdToDraftPick", fields: [draftPickId], references: [id], map: "fk_Prospect_DraftPick")
  Team                                      Team?       @relation(fields: [teamId], references: [id], map: "fk_Prospect_Team")

  @@index([draftPickId], map: "fk_Prospect_DraftPick")
  @@index([teamId], map: "fk_Prospect_Team_idx")
  @@index([college], map: "idx_prospect_college")
  @@index([drafted], map: "idx_prospect_drafted")
  @@index([lastName, firstName], map: "idx_prospect_name")
  @@index([position], map: "idx_prospect_position")
}

model Schedule {
  id                            Int       @id @default(autoincrement())
  teamId                        Int?
  seasonYear                    Int?      @db.Year
  oppTeamId                     Int
  oppTeamConference             String?   @db.VarChar(45)
  oppTeamDivision               String?   @db.VarChar(45)
  scheduleWeek                  Int?
  gameDate                      DateTime? @db.Date
  gameCity                      String?   @db.VarChar(45)
  gameStateProvince             String?   @db.VarChar(45)
  gameCountry                   String?   @db.VarChar(45)
  gameLocation                  String?   @db.VarChar(75)
  wonLostFlag                   String?   @db.VarChar(1)
  homeOrAway                    String?   @db.VarChar(1)
  oppTeamScore                  Int?
  teamScore                     Int?
  Team_Schedule_teamIdToTeam    Team?     @relation("Schedule_teamIdToTeam", fields: [teamId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_Schedule_Team")
  Team_Schedule_oppTeamIdToTeam Team      @relation("Schedule_oppTeamIdToTeam", fields: [oppTeamId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_Schedule_Visitor")

  @@index([oppTeamId], map: "fk_Schedule_1_idx")
  @@index([teamId], map: "fk_Schedule_Team_idx")
}

model Team {
  id                                Int                @id @default(autoincrement())
  name                              String             @db.VarChar(45)
  city                              String?            @db.VarChar(45)
  state                             String?            @db.VarChar(45)
  conference                        String?            @db.VarChar(35)
  division                          String?            @db.VarChar(20)
  stadium                           String?            @db.VarChar(45)
  scheduleId                        Int?
  DraftPick                         DraftPick[]
  Game_Game_homeTeamIdToTeam        Game[]             @relation("Game_homeTeamIdToTeam")
  Game_Game_awayTeamIdToTeam        Game[]             @relation("Game_awayTeamIdToTeam")
  PlayerTeam                        PlayerTeam[]
  PostSeasonResult                  PostSeasonResult[]
  Prospect                          Prospect[]
  Schedule_Schedule_teamIdToTeam    Schedule[]         @relation("Schedule_teamIdToTeam")
  Schedule_Schedule_oppTeamIdToTeam Schedule[]         @relation("Schedule_oppTeamIdToTeam")
  TeamNeed                          TeamNeed[]
}

model TeamNeed {
  id        Int       @id @default(autoincrement())
  teamId    Int
  position  String    @db.VarChar(10)
  priority  Int       @default(1)
  createdAt DateTime? @default(now()) @db.Timestamp(0)
  updatedAt DateTime? @default(now()) @db.Timestamp(0)
  draftYear Int?      @db.Year
  Team      Team      @relation(fields: [teamId], references: [id], onDelete: Cascade, map: "fk_TeamNeed_Team")

  @@unique([teamId, position], map: "unique_team_position")
  @@index([teamId], map: "fk_TeamNeed_Team_idx")
}

enum Game_gameStatus {
  scheduled
  in_progress
  completed
  cancelled
  postponed
}
